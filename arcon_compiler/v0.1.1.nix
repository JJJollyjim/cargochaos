
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/arcon_compiler/v0.1.1.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "arcon_compiler";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "arcon_compiler" = rec {
      packageId = "arcon_compiler";
      build = internal.buildRustCrateWithFeatures {
        packageId = "arcon_compiler";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.6";
        edition = "2015";
        sha256 = "0b8dh20fhdc59dhhnfi89n2bi80a8zbagzd5c122hf1vv2amxysq";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "annotate-snippets" = rec {
        crateName = "annotate-snippets";
        version = "0.6.1";
        edition = "2018";
        sha256 = "19x7ldklprdgf8pam8b3lfhrxqw5yldcvk5j0bw2agsajbj1q0n7";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "default" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "arcon_codegen" = rec {
        crateName = "arcon_codegen";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1zkyrjpglv9n7mzwdp02xkpvmcgb3acm5wky1asqa01hz22gxlhl";
        authors = [
          "Max Meldrum <mmeldrum@kth.se>"
        ];
        dependencies = [
          {
            name = "arcon_spec";
            packageId = "arcon_spec";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "rustfmt-nightly";
            packageId = "rustfmt-nightly";
          }
        ];
        
      };
      "arcon_compiler" = rec {
        crateName = "arcon_compiler";
        version = "0.1.1";
        edition = "2018";
        crateBin = [
          { name = "arconc"; path = "src/main.rs"; }
        ];
        src = pkgs.callPackage ./tarball-v0.1.1.nix {};
        authors = [
          "Max Meldrum <mmeldrum@kth.se>"
        ];
        dependencies = [
          {
            name = "arcon_codegen";
            packageId = "arcon_codegen";
          }
          {
            name = "arcon_proto";
            packageId = "arcon_proto";
            features = [ "arconc" ];
          }
          {
            name = "arcon_spec";
            packageId = "arcon_spec";
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "daemonize";
            packageId = "daemonize";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "ferris-says";
            packageId = "ferris-says";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "grpcio";
            packageId = "grpcio";
            usesDefaultFeatures = false;
            features = [ "protobuf-codec" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "path-clean";
            packageId = "path-clean";
          }
          {
            name = "pretty_env_logger";
            packageId = "pretty_env_logger";
          }
          {
            name = "serde";
            packageId = "serde 1.0.99";
            features = [ "derive" ];
          }
          {
            name = "toml";
            packageId = "toml";
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        
      };
      "arcon_proto" = rec {
        crateName = "arcon_proto";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0v8icrwsg3hrqfjdsndjplc60brrclqg4pzfckh19hbk42wn5j23";
        authors = [
          "Max Meldrum <mmeldrum@kth.se>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "grpcio";
            packageId = "grpcio";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "protobuf-codec" ];
          }
          {
            name = "protobuf";
            packageId = "protobuf";
          }
        ];
        buildDependencies = [
          {
            name = "protoc-grpcio";
            packageId = "protoc-grpcio";
          }
          {
            name = "protoc-rust";
            packageId = "protoc-rust";
          }
        ];
        features = {
          "arconc" = [ "grpcio" "futures" ];
          "default" = [ "arconc" ];
        };
        resolvedDefaultFeatures = [ "arconc" "default" "futures" "grpcio" ];
      };
      "arcon_spec" = rec {
        crateName = "arcon_spec";
        version = "0.1.1";
        edition = "2018";
        sha256 = "00sx1c8hv7rckdxqhnpdw838j8b6z0zgk3z5h5dmzgay69krpnis";
        authors = [
          "Max Meldrum <mmeldrum@kth.se>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "serde";
            packageId = "serde 0.9.15";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive 0.9.15";
          }
          {
            name = "serde_json";
            packageId = "serde_json 0.9.10";
          }
        ];
        
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.5";
        edition = "2015";
        sha256 = "1vphy316jbgmgckk4z7m8csvlyc8hih9w95iyq48h8077xc2wf0d";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
        
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.4.11";
        edition = "2015";
        sha256 = "1fmhq4ljxr954mdyazaqa9kdxryl5d2ggr5rialylrd6xndkzmxq";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.13";
        edition = "2015";
        sha256 = "140sswp1bwqwc4zk80bxkbnfb3g936hgrb77g9g0k1zcld3wc0qq";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "0.1.6";
        edition = "2015";
        sha256 = "0x8q946yy321rlpxhqf3mkd965x8kbjs2jwcw55dsmxlf7xwhwdn";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.35";
        edition = "2018";
        sha256 = "0mfwbb6832rh1za304w8x37bvs9fjbybpmmz0iksqfzsaf108w8k";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.31";
        edition = "2015";
        sha256 = "0as2pk77br4br04daywhivpi1ixxb8y2c7f726kj849dxys31a42";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.10.1";
        edition = "2015";
        sha256 = "13k6bvd3n6dm7jqn9x918w65dd9xhx454bqphbnv0bkd6n9dj98b";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1zc1qb1hwsnl2d8rhzicsv9kqd5b2hwbrscrcfw5as4sfr35659x";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "0.5.7";
        edition = "2018";
        sha256 = "1684dlyqv3ifz3q75g0xs51qmc672q1w42hpzwh4wiidpf0mlxxz";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "boxfnonce" = rec {
        crateName = "boxfnonce";
        version = "0.1.1";
        edition = "2015";
        sha256 = "09ilf4zyx92hyhkxlsxksfyprzr9iwq5gqqb22aaqr32c8fwp22r";
        authors = [
          "Stefan Bühler <stbuehler@web.de>"
        ];
        
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1plsr948padkqi42m502r67m82n7iyzjmgjx3xn5ck79ny7ggkcl";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "unicode" ];
          "serde1" = [ "std" "serde1-nostd" "serde/std" ];
          "serde1-nostd" = [ "serde" ];
          "std" = [ "memchr/use_std" ];
          "unicode" = [ "lazy_static" "regex-automata" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bytecount" = rec {
        crateName = "bytecount";
        version = "0.5.1";
        edition = "2015";
        sha256 = "0z6a280kiy4kg5v3qw97pbyvwycr17fsm41804i8zpq7nmads3xy";
        authors = [
          "Andre Bogus <bogusandre@gmail.de>"
          "Joshua Landau <joshua@landau.ws>"
        ];
        features = {
          "generic-simd" = [ "packed_simd" ];
        };
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.2";
        edition = "2015";
        sha256 = "1xbwjlmq2ziqjmjvkqxdx1yh136xxhilxd40bky1w4d7hn4xvhx7";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "c2-chacha" = rec {
        crateName = "c2-chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00a11qdc8mg3z0k613rhprkc9p6xz0y7b1681x32ixg0hr3x0r3x";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            rename = "ppv-lite86";
          }
        ];
        features = {
          "default" = [ "std" "simd" "rustcrypto_api" ];
          "rustcrypto_api" = [ "stream-cipher" "byteorder" ];
          "simd" = [ "ppv-lite86/simd" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "lazy_static" "simd" "std" ];
      };
      "cargo_metadata" = rec {
        crateName = "cargo_metadata";
        version = "0.8.2";
        edition = "2015";
        sha256 = "09n4fp9hrg0z84y5q0q98rlinh0832zls3q0s0ip4dbxzlqkf2vh";
        authors = [
          "Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde 1.0.99";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive 1.0.99";
          }
          {
            name = "serde_json";
            packageId = "serde_json 1.0.40";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.40";
        edition = "2015";
        crateBin = [];
        sha256 = "19wx2frj1nvq654ra14gsyzkwsf7hgmcy8jfkn8rbjzwh7pa8j5m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "rayon" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0csygklgz3ybpr0670rkip49zh76m43ar3k7xgypkzbzrwycx1ml";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.7";
        edition = "2015";
        sha256 = "1glam3iqhshbamzgf0npn7hgghski92r31lm7gg8841hnxc1zn3p";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits 0.2.8";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
        ];
        features = {
          "clock" = [ "time" ];
          "default" = [ "clock" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "time" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "1nf6ld3bims1n5vfzhkvcb55pdzh04bbhzf8nil5vvw05nxzarsh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "cmake" = rec {
        crateName = "cmake";
        version = "0.1.41";
        edition = "2015";
        sha256 = "0a9j1fch0w97mh0qavm5i9njmv3p8qjz9qsq3xwdc9givjbcb11w";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.1.4";
        edition = "2015";
        sha256 = "083icpr9xb72rrdxw3p4068dcspn6ai22jy7rhl2a8grfz448nlr";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1ylyzb1m9qbvd1nd3vy38x9073wdmcy295ncjs7wf7ap476pzv68";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.6.6";
          }
        ];
        
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1wwwbnvxh0rza38xiws8qc46klzhv19zgvarn37pijis6v2zhfgp";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.2.2";
          }
        ];
        
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0l4igvp2i7b6dgaiq040j8kj8hygwdpr6ppzh1hrbsbx83sj2wcj";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.2.2";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "nightly" = [ "arrayvec/use_union" ];
          "use_std" = [ "lazy_static" "crossbeam-utils/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "use_std" ];
      };
      "crossbeam-utils 0.2.2" = rec {
        crateName = "crossbeam-utils";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1n8qr52sw9y6yxzyfxi1phh55rsxms7ry4iipdd8vmd16ag8jq17";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "crossbeam-utils 0.6.6" = rec {
        crateName = "crossbeam-utils";
        version = "0.6.6";
        edition = "2015";
        sha256 = "1rk0r9n04bmq4a3g2q5qhvvlmrmx780gc6h9lmc94mwndslkz5q4";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "nightly" "std" ];
      };
      "daemonize" = rec {
        crateName = "daemonize";
        version = "0.4.1";
        edition = "2015";
        sha256 = "05cqr2zjxrxyg23snykd03sgqwxn0pvwj2lzh50bclsgwc9lbhkh";
        authors = [
          "Fedor Gogolev <knsd@knsd.net>"
        ];
        dependencies = [
          {
            name = "boxfnonce";
            packageId = "boxfnonce";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "derive-new" = rec {
        crateName = "derive-new";
        version = "0.5.8";
        edition = "2015";
        sha256 = "1ncibp4jhpkym7namg3viqyw8hljd32n6abg64af8qjwrn91iwvi";
        procMacro = true;
        authors = [
          "Nick Cameron <ncameron@mozilla.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.1";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.3";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.11";
        edition = "2015";
        sha256 = "0fhavni46a2rib93ig5fgbqmm48ysms5sxzb3h9bp7vp2bwnjarw";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];
        
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "2.0.2";
        edition = "2015";
        sha256 = "1qymhyq7w7wlf1dirq6gsnabdyzg6yi2yyxkx6c4ldlkbjdaibhk";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];
        
      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.3.4";
        edition = "2015";
        sha256 = "0yyykdcmbc476z1v9m4z5jb8y91dw6kgzpkiqi2ig07xx0yv585g";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];
        
      };
      "dtoa" = rec {
        crateName = "dtoa";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0phbm7i0dpn44gzi07683zxaicjap5064w62pidci4fhhciv8mza";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.2";
        edition = "2015";
        sha256 = "0yyggfd5yq9hyyp0bd5jj0fgz3rwws42d19ri0znxwwqs3hcy9sm";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "ena" = rec {
        crateName = "ena";
        version = "0.13.0";
        edition = "2015";
        sha256 = "11wxfhfrywr7pwwqc5kfbfl1mjh2f4hsksrsbaaq98wcw1l1vh1x";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "congruence-closure" = [ "petgraph" ];
          "persistent" = [ "dogged" ];
        };
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1lx2s5nk96xx4i3m4zc4ghqgi8kb07dsnyiv8jk2clhax42dxz5a";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "error-chain" = rec {
        crateName = "error-chain";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1y1gyj9g5c3k1nzkvxrgry8v9k86kcc585mczrm3qz019s35shyr";
        authors = [
          "Brian Anderson <banderson@mozilla.com>"
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
          "Yamakaky <yamakaky@yamaworld.fr>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
        ];
        features = {
          "default" = [ "backtrace" "example_generated" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "example_generated" ];
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1qppmgv4i5jj6vrss91qackqnl0a12h7lnby4l7j5fdy78yxhnvr";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1q97n7dp51j5hndzic9ng2fgn6f3z5ya1992w84l7vypby8n647a";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "ferris-says" = rec {
        crateName = "ferris-says";
        version = "0.1.1";
        edition = "2015";
        crateBin = [];
        sha256 = "1z9j1fsyhf343g6anl29lvyrp4aqzbq6k9q0q8s7ihyxnhwi78h7";
        libName = "ferris_says";
        authors = [
          "Michael Gattozzi <mgattozzi@gmail.com>"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "error-chain";
            packageId = "error-chain";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.4.5";
          }
        ];
        features = {
        };
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "1ww56bi1r5b8id3ns9j3qxbi7w5h005rzhiryy0zi9h97raqbb9g";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.1.28";
        edition = "2015";
        sha256 = "0saq8ffjw1pwf1pzhw3kq1z7dfq6wpd8x93dnni6vbkc799kkp25";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "use_std" "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" "with-deprecated" ];
      };
      "getopts" = rec {
        crateName = "getopts";
        version = "0.2.21";
        edition = "2015";
        sha256 = "1mgb3qvivi26gs6ihqqhh8iyhp3vgxri6vwyrwg28w0xqzavznql";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "unicode-width/rustc-dep-of-std" "std" "core" ];
        };
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.10";
        edition = "2018";
        sha256 = "0zhid5pyvpy16zazlbfxn0gdrrbzif72dvmmq8kvxazvcg6acwb1";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" || (target."os" == "redox"));
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "globset" = rec {
        crateName = "globset";
        version = "0.4.4";
        edition = "2015";
        sha256 = "1wnqxq91liknmr2w93wjq2spyxbrd1pmnhd4nbi3921dr35a4nlj";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
          }
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "regex";
            packageId = "regex";
          }
        ];
        features = {
        };
      };
      "grpcio" = rec {
        crateName = "grpcio";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0vsbcqqcmk79ab7yi8wp9d6msscqg1fzff682hw9f5a6qk4v6by0";
        authors = [
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "grpcio-sys";
            packageId = "grpcio-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "protobuf";
            packageId = "protobuf";
            optional = true;
          }
        ];
        features = {
          "default" = [ "protobuf-codec" "secure" ];
          "openssl" = [ "secure" "grpcio-sys/openssl" ];
          "protobuf-codec" = [ "protobuf" ];
          "secure" = [ "grpcio-sys/secure" ];
        };
        resolvedDefaultFeatures = [ "protobuf" "protobuf-codec" ];
      };
      "grpcio-compiler" = rec {
        crateName = "grpcio-compiler";
        version = "0.4.3";
        edition = "2015";
        crateBin = [];
        sha256 = "1hvgk72qyaqlf0mahc5i9n22c1p0idavajqgfwsw5m4lz7q18fip";
        authors = [
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "protobuf";
            packageId = "protobuf";
          }
          {
            name = "protobuf-codegen";
            packageId = "protobuf-codegen";
          }
        ];
        
      };
      "grpcio-sys" = rec {
        crateName = "grpcio-sys";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0zkbavlh3llgpqk69azn6nv2qrbl5idzy6jxajrdrfbh39nkp3cx";
        authors = [
          "The TiKV Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "cmake";
            packageId = "cmake";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "openssl" = [ "secure" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.2.0";
        edition = "2015";
        sha256 = "057ilhy6vc9iqhhby5ymh45m051pgxwq2z437gwkbnqhw7rfb9rw";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        
      };
      "ignore" = rec {
        crateName = "ignore";
        version = "0.4.10";
        edition = "2015";
        sha256 = "19w4iwq1f01v1wd9s5afg06hcnycqgrp70pgm9qxa2c44lr6ih8f";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "globset";
            packageId = "globset";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "simd-accel" = [ "globset/simd-accel" ];
        };
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0mh3a57lwnz1ipiwph72xdbzh1rzp32qmk4yig011gs816gdimm4";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0n2k13b6w4x2x6np2lykh9bj3b3z4hwh2r4cn3z2dgnfq7cng12v";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "itoa 0.3.4" = rec {
        crateName = "itoa";
        version = "0.3.4";
        edition = "2015";
        sha256 = "136vwi6l2k1vrlvfx49lhficj813pk88xrcx1q3axqh1mwms6943";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "itoa 0.4.4" = rec {
        crateName = "itoa";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0zvg2d9qv3avhf3d8ggglh6fdyw8kkwqg3r4622ly5yhxnvnc4jh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.16";
        edition = "2015";
        sha256 = "042gvpfb558y75ykb8ma1sym1km3lb3qzr16z6dkk5dg7q2p6kpp";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.7.0";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.3.0";
        edition = "2015";
        sha256 = "052ac27w189hrf1j3hz7sga46rp84zl2hqnzyihxv78mgzr2jmxw";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.62";
        edition = "2015";
        sha256 = "1fh69kpjg8hqff36kdczx7sax98gk4qs4ws1dwvjz0rgip0d5z1l";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0b24q9mh258xa52ap636q1sxz0j5vrnp0hwbbh7ddjka3wwz3sv2";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "owning_ref";
            packageId = "owning_ref";
            optional = true;
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "nightly" "owning_ref" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.2.1";
        edition = "2015";
        sha256 = "13j6ji9x9ydpi9grbss106gqqr3xn3bcfp28aydqfa4751qrfmw8";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1cvm2z7dy138s302ii7wlzcxbka5a8yfl5pl5di7lbdnw9hw578g";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        
      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.13";
        edition = "2015";
        sha256 = "0if9ifn6rvar5jirx4b3qh4sl5kjkmcifycvzhxa9j3crkfng5ig";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.41";
        edition = "2015";
        sha256 = "02dwjjpfbi16c71fq689s4sw3ih52cvfzr5z5gs6qpr5z0g58pmq";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits 0.2.8";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "num-traits 0.1.43" = rec {
        crateName = "num-traits";
        version = "0.1.43";
        edition = "2015";
        sha256 = "0c9whknf2dm74a3cqirafy6gj83a76gl56g4v3g19k6lkwz13rcj";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits 0.2.8";
          }
        ];
        
      };
      "num-traits 0.2.8" = rec {
        crateName = "num-traits";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0clvrm34rrqc8p6gq5ps5fcgws3kgq5knh7nlqxf2ayarwks9abb";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.10.1";
        edition = "2015";
        sha256 = "0wrj3zvj6h3q26sqj9zxpd59frjb54n7jhjwf307clq31ic47vxw";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "owning_ref" = rec {
        crateName = "owning_ref";
        version = "0.4.0";
        edition = "2015";
        sha256 = "04zgwy77lin8qz398s6g44467pd6kjhbrlqifkia5rkr47mbi929";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
          }
        ];
        
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.7.1";
        edition = "2015";
        sha256 = "0dz32cqx9200n1lk3kwyb599vabfid3f8sj1aq85sw42s2pb8hdb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "default" = [ "owning_ref" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
        };
        resolvedDefaultFeatures = [ "default" "nightly" "owning_ref" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1jcq8aq4wv9y5fip7jg12jdwjd5g5r3x857xdma8vcin769cgj4l";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand";
            packageId = "rand 0.6.5";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.10";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
        resolvedDefaultFeatures = [ "nightly" ];
      };
      "path-clean" = rec {
        crateName = "path-clean";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1pcgqxw0mgg3ha5hi5xkjhyjf488bw5rw1g3qlr9awbq4szh3fpc";
        authors = [
          "Dan Reeves <hey@danreev.es>"
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.15";
        edition = "2015";
        sha256 = "1byjfivxlpbh549scss9kp893pzwfig93w14bwxxn557lp7x5hd7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.5";
        edition = "2018";
        sha256 = "06snnv338w341nicfqba2jgln5dsla72ndkgrw7h1dfdb3vgkjz3";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "default" "simd" "std" ];
      };
      "pretty_env_logger" = rec {
        crateName = "pretty_env_logger";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0x4hyjlnvvhyk9m74iypzybm22w3dl2k8img4b956239n5vf8zki";
        authors = [
          "Sean McArthur <sean@seanmonstar>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        
      };
      "proc-macro2 0.4.30" = rec {
        crateName = "proc-macro2";
        version = "0.4.30";
        edition = "2015";
        sha256 = "0nd71fl24sys066jrha6j7i34nfkjv44yzw8yww9742wmc8j0gfg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.1" = rec {
        crateName = "proc-macro2";
        version = "1.0.1";
        edition = "2018";
        sha256 = "00n8db56q9m6qfcla8ddxi6m9qvmjygbx63nwnm6z1w8ms026p2c";
        libName = "proc_macro2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "protobuf" = rec {
        crateName = "protobuf";
        version = "2.8.0";
        edition = "2015";
        sha256 = "199z1d86m9hzn9mbm8c6cpfqkgj3fy10f7f8izcj9da2y74wxvwa";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        features = {
          "with-bytes" = [ "bytes" ];
          "with-serde" = [ "serde" "serde_derive" ];
        };
      };
      "protobuf-codegen" = rec {
        crateName = "protobuf-codegen";
        version = "2.8.0";
        edition = "2015";
        crateBin = [];
        sha256 = "1qkmixjbmzz6mvdj1k5j4wp30m9mzbi78z1v3f79wswd0bl9nlri";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "protobuf";
            packageId = "protobuf";
          }
        ];
        
      };
      "protoc" = rec {
        crateName = "protoc";
        version = "2.8.0";
        edition = "2015";
        sha256 = "13f011li0fv2rklfrfb5n9rbvn1zp8gc2mcwh9wr60xlgsq3j3nn";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        
      };
      "protoc-grpcio" = rec {
        crateName = "protoc-grpcio";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1xiycsnd6gqz1w4il4fal6sp6q4222251cbq0xw1vdql8r9qnyd9";
        authors = [
          "Matt Pelland <matt@pelland.io>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "grpcio-compiler";
            packageId = "grpcio-compiler";
          }
          {
            name = "protobuf";
            packageId = "protobuf";
          }
          {
            name = "protobuf-codegen";
            packageId = "protobuf-codegen";
          }
          {
            name = "protoc";
            packageId = "protoc";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        
      };
      "protoc-rust" = rec {
        crateName = "protoc-rust";
        version = "2.8.0";
        edition = "2015";
        sha256 = "06zfhbhhmxd8q689c636yshgnzm2si09asrkyqn6lw2571aahj1d";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
        ];
        dependencies = [
          {
            name = "protobuf";
            packageId = "protobuf";
          }
          {
            name = "protobuf-codegen";
            packageId = "protobuf-codegen";
          }
          {
            name = "protoc";
            packageId = "protoc";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.2";
        edition = "2015";
        sha256 = "1w6kgwwv7p7zr0yyg5rb315lkk24bimywklwx7fsvsbwi10bjx4j";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        
      };
      "quote 0.3.15" = rec {
        crateName = "quote";
        version = "0.3.15";
        edition = "2015";
        sha256 = "0yhnnix4dzsv8y4wwz4csbnqjfh73al33j35msr10py6cl5r4vks";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "quote 0.6.13" = rec {
        crateName = "quote";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1qgqq48jymp5h4y082aanf25hrw6bpb678xh3zw993qfhxmkpqkc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.2" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.6.5" = rec {
        crateName = "rand";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1jl4449jcl4wgmzld6ffwqj5gwxrp8zvx8w573g1z368qg6xlwbd";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.1.1";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc 0.1.0";
          }
          {
            name = "rand_isaac";
            packageId = "rand_isaac";
          }
          {
            name = "rand_jitter";
            packageId = "rand_jitter";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
            optional = true;
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "simd_support" ];
          "serde1" = [ "rand_core/serde1" "rand_isaac/serde1" "rand_xorshift/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "alloc" "rand_os" "rand_jitter/std" ];
          "stdweb" = [ "rand_os/stdweb" ];
          "wasm-bindgen" = [ "rand_os/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "rand_os" "std" ];
      };
      "rand 0.7.0" = rec {
        crateName = "rand";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0b05gwx8nnxr9bydyjxd1rszdvqnm946ky15z103ssfrhc7anznl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.1";
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.0";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc 0.2.0";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc 0.2.0";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "alloc" "getrandom" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "std" ];
      };
      "rand_chacha 0.1.1" = rec {
        crateName = "rand_chacha";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1vxwyzs4fy1ffjc8l00fsyygpiss135irjf7nyxgq2v0lqf3lvam";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        
      };
      "rand_chacha 0.2.1" = rec {
        crateName = "rand_chacha";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0lv8imzzl4h2glm6sjj8mkvasgi8jym23ya48dakyln7m06sk8h3";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.0";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "c2-chacha/std" ];
        };
        resolvedDefaultFeatures = [ "default" "simd" "std" ];
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
      };
      "rand_core 0.4.2" = rec {
        crateName = "rand_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1p09ynysrq1vcdlmcqnapq4qakl2yd1ng3kxh3qscpx09k2a6cww";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rand_core 0.5.0" = rec {
        crateName = "rand_core";
        version = "0.5.0";
        edition = "2015";
        sha256 = "1jis94x9ri8xlxki2w2w5k29sjpfwgzkjylg7paganp74hrnhpk1";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc 0.1.0" = rec {
        crateName = "rand_hc";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1i0vl8q5ddvvy0x8hf1zxny393miyzxkwqnw31ifg6p0gdy6fh3v";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "rand_hc 0.2.0" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.0";
          }
        ];
        
      };
      "rand_isaac" = rec {
        crateName = "rand_isaac";
        version = "0.1.1";
        edition = "2015";
        sha256 = "027flpjr4znx2csxk7gxb7vrf9c7y5mydmvg5az2afgisp4rgnfy";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" "rand_core/serde1" ];
        };
      };
      "rand_jitter" = rec {
        crateName = "rand_jitter";
        version = "0.1.4";
        edition = "2015";
        sha256 = "16z387y46bfz3csc42zxbjq89vcr1axqacncvv8qhyy93p4xarhi";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "profileapi" ];
          }
        ];
        features = {
          "std" = [ "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_os" = rec {
        crateName = "rand_os";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0wahppm0s64gkr2vmhcgwc0lij37in1lgfxg5rbgqlz0l5vgcxbv";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
            features = [ "std" ];
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "winnt" ];
          }
        ];
        
      };
      "rand_pcg" = rec {
        crateName = "rand_pcg";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0i0bdla18a8x4jn1w0fxsbs3jg7ajllz6azmch1zw33r06dv1ydb";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
        };
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0p2x8nr00hricpi2m6ca5vysiha7ybnghz79yqhhx6sl4gkfkxyb";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
        };
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0vdn688q9wg997b1x5abx2gf7406rn1lvd62ypcgh1gj7g5dpkjf";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
          }
          {
            name = "rust-argon2";
            packageId = "rust-argon2";
          }
        ];
        
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.2.1";
        edition = "2015";
        sha256 = "09jww0faqvdprr9482ppxm1asbp6lhihr8zl9ma5sa4474cxkhw8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "unstable" = [ "pattern" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.11";
        edition = "2015";
        sha256 = "0grli4djafrkckh4ilvcw5z3wwqmasqzi3lqf5b6vrd55kmwqhxi";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0bkrlyg26mgizpiy1yb2hhpgscxcag8r5fnckqsvk25608vzm0sa";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];
        
      };
      "rust-argon2" = rec {
        crateName = "rust-argon2";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1krjkmyfn37hy7sfs6lqia0fsvw130nn1z2850glsjcva7pym92c";
        libName = "argon2";
        authors = [
          "Martijn Rijkeboer <mrr@sru-systems.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.6.6";
          }
        ];
        
      };
      "rustc-ap-arena" = rec {
        crateName = "rustc-ap-arena";
        version = "546.0.0";
        edition = "2018";
        sha256 = "1yc7j9dg6cb9yx16yfbi9h3misnrq3in6vps7da8q9k4igkf3hjd";
        libName = "arena";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rustc-ap-rustc_data_structures";
            packageId = "rustc-ap-rustc_data_structures";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.10";
            features = [ "union" "may_dangle" ];
          }
        ];
        
      };
      "rustc-ap-graphviz" = rec {
        crateName = "rustc-ap-graphviz";
        version = "546.0.0";
        edition = "2018";
        sha256 = "04f8g5ri916n1i5l4irdw195cfr7lvszzsj8n1vn9m0drr3xc261";
        libName = "graphviz";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "rustc-ap-rustc_data_structures" = rec {
        crateName = "rustc-ap-rustc_data_structures";
        version = "546.0.0";
        edition = "2018";
        sha256 = "10p5w2h13081k2w3727im887cs3mz6qviqw18j7cp0q79rs72rv5";
        libName = "rustc_data_structures";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.6.6";
            features = [ "nightly" ];
          }
          {
            name = "ena";
            packageId = "ena";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "jobserver";
            packageId = "jobserver";
            rename = "jobserver_crate";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            features = [ "nightly" ];
          }
          {
            name = "rustc-ap-graphviz";
            packageId = "rustc-ap-graphviz";
          }
          {
            name = "rustc-ap-serialize";
            packageId = "rustc-ap-serialize";
            rename = "rustc_serialize";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "rustc-rayon";
            packageId = "rustc-rayon";
            rename = "rayon";
          }
          {
            name = "rustc-rayon-core";
            packageId = "rustc-rayon-core";
            rename = "rayon-core";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.10";
            features = [ "union" "may_dangle" ];
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
          }
        ];
        
      };
      "rustc-ap-rustc_errors" = rec {
        crateName = "rustc-ap-rustc_errors";
        version = "546.0.0";
        edition = "2018";
        sha256 = "014nkkkcixmf32gsdfx8lbg2c2c8wqgbcs19mazrkisbcbv68w73";
        libName = "rustc_errors";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "annotate-snippets";
            packageId = "annotate-snippets";
          }
          {
            name = "atty";
            packageId = "atty";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustc-ap-rustc_data_structures";
            packageId = "rustc-ap-rustc_data_structures";
          }
          {
            name = "rustc-ap-serialize";
            packageId = "rustc-ap-serialize";
            rename = "rustc_serialize";
          }
          {
            name = "rustc-ap-syntax_pos";
            packageId = "rustc-ap-syntax_pos";
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "rustc-ap-rustc_lexer" = rec {
        crateName = "rustc-ap-rustc_lexer";
        version = "546.0.0";
        edition = "2018";
        sha256 = "1qqg7vjsp8433y16h6fp0lg4px372kpz0mx84gm3fdl2f6lw0nzg";
        libName = "rustc_lexer";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "rustc-ap-rustc_macros" = rec {
        crateName = "rustc-ap-rustc_macros";
        version = "546.0.0";
        edition = "2018";
        sha256 = "103ybf83z218b2sqkbikhp6dj45f9044vd4d8rgq7s3g6gikf05r";
        procMacro = true;
        libName = "rustc_macros";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "full" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        
      };
      "rustc-ap-rustc_target" = rec {
        crateName = "rustc-ap-rustc_target";
        version = "546.0.0";
        edition = "2018";
        sha256 = "0pd4fgg6m4pq4jf43q7dsq7ja7n8khpqfqqzlakv7shmffh9rpya";
        libName = "rustc_target";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustc-ap-rustc_data_structures";
            packageId = "rustc-ap-rustc_data_structures";
          }
          {
            name = "rustc-ap-serialize";
            packageId = "rustc-ap-serialize";
            rename = "rustc_serialize";
          }
          {
            name = "rustc-ap-syntax_pos";
            packageId = "rustc-ap-syntax_pos";
          }
        ];
        
      };
      "rustc-ap-serialize" = rec {
        crateName = "rustc-ap-serialize";
        version = "546.0.0";
        edition = "2018";
        sha256 = "00j69mif34l26lx2ac8v0w1585smiycd30ps7w1h37h8ya1kfrv1";
        libName = "serialize";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.10";
            features = [ "union" "may_dangle" ];
          }
        ];
        
      };
      "rustc-ap-syntax" = rec {
        crateName = "rustc-ap-syntax";
        version = "546.0.0";
        edition = "2018";
        sha256 = "112fxs77zxflsh11774wasmri8h9wdaqi9x40yf2dc6m8q9xvwr8";
        libName = "syntax";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustc-ap-rustc_data_structures";
            packageId = "rustc-ap-rustc_data_structures";
          }
          {
            name = "rustc-ap-rustc_errors";
            packageId = "rustc-ap-rustc_errors";
            rename = "errors";
          }
          {
            name = "rustc-ap-rustc_lexer";
            packageId = "rustc-ap-rustc_lexer";
          }
          {
            name = "rustc-ap-rustc_macros";
            packageId = "rustc-ap-rustc_macros";
          }
          {
            name = "rustc-ap-rustc_target";
            packageId = "rustc-ap-rustc_target";
          }
          {
            name = "rustc-ap-serialize";
            packageId = "rustc-ap-serialize";
            rename = "rustc_serialize";
          }
          {
            name = "rustc-ap-syntax_pos";
            packageId = "rustc-ap-syntax_pos";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.10";
            features = [ "union" "may_dangle" ];
          }
        ];
        
      };
      "rustc-ap-syntax_pos" = rec {
        crateName = "rustc-ap-syntax_pos";
        version = "546.0.0";
        edition = "2018";
        sha256 = "0yf9syf1fg6s954nls2jgxlyg19nsi3qj75rvb3s18xxdm97prj5";
        libName = "syntax_pos";
        libPath = "lib.rs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "rustc-ap-arena";
            packageId = "rustc-ap-arena";
          }
          {
            name = "rustc-ap-rustc_data_structures";
            packageId = "rustc-ap-rustc_data_structures";
          }
          {
            name = "rustc-ap-rustc_macros";
            packageId = "rustc-ap-rustc_macros";
          }
          {
            name = "rustc-ap-serialize";
            packageId = "rustc-ap-serialize";
            rename = "rustc_serialize";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1f4cnbcmz2c3zjidqszc9c4fip37ch4xl74nkkp9dw291j5zqh3m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "rustc-rayon" = rec {
        crateName = "rustc-rayon";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0qrk5c3f8rpa2hapg1g64z5p1fkj45iw4lyrm9cirwh1jvhhfbhd";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-rayon-core";
            packageId = "rustc-rayon-core";
          }
        ];
        
      };
      "rustc-rayon-core" = rec {
        crateName = "rustc-rayon-core";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0hr5l0ks5vmc6d22gghcrzxb0rvznaj4wlyq16gsaby2rfkqrlvr";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        
      };
      "rustc-workspace-hack" = rec {
        crateName = "rustc-workspace-hack";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1yx8l58n2vb2ldpi3z1jn4dmi5hnxvikbhpd5lilpdvkl7xd4wgw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "rustfmt-config_proc_macro" = rec {
        crateName = "rustfmt-config_proc_macro";
        version = "0.1.2";
        edition = "2018";
        sha256 = "16hv6g1qkv3ca8515wfhddv5pkln737ppfvf0k98hiny3dyq1bps";
        procMacro = true;
        authors = [
          "topecongiro <seuchida@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "rustfmt-nightly" = rec {
        crateName = "rustfmt-nightly";
        version = "1.4.5";
        edition = "2018";
        crateBin = [];
        sha256 = "1119pqyz51cambzng8fz3wijicxdmj4fj15x98pi9svmhx3ikn36";
        authors = [
          "Nicholas Cameron <ncameron@mozilla.com>"
          "The Rustfmt developers"
        ];
        dependencies = [
          {
            name = "annotate-snippets";
            packageId = "annotate-snippets";
            features = [ "ansi_term" ];
          }
          {
            name = "atty";
            packageId = "atty";
          }
          {
            name = "bytecount";
            packageId = "bytecount";
          }
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata";
          }
          {
            name = "derive-new";
            packageId = "derive-new";
          }
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "getopts";
            packageId = "getopts";
          }
          {
            name = "ignore";
            packageId = "ignore";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rustc-ap-rustc_target";
            packageId = "rustc-ap-rustc_target";
          }
          {
            name = "rustc-ap-syntax";
            packageId = "rustc-ap-syntax";
          }
          {
            name = "rustc-ap-syntax_pos";
            packageId = "rustc-ap-syntax_pos";
          }
          {
            name = "rustc-workspace-hack";
            packageId = "rustc-workspace-hack";
          }
          {
            name = "rustfmt-config_proc_macro";
            packageId = "rustfmt-config_proc_macro";
          }
          {
            name = "serde";
            packageId = "serde 1.0.99";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json 1.0.40";
          }
          {
            name = "structopt";
            packageId = "structopt";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "toml";
            packageId = "toml";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "unicode_categories";
            packageId = "unicode_categories";
          }
        ];
        features = {
          "default" = [ "cargo-fmt" "rustfmt-format-diff" ];
          "generic-simd" = [ "bytecount/generic-simd" ];
        };
        resolvedDefaultFeatures = [ "cargo-fmt" "default" "rustfmt-format-diff" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.0";
        edition = "2015";
        sha256 = "15r9z2wzgbj04pks4jz7y6wif5xqhf1wqkl2nd7qrvn08ys68969";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.5";
        edition = "2015";
        sha256 = "08a4zy10pjindf2rah320s6shgswk13mqw7s61m8i1y1xpf8spjq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1hj8lifzvivdb1z02lfnzkshpvk85nkgzxsy2hc0zky9wf894spa";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "0.3.3";
        edition = "2015";
        sha256 = "09sy9wbqp409pkwmqni40qmwa99ldqpl48pp95m1xw8sc19qy9cl";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
          {
            name = "serde";
            packageId = "serde 1.0.99";
            optional = true;
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "serde 0.9.15" = rec {
        crateName = "serde";
        version = "0.9.15";
        edition = "2015";
        sha256 = "1bsla8l5xr9pp5sirkal6mngxcq6q961km88jvf339j5ff8j7dil";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
        ];
        features = {
          "alloc" = [ "unstable" ];
          "collections" = [ "alloc" ];
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "playground" = [ "serde_derive" ];
          "unstable-testing" = [ "unstable" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde 1.0.99" = rec {
        crateName = "serde";
        version = "1.0.99";
        edition = "2015";
        sha256 = "17ysh94r1443sf4ixhb0mf5m5rkmxr9wm28vlb4hs0bdnlg8bhpy";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive 1.0.99";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive 1.0.99";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_codegen_internals" = rec {
        crateName = "serde_codegen_internals";
        version = "0.14.2";
        edition = "2015";
        sha256 = "0004s3wlc85vi6hq62hq84cv5b6qbbin1n6hdaqj095xhg98p25w";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
        ];
        dependencies = [
          {
            name = "syn";
            packageId = "syn 0.11.11";
            usesDefaultFeatures = false;
            features = [ "parsing" ];
          }
        ];
        
      };
      "serde_derive 0.9.15" = rec {
        crateName = "serde_derive";
        version = "0.9.15";
        edition = "2015";
        sha256 = "1fkldf0lnl6pwxs00qpyp79m30qmfpi3bk0wm22211ylyikdi3wp";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 0.3.15";
          }
          {
            name = "serde_codegen_internals";
            packageId = "serde_codegen_internals";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 0.11.11";
            features = [ "visit" ];
          }
        ];
        features = {
        };
      };
      "serde_derive 1.0.99" = rec {
        crateName = "serde_derive";
        version = "1.0.99";
        edition = "2015";
        sha256 = "09dll6gd5fnma52mgf71w4vl6br3l3x9hv11k3f0hsr0c66c2kfb";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.1";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.3";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json 0.9.10" = rec {
        crateName = "serde_json";
        version = "0.9.10";
        edition = "2015";
        sha256 = "188nbf56m7p6mnh3xd71rwqxd4g95lqh8gsl7mfy3lp7gd4cz2xd";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
        ];
        dependencies = [
          {
            name = "dtoa";
            packageId = "dtoa";
          }
          {
            name = "itoa";
            packageId = "itoa 0.3.4";
          }
          {
            name = "num-traits";
            packageId = "num-traits 0.1.43";
          }
          {
            name = "serde";
            packageId = "serde 0.9.15";
          }
        ];
        features = {
          "preserve_order" = [ "linked-hash-map" ];
        };
      };
      "serde_json 1.0.40" = rec {
        crateName = "serde_json";
        version = "1.0.40";
        edition = "2015";
        sha256 = "010pa89zx07aqx1cwgw2a603wcp3q5n2iy0k71ppqbr8kwi4j705";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa 0.4.4";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde 1.0.99";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "smallvec 0.4.5" = rec {
        crateName = "smallvec";
        version = "0.4.5";
        edition = "2015";
        sha256 = "047g7arsfik4p4k2pib08sfz6d9r68fn3z4lmc3qir1mwmgmw37r";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
          "heapsizeof" = [ "heapsize" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec 0.6.10" = rec {
        crateName = "smallvec";
        version = "0.6.10";
        edition = "2015";
        sha256 = "1dyl43rgzny79jjpgzi07y0ly2ggx1xwsn64csxj0j91bsf6lq5b";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "may_dangle" "std" "union" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.1.1";
        edition = "2015";
        sha256 = "1j2lkgakksmz4vc5hfawcch2ipiskrhjs1sih0f3br7s7rys58fv";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "structopt" = rec {
        crateName = "structopt";
        version = "0.2.18";
        edition = "2015";
        sha256 = "1mvfv1l8vp3y402fkl2wcl34hi7gmr4bqha13dfz2xf3kjzwvhhn";
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
          "others"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            usesDefaultFeatures = false;
          }
          {
            name = "structopt-derive";
            packageId = "structopt-derive";
          }
        ];
        features = {
          "color" = [ "clap/color" ];
          "debug" = [ "clap/debug" ];
          "default" = [ "clap/default" ];
          "doc" = [ "clap/doc" ];
          "lints" = [ "clap/lints" ];
          "nightly" = [ "structopt-derive/nightly" ];
          "no_cargo" = [ "clap/no_cargo" ];
          "paw" = [ "structopt-derive/paw" ];
          "suggestions" = [ "clap/suggestions" ];
          "wrap_help" = [ "clap/wrap_help" ];
          "yaml" = [ "clap/yaml" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "structopt-derive" = rec {
        crateName = "structopt-derive";
        version = "0.2.18";
        edition = "2015";
        sha256 = "01sis9z5kqmyhvzbnmlzpdxcry99a0b9blypksgnhdsbm1hh40ak";
        procMacro = true;
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
        ];
        features = {
          "nightly" = [ "proc-macro2/nightly" ];
        };
      };
      "syn 0.11.11" = rec {
        crateName = "syn";
        version = "0.11.11";
        edition = "2015";
        sha256 = "1b8x8jdsmj6r9ck7n1pg371526n1q90kx6rv6ivcb22w06wr3f6k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 0.3.15";
            optional = true;
          }
          {
            name = "synom";
            packageId = "synom";
            optional = true;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.0.4";
            optional = true;
          }
        ];
        features = {
          "default" = [ "parsing" "printing" ];
          "parsing" = [ "unicode-xid" "synom" ];
          "printing" = [ "quote" ];
        };
        resolvedDefaultFeatures = [ "default" "parsing" "printing" "quote" "synom" "unicode-xid" "visit" ];
      };
      "syn 0.15.44" = rec {
        crateName = "syn";
        version = "0.15.44";
        edition = "2015";
        sha256 = "1id5g6x6zihv3j7hwrw3m1jp636bg8dpi671r7zy3jvpkavb794w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 1.0.3" = rec {
        crateName = "syn";
        version = "1.0.3";
        edition = "2018";
        sha256 = "14wv8b7svm3njdh0f7hv9arqr8sag60c22ipzkff7rs4ypk2318m";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.1";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synom" = rec {
        crateName = "synom";
        version = "0.11.3";
        edition = "2015";
        sha256 = "1dj536sh5xxhan2h0znxhv0sl6sb7lvzmsmrc3nvl3h1v5p0d4x3";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.0.4";
          }
        ];
        
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0grirdkgh2wl4hf9a3nbiazpgccxgq54kn52ms0xrr6njvgkwd82";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
        };
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1a9cfdqw70n7bcnkx05aih9xdba8lqazmqlkjpkmn2la6gcj8vks";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand";
            packageId = "rand 0.7.0";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        
      };
      "term" = rec {
        crateName = "term";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1ddqxq9hrk8zqq1f8pqhz72vrlfc8vh2xcza2gb623z78lrkm1n0";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "wincon" "handleapi" "fileapi" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.0.5";
        edition = "2015";
        sha256 = "0vjfsn1a8zvqhnrbygrz1id6yckwv1dncw3w4zj65qdx0f00kmln";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "wincolor";
            packageId = "wincolor";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "06rzik99p8c5js8238yhc8rk6np543ylb1dy9nrw5v80j0r3xdf6";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0vsbvsz0ryxb35dy9j4anxvy8zlaplmjmi0a4z4l64bc135cz3fv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.3";
        edition = "2018";
        sha256 = "093p48vpqm4bb8q3514xsij0dkljxlr3jp9ypxr4p48xjisvxan7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde 1.0.99";
          }
        ];
        features = {
          "preserve_order" = [ "linked-hash-map" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1a9jqg7rb1yq6w2xc9jgxcs111yk5vxm9afjfvykfnrmzk6z8rqr";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.6";
        edition = "2015";
        sha256 = "082f9hv1r3gcd1xl33whjhrm18p0w9i77zhhhkiccb5r47adn1vh";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.0.4" = rec {
        crateName = "unicode-xid";
        version = "0.0.4";
        edition = "2015";
        sha256 = "1p5l9h3n3i53cp95fb65p8q3vbwib79ryd9z5z5h5kr9gl6qc7wc";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.0" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode_categories" = rec {
        crateName = "unicode_categories";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0kp1d7fryxxm7hqywbk88yb9d1avsam9sg76xh36k5qx2arj9v1r";
        authors = [
          "Sean Gillespie <sean@swgillespie.me>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "06n8hw4hlbcz328a3gbpvmy0ma46vg1lc0r5wf55900szf3qdiq5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.2.9";
        edition = "2015";
        sha256 = "07ppalpvxkf8cnqr64np422792y4z5bs9m8b4nrflh5rm17wjn4n";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1ir3pd4phdfml0cbziw9bqp7mnk0vfp9biy8bh25lln6raml4m7x";
        authors = [
          "The Cranelift Project Developers"
        ];
        
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.7";
        edition = "2015";
        sha256 = "0w7pbhcl087lkggxdflfp2i92rq89ahsfdkjkv44fgmiy9m3h3pi";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "knownfolders" "minwinbase" "minwindef" "ntdef" "ntsecapi" "ntstatus" "objbase" "processenv" "profileapi" "shlobj" "std" "sysinfoapi" "timezoneapi" "winbase" "wincon" "winerror" "winnt" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1j839dc6y8vszvrsb7yk0qvs0w6asnahxzbyans37vnsw6vbls3i";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "wincolor" = rec {
        crateName = "wincolor";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1agaf3hcav113i86912ajnw6jxcy4rvkrgyf8gdj8kc031mh3xcn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "minwindef" "wincon" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
