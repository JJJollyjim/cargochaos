
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/pix-image-viewer/v0.2.6.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "pix-image-viewer";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "pix-image-viewer" = rec {
      packageId = "pix-image-viewer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pix-image-viewer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "adler32" = rec {
        crateName = "adler32";
        version = "1.0.3";
        edition = "2015";
        sha256 = "0p7fxlnks9l7p7rwfqi7aqgnk2bps5zc0rjiw00mdw19nnbjjlky";
        authors = [
          "Remi Rampin <remirampin@gmail.com>"
        ];
        
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.3";
        edition = "2015";
        sha256 = "0k1nqabiz37mnfnlrn084qi9yf8pj6a38qgbb3lc5zlr1jp89x76";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "andrew" = rec {
        crateName = "andrew";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0pmklwcwy8g1jras46fz8xcny779zfqpg4riksrbdhkjk3w0jzwv";
        authors = [
          "Lucas Timmins <timmins.s.lucas@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "line_drawing";
            packageId = "line_drawing";
          }
          {
            name = "rusttype";
            packageId = "rusttype";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "xdg";
            packageId = "xdg";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        
      };
      "android_glue" = rec {
        crateName = "android_glue";
        version = "0.2.3";
        edition = "2015";
        sha256 = "01y495x4i9vqkwmklwn2xk7sqg666az2axjcpkr4iwngdwi48100";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "approx" = rec {
        crateName = "approx";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1hx580xjdxl3766js9b49rnbnmr8gw8c060809l43k9f0xshprph";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "argon2rs" = rec {
        crateName = "argon2rs";
        version = "0.2.5";
        edition = "2015";
        sha256 = "14mkgkrjd4b4zy92pflz6yb4j1wn2chbd8jczxknxbkdm2vb0rrz";
        authors = [
          "bryant <bryant@defrag.in>"
        ];
        dependencies = [
          {
            name = "blake2-rfc";
            packageId = "blake2-rfc";
          }
          {
            name = "scoped_threadpool";
            packageId = "scoped_threadpool";
          }
        ];
        features = {
          "simd" = [ "blake2-rfc/simd_asm" ];
        };
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.4.10";
        edition = "2015";
        sha256 = "0wcch3ca9qvkixgdbd2afrv1xa27l83vpraf7frsh9l8pivgpiwj";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.11";
        edition = "2015";
        sha256 = "0lln6vaczj521qqjbaqnb81w5p6xk4fjfkg33r0m22cm4f3mnzcs";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "termion";
            packageId = "termion";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1chwgimpx5z7xbag7krr9d8asxfqbh683qhgl9kn3hxk2l0djj8x";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.15";
        edition = "2015";
        sha256 = "0ds6lvdhsfhn3kvhin7kp9yr2mabni3wqdjxvz0cvbq46qmc01pi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
            target = { target, features }: (target."unix" && (!(target."os" == "fuchsia")) && (!(target."os" == "emscripten")) && (!(target."os" == "macos")) && (!(target."os" == "ios")));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" || (target."env" == "sgx"));
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "dbghelp" "processthreadsapi" "winnt" "minwindef" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "coresymbolication" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "gimli" "memmap" "object" ];
          "libbacktrace" = [ "backtrace-sys" "std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "coresymbolication" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.28";
        edition = "2015";
        sha256 = "1dk9sx6sbm73aihlln8l2m9ia1s4vqmqdfd7z2kr5k2wq8586z3r";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.2.0";
        edition = "2015";
        sha256 = "14jzj61c145s9jwr1i213b7mdcmv1ny4z1lns9s8gvp34j9n7axq";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Daniel Griffen"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
      };
      "bindgen" = rec {
        crateName = "bindgen";
        version = "0.49.2";
        edition = "2015";
        crateBin = [];
        sha256 = "1mnbdk2anyk23if5r0sxbhpa3ykm087v3xky900jldimcnx1ysl4";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "runtime" "clang_6_0" ];
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "env_logger";
            packageId = "env_logger 0.6.1";
            optional = true;
          }
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "peeking_take_while";
            packageId = "peeking_take_while";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.29";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.12";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "which";
            packageId = "which";
          }
        ];
        devDependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "default" = [ "logging" ];
          "logging" = [ "env_logger" "log" ];
        };
        resolvedDefaultFeatures = [ "default" "env_logger" "log" "logging" ];
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.0.4";
        edition = "2015";
        sha256 = "04nfhscc9mxwhmai5xgwh4q458rjszmwsvkpf752g1j6dyklg012";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "blake2-rfc" = rec {
        crateName = "blake2-rfc";
        version = "0.2.18";
        edition = "2015";
        sha256 = "0034g47hyq2bzmk40895ill1mbnpmmjakdq3dmm9clidvl5m6vax";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];
        
      };
      "boolinator" = rec {
        crateName = "boolinator";
        version = "2.4.0";
        edition = "2015";
        sha256 = "1nccxzb1dfkjfrgzqaw1a90p26zlvv6nah5ckcpj6bn9a4zqga6g";
        authors = [
          "Daniel Keep <daniel.keep@gmail.com>"
        ];
        
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.1";
        edition = "2015";
        sha256 = "1syvclxqjwf6qfq98y3fiy82msjp7q8wh7qkvf9b5pkw585b26d0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.36";
        edition = "2015";
        crateBin = [];
        sha256 = "03f9n36ls3lkdm0s2whd56ig59484mxk65j5kkn0xf3v90b65id0";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
        ];
        features = {
          "parallel" = [ "rayon" ];
        };
        resolvedDefaultFeatures = [ "parallel" "rayon" ];
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.3.5";
        edition = "2015";
        sha256 = "1by64ini3f058pwad3immx5cc12wr0m0kwgaxa8apzym03mj9ym7";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            features = [ "verbose-errors" ];
          }
        ];
        
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1x6i0lyf5minisrd20m5ng17pvbl8cp39rjwnkpjx1vf75ak7m0i";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "cgl" = rec {
        crateName = "cgl";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0j8ayr8pbwvyv6l8r7m5z197rs3pqn97085w9j4rfn7yfh5yrrsm";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "gleam";
            packageId = "gleam";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "0.28.1";
        edition = "2015";
        sha256 = "0ls8zcqi5bmmrvrk3b6r1ym4wlivinbv590d2dvg2xn9f44mbpl1";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_3_6" = [ "gte_clang_3_6" ];
          "clang_3_7" = [ "gte_clang_3_6" "gte_clang_3_7" ];
          "clang_3_8" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" ];
          "clang_3_9" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" ];
          "clang_4_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" ];
          "clang_5_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" ];
          "clang_6_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" ];
          "clang_7_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" "gte_clang_7_0" ];
          "clang_8_0" = [ "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" "gte_clang_7_0" "gte_clang_8_0" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_6_0" "gte_clang_3_6" "gte_clang_3_7" "gte_clang_3_8" "gte_clang_3_9" "gte_clang_4_0" "gte_clang_5_0" "gte_clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "1nf6ld3bims1n5vfzhkvcb55pdzh04bbhzf8nil5vvw05nxzarsh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "cocoa" = rec {
        crateName = "cocoa";
        version = "0.18.4";
        edition = "2015";
        sha256 = "0yyprmkqy16s329m4wcn2jsyczdq04val1jkwl3fyp8yw6jdlyfg";type = [ "rlib" ];
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
        
      };
      "color_quant" = rec {
        crateName = "color_quant";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1ga56jrafnjm80903nnqjkyii4bwd6a7visxh0g8hgi6cmrvbfqd";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.1.3";
        edition = "2015";
        sha256 = "17janp8n9dd6kjbbgqiayrh9fw81v4cq9rz04926s5nf4pi15w4g";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.6.4";
        edition = "2015";
        sha256 = "0va97wf49c8dzm9c8pgyk1jn7z21rl0bj1syf2zz5m2z2hzy1f95";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.6.2";
        edition = "2015";
        sha256 = "0fzsw1j9g1x598yhwklg59l15hwzc0pyvs01w9fg2kin4598mjp7";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.17.3";
        edition = "2015";
        sha256 = "1acm3vygngnilzlr6klym5ywh7kfzh2xxrh2l41152hwmdl0jyan";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1c9dhkvf3brrzzplcijaywxi2w8wv5578i0ryhcm7x8dmzi5s4ms";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.4.0";
        edition = "2015";
        sha256 = "135ncx9680afs8jkjz8g3iq3naay9rn7942gxrdg2n9m1cxrmv5c";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.0";
          }
        ];
        
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1wwwbnvxh0rza38xiws8qc46klzhv19zgvarn37pijis6v2zhfgp";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.2.2";
          }
        ];
        
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0l4igvp2i7b6dgaiq040j8kj8hygwdpr6ppzh1hrbsbx83sj2wcj";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.2.2";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
          {
            name = "scopeguard";
            packageId = "scopeguard 0.3.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "nightly" = [ "arrayvec/use_union" ];
          "use_std" = [ "lazy_static" "crossbeam-utils/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "use_std" ];
      };
      "crossbeam-utils 0.2.2" = rec {
        crateName = "crossbeam-utils";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1n8qr52sw9y6yxzyfxi1phh55rsxms7ry4iipdd8vmd16ag8jq17";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "crossbeam-utils 0.7.0" = rec {
        crateName = "crossbeam-utils";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1x1rn35q2v05qif14ijfg7800d3rf3ji2cg79awnacfw5jq6si6f";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "deflate" = rec {
        crateName = "deflate";
        version = "0.7.19";
        edition = "2015";
        sha256 = "11pcam84siqfhika4g87d8wc4mr8z2ljlrkqbjdl33bfw4kbnsla";
        authors = [
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        features = {
          "gzip" = [ "gzip-header" ];
        };
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "1.0.2";
        edition = "2015";
        sha256 = "164q0yqpgk1p2bp83ls1bipwh8zxrsvy6qzbpbmdvgdydmkyjwv0";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.29";
          }
          {
            name = "quote";
            packageId = "quote 0.6.12";
          }
          {
            name = "syn";
            packageId = "syn 0.15.33";
            features = [ "full" "visit" "extra-traits" ];
          }
        ];
        features = {
          "test-nightly" = [ "compiletest_rs" ];
        };
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "2.0.2";
        edition = "2015";
        sha256 = "1qymhyq7w7wlf1dirq6gsnabdyzg6yi2yyxkx6c4ldlkbjdaibhk";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];
        
      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.3.4";
        edition = "2015";
        sha256 = "0yyykdcmbc476z1v9m4z5jb8y91dw6kgzpkiqi2ig07xx0yv585g";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];
        
      };
      "dlib" = rec {
        crateName = "dlib";
        version = "0.4.1";
        edition = "2015";
        sha256 = "0smp2cdvy12xfw26qyqms273w5anszfadv73g75s88yqm54i5rbp";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "dlopen" ];
      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.0.4";
        edition = "2015";
        sha256 = "03q2pqjk1wik3agbwgsypah7qziqbpwp41bmpw62cx9gbkyjvfgj";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
        ];
        
      };
      "draw_state" = rec {
        crateName = "draw_state";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0lfng4fz9x7bwsmzv9r20ply10w0iid6vfcrhx292s6hw8vrbkrk";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
        
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.2";
        edition = "2015";
        sha256 = "0yyggfd5yq9hyyp0bd5jj0fgz3rwws42d19ri0znxwwqs3hcy9sm";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "env_logger 0.6.1" = rec {
        crateName = "env_logger";
        version = "0.6.1";
        edition = "2015";
        sha256 = "0nh7ja7kikq551x16k1zgcn61xgsiip590cm1aimv52a0a8sh7xn";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "env_logger 0.7.1" = rec {
        crateName = "env_logger";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0djx8h8xfib43g5w94r1m1mkky5spcw4wblzgnhiyg5vnfxknls4";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.6";
        edition = "2015";
        sha256 = "1nay5c2cgi40kp84rbiir1dgwlh9aap9jazbnxfmqrkpr49ky9zq";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.6";
        edition = "2015";
        sha256 = "022xfb9wcs1bdssfm2airsrfxpn2ccpbyh1ld2wf9483isvjbhhb";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.7";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "1ww56bi1r5b8id3ns9j3qxbi7w5h005rzhiryy0zi9h97raqbb9g";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        
      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.1";
        edition = "2018";
        sha256 = "11srrbc0hp7pgz142qjfx2z07kfhc98rbfwqyrgm4mxvxib61wdn";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" "futures-channel/cfg-target-has-atomic" "futures-util/cfg-target-has-atomic" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "read-initializer" = [ "futures-io/read-initializer" "futures-util/read-initializer" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "default" "executor" "futures-executor" "std" "thread-pool" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.1";
        edition = "2018";
        sha256 = "11lvk749n61654ad40xn751gmxzwb697nwh36s5gs0ni2z59ibpw";
        libName = "futures_channel";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" ];
          "default" = [ "std" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
          "unstable" = [ "futures-core/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "futures-sink" "sink" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0rh8q6pg08dizk5hwksvjgvkw26s3sr3b199nggv3ypyg914qmkr";
        libName = "futures_core";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0cf24wbgxqh4kdjbb557vk1axzmbpmwb8s05ga1nls1zaqv4f9qy";
        libName = "futures_executor";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "num_cpus" "std" "thread-pool" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.1";
        edition = "2018";
        sha256 = "1zxm41fmkrb0r39ajk3rr9invcd5bdwlafazn8m9aw4y49ymfxp6";
        libName = "futures_io";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0r3px32wgqfbmfyb1lrj9wplvjris5magdyhfr7xnyjk2mncbrsj";
        procMacro = true;
        libName = "futures_macro";
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.7";
            features = [ "full" ];
          }
        ];
        
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.1";
        edition = "2018";
        sha256 = "05iwskzxq3yqvxv9l1kqnd7kkmp0dwc39fnvwrcjsg76z8zf66qp";
        libName = "futures_sink";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.1";
        edition = "2018";
        sha256 = "1yg5d7b3z58mhqbrax5a0qdsfvzfclwyqvw5k3i41x4wnbb55bhb";
        libName = "futures_task";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0xlyqdn6lnpkw27lwxczihx91h64gbdd31n8c8y5v63nzds65mn0";
        libName = "futures_util";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" "proc-macro-hack" "proc-macro-nested" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "read-initializer" = [ "io" "futures-io/read-initializer" "futures-io/unstable" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "channel" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "proc-macro-hack" "proc-macro-nested" "sink" "slab" "std" ];
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "gfx" = rec {
        crateName = "gfx";
        version = "0.18.2";
        edition = "2015";
        sha256 = "0nqmxqi3x4ni0g78g77a6aldrv8cfvzhnpqhxyd2ap4aa3wldph1";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "draw_state";
            packageId = "draw_state";
          }
          {
            name = "gfx_core";
            packageId = "gfx_core";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "serialize" = [ "gfx_core/serialize" "draw_state/serde" ];
        };
      };
      "gfx_core" = rec {
        crateName = "gfx_core";
        version = "0.9.2";
        edition = "2015";
        sha256 = "0haldr99n12d90vqgvl77n59hywlklhdff85j2aljaz1yapdvyvm";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "draw_state";
            packageId = "draw_state";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "serialize" = [ "serde" "draw_state/serde" ];
        };
      };
      "gfx_device_gl" = rec {
        crateName = "gfx_device_gl";
        version = "0.16.2";
        edition = "2015";
        sha256 = "1g5yg19jvxdmviljyakhd6253bnb2qg7v8iscf48ihc0ldgki70h";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "gfx_core";
            packageId = "gfx_core";
          }
          {
            name = "gfx_gl";
            packageId = "gfx_gl";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        
      };
      "gfx_gl" = rec {
        crateName = "gfx_gl";
        version = "0.6.0";
        edition = "2015";
        sha256 = "06c3dhr5iqlp72kw2ma5f3rw2px80xprfdli9yq28r4sj26qh9c5";
        authors = [
          "The Gfx-rs Developers"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        
      };
      "gif" = rec {
        crateName = "gif";
        version = "0.10.1";
        edition = "2015";
        sha256 = "0gwh2v2g54ygw7p4lwgildgz3wc64gbcq9rmrqh3j88zmiawljyx";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "color_quant";
            packageId = "color_quant";
          }
          {
            name = "lzw";
            packageId = "lzw";
          }
        ];
        features = {
          "c_api" = [ "libc" ];
          "default" = [ "raii_no_panic" ];
        };
        resolvedDefaultFeatures = [ "default" "raii_no_panic" ];
      };
      "gl" = rec {
        crateName = "gl";
        version = "0.11.0";
        edition = "2015";
        sha256 = "1wcqpyhck0xriffkmgmldy33lwk2044hb4l02d44vm4fbvicin6p";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.10.0";
          }
        ];
        
      };
      "gl_generator 0.10.0" = rec {
        crateName = "gl_generator";
        version = "0.10.0";
        edition = "2015";
        sha256 = "0146yd4i9wbgfrhnkc04w7n7civbanznc0q87skp6v7p7hbszzx0";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "gl_generator 0.11.0" = rec {
        crateName = "gl_generator";
        version = "0.11.0";
        edition = "2015";
        sha256 = "1gdchvay0k0g931b2ki33mkfixcw4radk5b8sqsm29rahxg3v8ir";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "gleam" = rec {
        crateName = "gleam";
        version = "0.6.16";
        edition = "2015";
        sha256 = "1mbm9yqxbs5nrnnsizsbjlyzbh0v9903iby0gixipq85j14nkfrr";
        authors = [
          "The Servo Project Developers"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0x25wfr7vg3mzxc9x05dcphvd3nwlcmbnxrvwcvrrdwplcrrk4cv";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "glutin" = rec {
        crateName = "glutin";
        version = "0.21.1";
        edition = "2018";
        sha256 = "0jcr3fg5wmq32db4jjvrs9867d61z6ivwcv12qsibzmvn6ifg34k";
        authors = [
          "The glutin contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "android_glue";
            packageId = "android_glue";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "cgl";
            packageId = "cgl";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "derivative";
            packageId = "derivative";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "glutin_emscripten_sys";
            packageId = "glutin_emscripten_sys";
            target = { target, features }: (target."os" == "emscripten");
          }
          {
            name = "glutin_gles2_sys";
            packageId = "glutin_gles2_sys";
            target = { target, features }: ((target."os" == "ios") || (target."os" == "macos"));
          }
          {
            name = "glutin_glx_sys";
            packageId = "glutin_glx_sys";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "glutin_wgl_sys";
            packageId = "glutin_wgl_sys";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libloading";
            packageId = "libloading";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "libloading";
            packageId = "libloading";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: ((target."os" == "ios") || (target."os" == "macos"));
          }
          {
            name = "osmesa-sys";
            packageId = "osmesa-sys";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
            features = [ "egl" "dlopen" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "winnt" "winuser" "wingdi" "libloaderapi" ];
          }
          {
            name = "winit";
            packageId = "winit";
          }
        ];
        features = {
          "icon_loading" = [ "winit/icon_loading" ];
          "serde" = [ "winit/serde" ];
        };
      };
      "glutin_egl_sys" = rec {
        crateName = "glutin_egl_sys";
        version = "0.1.3";
        edition = "2018";
        sha256 = "09nk7nknjsw2svzqrxmggc53h37xl9a9xd83v4dbdckcmf3qkx13";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "winnt" "winuser" "wingdi" "libloaderapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        
      };
      "glutin_emscripten_sys" = rec {
        crateName = "glutin_emscripten_sys";
        version = "0.1.0";
        edition = "2018";
        sha256 = "1ix0jmm8p5if4qarzdfl5mz9rbq4hhgqarakb3bzwvyz13dkynr4";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        
      };
      "glutin_gles2_sys" = rec {
        crateName = "glutin_gles2_sys";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1pswvl5zyqmqwzjr674yzslj0al2xbqsp2ai9ggb9qbshlq6r6c9";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        dependencies = [
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "ios");
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        
      };
      "glutin_glx_sys" = rec {
        crateName = "glutin_glx_sys";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0mxs3mil68xqqb49466n5rpwpcllj6fwqjgrcrzzmz26bv5ab40j";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        dependencies = [
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        
      };
      "glutin_wgl_sys" = rec {
        crateName = "glutin_wgl_sys";
        version = "0.1.3";
        edition = "2018";
        sha256 = "08chlfzpj59q36qm212i4k879gvjzha7i90q90fds8pw3v4vn0gq";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.3";
        edition = "2015";
        sha256 = "087ibb7v4dxhx1h66jjffk4zrjlhy3n4fr0x9d9y6f3zjfgkqz1h";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "histogram" = rec {
        crateName = "histogram";
        version = "0.6.9";
        edition = "2015";
        sha256 = "0s9660nyacb5dgb5qxzgbf6lxrki1fmmgcalwm38c2r9rcn8ijqj";
        authors = [
          "Brian Martin <brayniac@gmail.com>"
        ];
        
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0krwgbf35pd46xvkqg14j070vircsndabahahlv3rwhflpy4q06z";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        
      };
      "image" = rec {
        crateName = "image";
        version = "0.22.3";
        edition = "2015";
        sha256 = "09kqym26z03j31rfzr9zd8i8y2d0apxmm4mf8bf4axdyxymfhjvv";
        authors = [
          "ccgn"
          "bvssvni <bvssvni@gmail.com>"
          "nwin"
          "TyOverby <ty@pre-alpha.com>"
          "HeroicKatora"
          "Calum"
          "CensoredUsername <cens.username@gmail.com>"
          "fintelia <fintelia@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "gif";
            packageId = "gif";
            optional = true;
          }
          {
            name = "jpeg-decoder";
            packageId = "jpeg-decoder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "png";
            packageId = "png";
            optional = true;
          }
          {
            name = "scoped_threadpool";
            packageId = "scoped_threadpool";
            optional = true;
          }
          {
            name = "tiff";
            packageId = "tiff";
            optional = true;
          }
        ];
        features = {
          "default" = [ "gif_codec" "jpeg" "ico" "png_codec" "pnm" "tga" "tiff" "webp" "bmp" "hdr" "dxt" "jpeg_rayon" ];
          "gif_codec" = [ "gif" ];
          "hdr" = [ "scoped_threadpool" ];
          "ico" = [ "bmp" "png_codec" ];
          "jpeg" = [ "jpeg-decoder" ];
          "jpeg_rayon" = [ "jpeg-decoder/rayon" ];
          "png_codec" = [ "png" ];
        };
        resolvedDefaultFeatures = [ "bmp" "default" "dxt" "gif" "gif_codec" "hdr" "ico" "jpeg" "jpeg-decoder" "jpeg_rayon" "png" "png_codec" "pnm" "scoped_threadpool" "tga" "tiff" "webp" ];
      };
      "inflate" = rec {
        crateName = "inflate";
        version = "0.4.5";
        edition = "2015";
        sha256 = "1zxjdn8iwa0ssxrnjmywm3r1v284wryvzrf8vkc7nyf5ijbjknqw";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "interpolation" = rec {
        crateName = "interpolation";
        version = "0.2.0";
        edition = "2015";
        sha256 = "00icvvgc72zdgyrwwg2p0wad4hry4d2vd6l9iqpyjpmw5dykbdyk";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
          "Coeuvre <coeuvre@gmail.com>"
          "leonkunert <info@leonkunert.de>"
          "gmorenz"
          "Potpourri"
          "TyOverby <ty@pre-alpha.com>"
          "zummenix"
        ];
        
      };
      "jpeg-decoder" = rec {
        crateName = "jpeg-decoder";
        version = "0.1.15";
        edition = "2015";
        sha256 = "038i40nrpln9433dpgdr94h7fvhrv95ificlxaa3yjxk0qrd9dy8";
        authors = [
          "Ulf Nilsson <kaksmet@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
        ];
        features = {
          "default" = [ "rayon" ];
        };
        resolvedDefaultFeatures = [ "rayon" ];
      };
      "khronos_api" = rec {
        crateName = "khronos_api";
        version = "3.1.0";
        edition = "2015";
        sha256 = "1p0xj5mlbagqyvvnv8wmv3cr7l9y1m153888pxqwg3vk3mg5inz2";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.65";
        edition = "2015";
        sha256 = "1s14bjxnz6haw0gr1h3j4sr7s2s407hpgm8dxhwnl7yzgxia0c8s";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.5.0";
        edition = "2015";
        sha256 = "1hl8bgw54qc9ffg1fykkj9km5wgin2bhilc3rli5i36bsxhdcflw";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "winerror" "errhandlingapi" "libloaderapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "librocksdb-sys" = rec {
        crateName = "librocksdb-sys";
        version = "6.1.3";
        edition = "2015";
        sha256 = "1i909gyzng0ah1zam0sjh47x3myqfwgjz24kp1fhw0xmw3vhrsy4";
        authors = [
          "Karl Hobley <karlhobley10@gmail.com>"
          "Arkadiy Paronyan <arkadiy@ethcore.io>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen";
          }
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "default" = [ "static" ];
        };
        resolvedDefaultFeatures = [ "bzip2" "default" "lz4" "snappy" "static" "zlib" "zstd" ];
      };
      "line_drawing" = rec {
        crateName = "line_drawing";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1fcna7hq1g1kkkqy07hydscx5d2zgb6gskz3vnsvsif8h8ysvisw";
        authors = [
          "Expenses <expenses@airmail.cc>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.3.1";
        edition = "2018";
        sha256 = "1p04271jikw69ja0ap0plrfwm9incf1iny48g0b3ma9k4mw2x4gq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard 1.0.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lzw" = rec {
        crateName = "lzw";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1170dfskhzlh8h2bm333811hykjvpypgnvxyhhm1rllyi2xpr53x";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        features = {
          "default" = [ "raii_no_panic" ];
        };
        resolvedDefaultFeatures = [ "default" "raii_no_panic" ];
      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.2.1";
        edition = "2015";
        sha256 = "13j6ji9x9ydpi9grbss106gqqr3xn3bcfp28aydqfa4751qrfmw8";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "memmap" = rec {
        crateName = "memmap";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0ns7kkd1h4pijdkwfvw4qlbbmqmlmzwlq3g2676dcl5vwyazv1b5";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "basetsd" "handleapi" "memoryapi" "minwindef" "std" "sysinfoapi" ];
          }
        ];
        
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1cvm2z7dy138s302ii7wlzcxbka5a8yfl5pl5di7lbdnw9hw578g";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.13.0";
        edition = "2015";
        sha256 = "0arhg1vs8h2jprlmwzqlwz5xlwpidbp71v3rzbl9dmv80whz7w26";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (target."os" == "dragonfly");
          }
        ];
        
      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.13";
        edition = "2015";
        sha256 = "0if9ifn6rvar5jirx4b3qh4sl5kjkmcifycvzhxa9j3crkfng5ig";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
      "nom" = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "1mkvby8b4m61p4g1px0pwr58yfkphyp1jcfbp4qfp7l6iqdaklia";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "verbose-errors" ];
      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.2.5";
        edition = "2015";
        sha256 = "1wnv7776fh4i40r3zfxcxcmm0dh029skx7gp4sjknz2kqm2hpzga";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.29";
          }
          {
            name = "quote";
            packageId = "quote 0.6.12";
          }
          {
            name = "syn";
            packageId = "syn 0.15.33";
          }
        ];
        features = {
          "full-syntax" = [ "syn/full" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.39";
        edition = "2015";
        sha256 = "1shc9hfykcywgd86h2w6939d436gpmx2pbqbay653w3p4s6m4gg8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.37";
        edition = "2015";
        sha256 = "09115d12q1bcgig3ivnnbs8vz9kwqc78c0vvqm6ld9ci6aydngxg";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.2.1";
        edition = "2015";
        sha256 = "041gn9kjfpbsjw48dcdzzczazmdmahzwy7jv5cjdmcvv2x0g15jf";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bigint-std" = [ "bigint" "num-bigint/std" ];
          "default" = [ "bigint-std" "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1qdym9m6sbzna1pq3s21cbjgyjakyjds33xwp7c30vbxr5y5sfhb";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.11.0";
        edition = "2015";
        sha256 = "1x8sjhsn7zwih6q6hx6ajfjv89nj6awvy9fs960z1pfd4kwr8lqm";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "numtoa" = rec {
        crateName = "numtoa";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1vs9rhggqbql1p26x8nkha1j06wawwgb2jp5fs88b5gi7prvvy5q";
        authors = [
          "Michael Aaron Murphy <mmstickman@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.6";
        edition = "2015";
        sha256 = "03ar7qxhailxgb0zi5lszv7fhwl6b1xkas5y4m8wy1vyng90zlii";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
        };
      };
      "ordered-float" = rec {
        crateName = "ordered-float";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0625x96987kspdxbikry5mb7hsf5pdc5bbanxd8wjwqlx0ar71hq";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Matt Brubeck <mbrubeck@limpet.net>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "osmesa-sys" = rec {
        crateName = "osmesa-sys";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0fq1q1zcgfb0qydrg9r2738jlwc4hqxgb9vj11z72bjxx7kfrkw8";
        libName = "osmesa_sys";
        libPath = "lib.rs";
        authors = [
          "Daggerbot <daggerbot@gmail.com>"
        ];
        dependencies = [
          {
            name = "shared_library";
            packageId = "shared_library";
          }
        ];
        
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0lk2vq3hp88ygpgsrypdr3ss71fidnqbykva0csgxhmn5scb2hpq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0ay67dpnrn68ryyvp720m9i8hzp189fd4d6slrs1lvmcwywv2xmq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "peeking_take_while" = rec {
        crateName = "peeking_take_while";
        version = "0.1.2";
        edition = "2015";
        sha256 = "16bhqr6rdyrp12zv381cxaaqqd0pwysvm1q8h2ygihvypvfprc8r";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0-alpha.4";
        edition = "2018";
        sha256 = "11xmyx00n4m37d546by2rxb8ryxs12v55cc172i3yak1rqccd52q";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
        
      };
      "piston" = rec {
        crateName = "piston";
        version = "0.49.0";
        edition = "2015";
        sha256 = "1y0rbw92mzagqmwk79wv9axq0m7aid0s0d5cppyzh33wrxhdl3xj";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
          "Coeuvre <coeuvre@gmail.com>"
          "gmorenz"
          "leonkunert <info@leonkunert.de>"
          "mitchmindtree <me@michellnordine.com>"
          "Christiandh"
          "Apointos"
          "ccgn"
          "reem"
          "TyOverby <ty@pre-alpha.com>"
          "eddyb"
          "Phlosioneer <mattmdrr2@gmail.com"
        ];
        dependencies = [
          {
            name = "pistoncore-event_loop";
            packageId = "pistoncore-event_loop";
          }
          {
            name = "pistoncore-input";
            packageId = "pistoncore-input";
          }
          {
            name = "pistoncore-window";
            packageId = "pistoncore-window";
          }
        ];
        
      };
      "piston-float" = rec {
        crateName = "piston-float";
        version = "1.0.0";
        edition = "2015";
        sha256 = "0r35aasycms79hf2vf1ap40kkp8ywgl4hmfkf762dq8jwd3vw07r";
        libName = "float";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        
      };
      "piston-gfx_texture" = rec {
        crateName = "piston-gfx_texture";
        version = "0.40.0";
        edition = "2015";
        sha256 = "1nr5awdgk3njfvfanszrv4gxz93f6skid1c8yijswccygripchqz";
        libName = "gfx_texture";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
          "Coeuvre <coeuvre@gmail.com>"
          "gmorenz"
          "leonkunert <info@leonkunert.de>"
          "mitchmindtree <me@michellnordine.com>"
          "Christiandh"
          "Apointos"
          "ccgn"
          "reem"
          "TyOverby <ty@pre-alpha.com>"
          "eddyb"
        ];
        dependencies = [
          {
            name = "gfx";
            packageId = "gfx";
          }
          {
            name = "gfx_core";
            packageId = "gfx_core";
          }
          {
            name = "image";
            packageId = "image";
          }
          {
            name = "piston-texture";
            packageId = "piston-texture";
          }
        ];
        
      };
      "piston-graphics_api_version" = rec {
        crateName = "piston-graphics_api_version";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1b5p6s45jqv057lpbxkiq3yrdjjhvcynmi2vjf8292rf0yh4hky5";
        libName = "graphics_api_version";
        authors = [
          "Sven Nilsen <bvssvni@gmail.com>"
        ];
        
      };
      "piston-shaders_graphics2d" = rec {
        crateName = "piston-shaders_graphics2d";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1dhh9bv4q19gdnj9d1nqq0yrvzs6gcn0c5j1p1f3xzyzq7d1gg4p";
        libName = "shaders_graphics2d";
        libPath = "lib.rs";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        
      };
      "piston-texture" = rec {
        crateName = "piston-texture";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1pcv5my49b8xzqcb87wqh2ndgvr4s9ipys96s0h9j2plxrj3bjb2";
        libName = "texture";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        
      };
      "piston-viewport" = rec {
        crateName = "piston-viewport";
        version = "1.0.0";
        edition = "2015";
        sha256 = "16378hcy41b7x3zj2z4har0wq6fl4r62kf9p106jjl8hg2dv3aq1";
        libName = "viewport";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "piston-float";
            packageId = "piston-float";
          }
        ];
        
      };
      "piston2d-gfx_graphics" = rec {
        crateName = "piston2d-gfx_graphics";
        version = "0.66.0";
        edition = "2015";
        sha256 = "1pmlkf5rl6pr0c1lqm0059xwj9pwlws7gaq9w6r9d916di6fzki1";
        libName = "gfx_graphics";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "draw_state";
            packageId = "draw_state";
          }
          {
            name = "gfx";
            packageId = "gfx";
          }
          {
            name = "piston-gfx_texture";
            packageId = "piston-gfx_texture";
          }
          {
            name = "piston-shaders_graphics2d";
            packageId = "piston-shaders_graphics2d";
          }
          {
            name = "piston2d-graphics";
            packageId = "piston2d-graphics";
            features = [ "glyph_cache_rusttype" ];
          }
          {
            name = "shader_version";
            packageId = "shader_version";
          }
        ];
        
      };
      "piston2d-graphics" = rec {
        crateName = "piston2d-graphics";
        version = "0.35.0";
        edition = "2015";
        sha256 = "1dx2fanxc2pj76hc5l72x0fh4qg9gchjlr8rmbhdk6jpggcmq56g";
        libName = "graphics";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
          "Coeuvre <coeuvre@gmail.com>"
          "leonkunert <info@leonkunert.de>"
          "gmorenz"
          "Potpourri"
          "TyOverby <ty@pre-alpha.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
            optional = true;
          }
          {
            name = "interpolation";
            packageId = "interpolation";
          }
          {
            name = "piston-texture";
            packageId = "piston-texture";
          }
          {
            name = "piston-viewport";
            packageId = "piston-viewport";
          }
          {
            name = "read_color";
            packageId = "read_color";
          }
          {
            name = "rusttype";
            packageId = "rusttype";
            optional = true;
          }
          {
            name = "vecmath";
            packageId = "vecmath";
          }
        ];
        features = {
          "glyph_cache_rusttype" = [ "rusttype" "fnv" ];
        };
        resolvedDefaultFeatures = [ "default" "fnv" "glyph_cache_rusttype" "rusttype" ];
      };
      "piston_window" = rec {
        crateName = "piston_window";
        version = "0.105.0";
        edition = "2015";
        sha256 = "05n2905gkp5ck25kbq95ia6pj1xz63dpp247jz3xcw1d41xpvi95";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "gfx";
            packageId = "gfx";
          }
          {
            name = "gfx_device_gl";
            packageId = "gfx_device_gl";
          }
          {
            name = "piston";
            packageId = "piston";
          }
          {
            name = "piston-texture";
            packageId = "piston-texture";
          }
          {
            name = "piston2d-gfx_graphics";
            packageId = "piston2d-gfx_graphics";
          }
          {
            name = "piston2d-graphics";
            packageId = "piston2d-graphics";
          }
          {
            name = "pistoncore-glutin_window";
            packageId = "pistoncore-glutin_window";
            optional = true;
          }
          {
            name = "shader_version";
            packageId = "shader_version";
          }
        ];
        features = {
          "default" = [ "glutin" ];
          "glutin" = [ "pistoncore-glutin_window" ];
        };
        resolvedDefaultFeatures = [ "default" "glutin" "pistoncore-glutin_window" ];
      };
      "pistoncore-event_loop" = rec {
        crateName = "pistoncore-event_loop";
        version = "0.49.0";
        edition = "2015";
        sha256 = "1h9ij9vx42xg39198yxdlpk842pli5jqm2kwswiv3bqqcji0fwsm";
        libName = "event_loop";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
          "Coeuvre <coeuvre@gmail.com>"
          "gmorenz"
          "bfops"
        ];
        dependencies = [
          {
            name = "pistoncore-input";
            packageId = "pistoncore-input";
          }
          {
            name = "pistoncore-window";
            packageId = "pistoncore-window";
          }
        ];
        
      };
      "pistoncore-glutin_window" = rec {
        crateName = "pistoncore-glutin_window";
        version = "0.63.0";
        edition = "2015";
        sha256 = "0dhbyxarv5i742d400bmqdqq3f8c25kcgcg0xavrc18dc913rixc";
        libName = "glutin_window";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "gl";
            packageId = "gl";
          }
          {
            name = "glutin";
            packageId = "glutin";
          }
          {
            name = "pistoncore-input";
            packageId = "pistoncore-input";
          }
          {
            name = "pistoncore-window";
            packageId = "pistoncore-window";
          }
          {
            name = "shader_version";
            packageId = "shader_version";
          }
        ];
        
      };
      "pistoncore-input" = rec {
        crateName = "pistoncore-input";
        version = "0.28.0";
        edition = "2015";
        sha256 = "1rrcz9px098m3nx98gvrvzirfdp3vg03cblfkcrp4wnvswc0hwq5";
        libName = "input";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "piston-viewport";
            packageId = "piston-viewport";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        
      };
      "pistoncore-window" = rec {
        crateName = "pistoncore-window";
        version = "0.44.0";
        edition = "2015";
        sha256 = "18qy3nnpb9jczvkiyzzznamck0pzgiyi6073jrkldnci6b3in10q";
        libName = "window";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
          "Coeuvre <coeuvre@gmail.com>"
          "Phlosioneer <mattmdrr2@gmail.com>"
        ];
        dependencies = [
          {
            name = "piston-graphics_api_version";
            packageId = "piston-graphics_api_version";
          }
          {
            name = "pistoncore-input";
            packageId = "pistoncore-input";
          }
        ];
        
      };
      "pix-image-viewer" = rec {
        crateName = "pix-image-viewer";
        version = "0.2.6";
        edition = "2018";
        crateBin = [
          { name = "pix"; path = "src/main.rs"; }
        ];
        src = pkgs.callPackage ./tarball-v0.2.6.nix {};
        authors = [
          "Mason Larobina <masonl@google.com>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "boolinator";
            packageId = "boolinator";
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "env_logger";
            packageId = "env_logger 0.7.1";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "thread-pool" ];
          }
          {
            name = "histogram";
            packageId = "histogram";
          }
          {
            name = "image";
            packageId = "image";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "piston";
            packageId = "piston";
          }
          {
            name = "piston_window";
            packageId = "piston_window";
          }
          {
            name = "resize";
            packageId = "resize";
          }
          {
            name = "rocksdb";
            packageId = "rocksdb";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "vecmath";
            packageId = "vecmath";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.14";
        edition = "2015";
        sha256 = "135ia995lqzr0gxpk85h0bjxf82kj6hbxdx924sh9jdln6r8wvk7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "png" = rec {
        crateName = "png";
        version = "0.15.0";
        edition = "2018";
        sha256 = "00j64vq8y701i426mx5a95pj6qp23hb9xxmfp6bxs4y0n9xv48l4";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "deflate";
            packageId = "deflate";
            optional = true;
          }
          {
            name = "inflate";
            packageId = "inflate";
          }
        ];
        features = {
          "default" = [ "png-encoding" ];
          "png-encoding" = [ "deflate" ];
        };
        resolvedDefaultFeatures = [ "default" "deflate" "png-encoding" ];
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.11";
        edition = "2018";
        sha256 = "1idz5vmnjjhvr51yvwyjb45mza18wa53fr05m1skqvbdyw15gm7c";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.7";
          }
        ];
        
      };
      "proc-macro-nested" = rec {
        crateName = "proc-macro-nested";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0bmlksm8vl44wkwihmwr7jsjznhbg0n7aibcw1cs2jgjcp86x6in";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "proc-macro2 0.4.29" = rec {
        crateName = "proc-macro2";
        version = "0.4.29";
        edition = "2015";
        sha256 = "05jkjvzh12x70l327yp2xkb7lq8ig96y1rck8p731ax7lz72gj34";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.6" = rec {
        crateName = "proc-macro2";
        version = "1.0.6";
        edition = "2018";
        sha256 = "09rgb5ab0jgw39kyad0lgqs4nb9yaf7mwcrgxqnsxbn4il54g7lw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.2";
        edition = "2015";
        sha256 = "1w6kgwwv7p7zr0yyg5rb315lkk24bimywklwx7fsvsbwi10bjx4j";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        
      };
      "quote 0.6.12" = rec {
        crateName = "quote";
        version = "0.6.12";
        edition = "2015";
        sha256 = "1nw0klza45hf127kfyrpxsxd5jw2l6h21qxalil3hkr7bnf7kx7s";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.29";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.2" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.0";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
      };
      "rand_core 0.4.0" = rec {
        crateName = "rand_core";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1h3dbrhi5qgflqnzzd86s48v1dn1l17bmdssi5q170whsm4sbryh";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rand_os" = rec {
        crateName = "rand_os";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0wahppm0s64gkr2vmhcgwc0lij37in1lgfxg5rbgqlz0l5vgcxbv";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.0";
            features = [ "std" ];
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "winnt" ];
          }
        ];
        
      };
      "raw-window-handle" = rec {
        crateName = "raw-window-handle";
        version = "0.3.1";
        edition = "2018";
        sha256 = "1wf184jwfnlbybmdd6yhbcavdgzl1bg4dvrxzgj7r17dsc40vf4x";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.0.3";
        edition = "2015";
        sha256 = "0wq41f15y05nlarijn9c1vxscxj5sazn3lhd6mmnicj5fzr18f1p";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.4.1";
        edition = "2015";
        sha256 = "0mkkabm3h4xvrkvjp675c07zcpcb7jk09rlg9mbpfs5s5blx2mdh";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "read_color" = rec {
        crateName = "read_color";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1np0pk31ak7hni4hri3m75mbf8py1wdfjshmrj5krbd4p9c8hk4z";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.54";
        edition = "2015";
        sha256 = "0lp22pjvmj33a2fa7y1h9cgxmnfd8whbb8s6n0f4yp7nl0a9q8hj";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "redox_termios" = rec {
        crateName = "redox_termios";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0xhgvdh62mymgdl3jqrngl8hr4i8xwpnbsxnldq0l47993z1r2by";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
          }
        ];
        
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0a1q5jv76vj1mwmqf2mmhknmkpw5wndx91gjfgg7vs8p79621r9z";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "argon2rs";
            packageId = "argon2rs";
            usesDefaultFeatures = false;
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
          }
        ];
        
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.1.6";
        edition = "2015";
        sha256 = "0n0csrjlyjl1i98zhlkk5v7bkppd8dpsx7psaiy1szgxnb50n2lg";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "utf8-ranges";
            packageId = "utf8-ranges";
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "unstable" = [ "pattern" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.6";
        edition = "2015";
        sha256 = "15ha1mlyp77h49lbkmqsclvj21df9afqd644v60pnadyxs0qdzfw";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "ucd-util";
            packageId = "ucd-util";
          }
        ];
        
      };
      "resize" = rec {
        crateName = "resize";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1f4zg009n4xb1pq046wdax0ijr0rx3s9cbci27n1krqrqa46gl8f";
        authors = [
          "Kagami Hiiragi <kagami@genshiken.org>"
        ];
        
      };
      "rocksdb" = rec {
        crateName = "rocksdb";
        version = "0.12.4";
        edition = "2015";
        sha256 = "1y5scp8f0rqjxj8d3cm6p20hkpmgpn33phvc1pcnziq6wsgywnyn";
        authors = [
          "Tyler Neely <t@jujit.su>"
          "David Greenberg <dsg123456789@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "librocksdb-sys";
            packageId = "librocksdb-sys";
          }
        ];
        features = {
          "bzip2" = [ "librocksdb-sys/bzip2" ];
          "default" = [ "snappy" "lz4" "zstd" "zlib" "bzip2" ];
          "lz4" = [ "librocksdb-sys/lz4" ];
          "snappy" = [ "librocksdb-sys/snappy" ];
          "zlib" = [ "librocksdb-sys/zlib" ];
          "zstd" = [ "librocksdb-sys/zstd" ];
        };
        resolvedDefaultFeatures = [ "bzip2" "default" "lz4" "snappy" "zlib" "zstd" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.14";
        edition = "2015";
        sha256 = "123jlmvra36pk9rw5pm8mxpjv9dibjg8kkzzkklg6yydbbyqpiyc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "rusttype" = rec {
        crateName = "rusttype";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0jnw3jixs9zl1cwqk9a6fk85nni4ja9mab7pd44rcir6pf2ix595";
        authors = [
          "Dylan Ede <dylanede@googlemail.com>"
          "Jeremy Soller <jackpot51@gmail.com>"
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "ordered-float";
            packageId = "ordered-float";
          }
          {
            name = "stb_truetype";
            packageId = "stb_truetype";
          }
        ];
        features = {
          "bench" = [ "gpu_cache" ];
          "gpu_cache" = [ "linked-hash-map" "rustc-hash" "crossbeam-deque" "crossbeam-utils" "num_cpus" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.4";
        edition = "2015";
        sha256 = "0rsjk8zjppgc083jyx89hxi39xnjf12x2aqv3x6gz8d8afzc884g";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "scoped_threadpool" = rec {
        crateName = "scoped_threadpool";
        version = "0.1.9";
        edition = "2015";
        sha256 = "1a26d3lk40s9mrf4imhbik7caahmw2jryhhb6vqv6fplbbgzal8x";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
        };
      };
      "scopeguard 0.3.3" = rec {
        crateName = "scopeguard";
        version = "0.3.3";
        edition = "2015";
        sha256 = "09sy9wbqp409pkwmqni40qmwa99ldqpl48pp95m1xw8sc19qy9cl";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "scopeguard 1.0.0" = rec {
        crateName = "scopeguard";
        version = "1.0.0";
        edition = "2015";
        sha256 = "03aay84r1f6w87ckbpj6cc4rnsxkxcfs13n5ynxjia0qkgjiabml";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.102";
        edition = "2015";
        sha256 = "1q0v1cd6810iia6m28i33nh4cyp0wdcjqy9s0627c20bkfykjjqc";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.102";
        edition = "2015";
        sha256 = "1y1b1bx786xd65fq73w98i2g9wx9mfrzn8w948i36y9ghcdgq4ya";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.7";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "shader_version" = rec {
        crateName = "shader_version";
        version = "0.6.0";
        edition = "2015";
        sha256 = "1yk651xc9irl3pl0rlplypzyzy44d0j03ji0j7hjjdjknwzpi3j7";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "piston-graphics_api_version";
            packageId = "piston-graphics_api_version";
          }
        ];
        
      };
      "shared_library" = rec {
        crateName = "shared_library";
        version = "0.1.9";
        edition = "2015";
        sha256 = "04fs37kdak051hm524a360978g58ayrcarjsbf54vqps5c7px7js";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1lmv6san7g8dv6jdfp14m7bdczq9ss7j7bgsfqyqjc3jnjfippvz";
        authors = [
          "comex <comexk@gmail.com>"
        ];
        
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "0.6.9";
        edition = "2015";
        sha256 = "1gh2j3546vxvz60zw0sj98sxmyj8ixv5f8lq64vl17f4a3lqlj64";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smithay-client-toolkit" = rec {
        crateName = "smithay-client-toolkit";
        version = "0.4.5";
        edition = "2015";
        sha256 = "12x2qskwq87z9l9mx4a0jycwynl3k58964rknn4mb9k2hdarjj5a";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "andrew";
            packageId = "andrew";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "memmap";
            packageId = "memmap";
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            features = [ "cursor" ];
          }
          {
            name = "wayland-commons";
            packageId = "wayland-commons";
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
            features = [ "native_client" "unstable_protocols" ];
          }
        ];
        devDependencies = [
          {
            name = "wayland-client";
            packageId = "wayland-client";
            features = [ "dlopen" ];
          }
        ];
        
      };
      "stb_truetype" = rec {
        crateName = "stb_truetype";
        version = "0.2.6";
        edition = "2018";
        sha256 = "1fk8ar6wn7vnxfcqvg8lhbh47dg544s6kr4bzxa1vs5qbm8dzdv9";
        authors = [
          "Dylan Ede <dylanede@googlemail.com>"
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "syn 0.15.33" = rec {
        crateName = "syn";
        version = "0.15.33";
        edition = "2015";
        sha256 = "0dkq625qmlv6a7ap3yhk016cqjh8f0p3k995f83d00azdrwwslpc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.29";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.12";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 1.0.7" = rec {
        crateName = "syn";
        version = "1.0.7";
        edition = "2018";
        sha256 = "0k34zdvdcqcynwfqi8zdlcvd7mr8i8y742sbb4sk03qd6arysyqf";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.1";
        edition = "2018";
        sha256 = "00x28sjln2w7vfmnh5m98d7wzbm49q2cz20jr90h834kamc5l21z";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.7";
            features = [ "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.0.4";
        edition = "2015";
        sha256 = "0bvzdmna2qjgdj6yasjyczic30fwhr8bvkgxya4j4qhj0vbsv5j0";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "wincolor";
            packageId = "wincolor";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "termion" = rec {
        crateName = "termion";
        version = "1.5.2";
        edition = "2015";
        sha256 = "1sldaj4kv62nv1281nf02b5yrd8m00skjarrlp7aqiwdxcx5kq6x";
        authors = [
          "ticki <Ticki@users.noreply.github.com>"
          "gycos <alexandre.bury@gmail.com>"
          "IGI-111 <igi-111@protonmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."os" == "redox"));
          }
          {
            name = "numtoa";
            packageId = "numtoa";
            features = [ "std" ];
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "redox_termios";
            packageId = "redox_termios";
            target = { target, features }: (target."os" == "redox");
          }
        ];
        
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "06rzik99p8c5js8238yhc8rk6np543ylb1dy9nrw5v80j0r3xdf6";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "tiff" = rec {
        crateName = "tiff";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0zgmbny2f8rssqmjdfvnysy0vqwcvlwl6q9f5yixhavlqk7w5dyp";
        authors = [
          "ccgn"
          "bvssvni <bvssvni@gmail.com>"
          "nwin"
          "TyOverby <ty@pre-alpha.com>"
          "HeroicKatora"
          "Calum"
          "CensoredUsername <cens.username@gmail.com>"
          "Robzz"
          "birktj"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "lzw";
            packageId = "lzw";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        
      };
      "ucd-util" = rec {
        crateName = "ucd-util";
        version = "0.1.3";
        edition = "2015";
        sha256 = "11lgx380zgqsm265cg78w2mcjpmldbwbi01lb5w48hyqwi720p2k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.5";
        edition = "2015";
        sha256 = "09k5lipygardwy0660jhls08fsgknrazzivmn804gps53hiqc8w8";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.0" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "utf8-ranges" = rec {
        crateName = "utf8-ranges";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0drp4j55bz7gzk5sbrk6g1nd0p3xm2an9q77mpvhjxpqpr47wvvr";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "06n8hw4hlbcz328a3gbpvmy0ma46vg1lc0r5wf55900szf3qdiq5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "vecmath" = rec {
        crateName = "vecmath";
        version = "1.0.0";
        edition = "2015";
        sha256 = "0shmj76rj7rqv377vy365xwr5rx23kxqgkqxxrymdjjvv3hf2slm";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "piston-float";
            packageId = "piston-float";
          }
        ];
        
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.2.9";
        edition = "2015";
        sha256 = "07ppalpvxkf8cnqr64np422792y4z5bs9m8b4nrflh5rm17wjn4n";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "wayland-client" = rec {
        crateName = "wayland-client";
        version = "0.21.12";
        edition = "2015";
        sha256 = "08x597c7kmrma2dr0jik8qvjvrkmm01psgcsszjs4zphhxl1wzg7";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "wayland-commons";
            packageId = "wayland-commons";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
            optional = true;
            features = [ "client" ];
          }
        ];
        buildDependencies = [
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "cursor" = [ "wayland-sys/cursor" "native_lib" ];
          "dlopen" = [ "wayland-sys/dlopen" "native_lib" ];
          "egl" = [ "wayland-sys/egl" "native_lib" ];
          "eventloop" = [ "calloop" "mio" ];
          "native_lib" = [ "wayland-sys" "wayland-commons/native_lib" ];
        };
        resolvedDefaultFeatures = [ "cursor" "dlopen" "egl" "native_lib" "wayland-sys" ];
      };
      "wayland-commons" = rec {
        crateName = "wayland-commons";
        version = "0.21.12";
        edition = "2015";
        sha256 = "17z0l048ash4rad9ncpss1h9kwbk6wmfxwv697x2w8fak59rmxnz";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
            optional = true;
          }
        ];
        features = {
          "native_lib" = [ "wayland-sys" ];
        };
        resolvedDefaultFeatures = [ "native_lib" "wayland-sys" ];
      };
      "wayland-protocols" = rec {
        crateName = "wayland-protocols";
        version = "0.21.12";
        edition = "2015";
        sha256 = "108dsji5c2q653w74hpy80ykz10p48bs3w70k0l9hza0lkvdvk69";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-commons";
            packageId = "wayland-commons";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" ];
          "native_client" = [ "client" "native_lib" "wayland-client/native_lib" ];
          "native_lib" = [ "wayland-sys" ];
          "native_server" = [ "server" "native_lib" "wayland-server/native_lib" ];
          "server" = [ "wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "native_client" "native_lib" "unstable_protocols" "wayland-client" "wayland-sys" ];
      };
      "wayland-scanner" = rec {
        crateName = "wayland-scanner";
        version = "0.21.12";
        edition = "2015";
        sha256 = "1qk03fgjknvb0n7dccyifrqc8zsps30725ax5r6z1f6dgpx5xg33";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.29";
          }
          {
            name = "quote";
            packageId = "quote 0.6.12";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        
      };
      "wayland-sys" = rec {
        crateName = "wayland-sys";
        version = "0.21.12";
        edition = "2015";
        sha256 = "17fn6lxdqqp6awg73j7n06n7gahx721z11agfh0d910vc0dghsp7";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        features = {
          "dlopen" = [ "dlib/dlopen" "lazy_static" ];
          "server" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "client" "cursor" "dlopen" "egl" "lazy_static" ];
      };
      "which" = rec {
        crateName = "which";
        version = "2.0.1";
        edition = "2015";
        sha256 = "0r7i793sc0xqnd2fxnqbksj7j1kx65bwn81b8z49750v4c8cnymm";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.7";
        edition = "2015";
        sha256 = "0w7pbhcl087lkggxdflfp2i92rq89ahsfdkjkv44fgmiy9m3h3pi";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "basetsd" "combaseapi" "consoleapi" "dbghelp" "dwmapi" "errhandlingapi" "fileapi" "handleapi" "hidusage" "knownfolders" "libloaderapi" "memoryapi" "minwinbase" "minwindef" "ntsecapi" "ntstatus" "objbase" "ole2" "processenv" "processthreadsapi" "shellapi" "shellscalingapi" "shlobj" "shobjidl_core" "std" "sysinfoapi" "unknwnbase" "winbase" "wincon" "windowsx" "winerror" "wingdi" "winnt" "winuser" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1j839dc6y8vszvrsb7yk0qvs0w6asnahxzbyans37vnsw6vbls3i";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "wincolor" = rec {
        crateName = "wincolor";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1fp9sxq63kw3vjjcjrl3f7px082pplzxcr3qza2n2pa6mq0xj7jn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "minwindef" "wincon" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
          }
        ];
        
      };
      "winit" = rec {
        crateName = "winit";
        version = "0.19.4";
        edition = "2015";
        sha256 = "1agllwjswywf9r5fh66rdw553cy5k46g86klj0vflhyiv5mwx7zr";
        authors = [
          "The winit contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "android_glue";
            packageId = "android_glue";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "bitflags";
            packageId = "bitflags";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "ios");
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
            features = [ "dlopen" "egl" "cursor" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser" ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
        ];
        features = {
          "icon_loading" = [ "image" ];
        };
      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.18.3";
        edition = "2015";
        sha256 = "1qxl0rpdjshfrjyc0sp6vv0px6krhlb27b3i772hbsjrp2n8c1cl";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        
      };
      "xdg" = rec {
        crateName = "xdg";
        version = "2.2.0";
        edition = "2015";
        sha256 = "0mws8a0fr3cqk5nh7aq9lmkmhzghvasqy4mhw6nnza06l4d6i2fh";
        authors = [
          "Ben Longbons <b.r.longbons@gmail.com>"
          "whitequark <whitequark@whitequark.org>"
        ];
        
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.0";
        edition = "2015";
        crateBin = [];
        sha256 = "1db4v716rbpgjiasaim2s17rmvsfcq1qzwg6nji6mdf5k34i46sl";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vladimir.matweev@gmail.com>"
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
