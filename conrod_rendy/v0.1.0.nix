
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/conrod_rendy/v0.1.0.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "conrod_rendy";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "conrod_rendy" = rec {
      packageId = "conrod_rendy";
      build = internal.buildRustCrateWithFeatures {
        packageId = "conrod_rendy";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "adler32" = rec {
        crateName = "adler32";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1hnan4fgmnidgn2k84hh2i67c3wp2c5iwd5hs61yi7gwwx1p6bjx";
        authors = [
          "Remi Rampin <remirampin@gmail.com>"
        ];
        
      };
      "andrew" = rec {
        crateName = "andrew";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0pmklwcwy8g1jras46fz8xcny779zfqpg4riksrbdhkjk3w0jzwv";
        authors = [
          "Lucas Timmins <timmins.s.lucas@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "line_drawing";
            packageId = "line_drawing";
          }
          {
            name = "rusttype";
            packageId = "rusttype 0.7.9";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "xdg";
            packageId = "xdg";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        
      };
      "android_glue" = rec {
        crateName = "android_glue";
        version = "0.2.3";
        edition = "2015";
        sha256 = "01y495x4i9vqkwmklwn2xk7sqg666az2axjcpkr4iwngdwi48100";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.26";
        edition = "2018";
        sha256 = "0g6mzcxyj88k8bv8rr3zx4yczgimqvvgr12n14a29sqj6s1zc9bq";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "approx" = rec {
        crateName = "approx";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1hx580xjdxl3766js9b49rnbnmr8gw8c060809l43k9f0xshprph";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1f5mca8kiiwhvhxd1mbnq68j6v6rk139sch567zwwzl6hs37vxyg";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ash" = rec {
        crateName = "ash";
        version = "0.29.0";
        edition = "2015";
        sha256 = "1rd53rmbjx9sksmk4yd91y8sr7vslvp05gixl3a0dsqjxfr1yg80";
        authors = [
          "maik klein <maikklein@googlemail.com>"
        ];
        dependencies = [
          {
            name = "shared_library";
            packageId = "shared_library";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "atom" = rec {
        crateName = "atom";
        version = "0.3.5";
        edition = "2015";
        sha256 = "1qig9fcdqf07mzzpkicm5wgxv0zpr28njdsqf708wxq27yf6k1iw";
        authors = [
          "Colin Sherratt <colin.sherratt@gmail.com>"
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.0.0";
        edition = "2015";
        sha256 = "17cv6pwb4q08s0ynpr4n8hv5299hcmhdgvdchzixfpw8y5qcgapq";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.44";
        edition = "2018";
        sha256 = "0djmbf6caj7qm2p7jw6wzjxc83sji9gdd8vjp9mg2g0gyjdnn0z4";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.32";
        edition = "2015";
        sha256 = "14c406z8bdmms8a5l8cv79jfkz1mk10qk5p97izf4vai53qparax";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];
        
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.2.0";
        edition = "2018";
        sha256 = "0hpp4wfcn04gnl1ji4a80b85xwknsci81xqyllq174gq9z0rsd8z";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1pkjfhgjnq898g1d38ygcfi0msg3m6756cwv0sgysj1d26p8mi08";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "c2-chacha" = rec {
        crateName = "c2-chacha";
        version = "0.2.3";
        edition = "2018";
        sha256 = "1fzn2n9k51b8wp4m41pkdzwlk1dbkjb6ha9rqdp4jfmzl753hhi1";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            rename = "ppv-lite86";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "simd" "rustcrypto_api" ];
          "rustcrypto_api" = [ "stream-cipher" "byteorder" ];
          "simd" = [ "ppv-lite86/simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "calloop" = rec {
        crateName = "calloop";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0q6ic9lr0s86886mbyn4yncg68b2sykgwjf3iygdw01swmxhk8ks";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "mio-extras";
            packageId = "mio-extras";
          }
          {
            name = "nix";
            packageId = "nix";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.50";
        edition = "2018";
        crateBin = [];
        sha256 = "1kdqm8ka7xg9h56b694pcz29ka33fsz27mzrphqc78gx96h8zqlm";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cgl" = rec {
        crateName = "cgl";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1zs7skrsyrsm759vfy2cygkx52fx91b567a12bpaz1sf4d8hbv8c";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "clipboard-win" = rec {
        crateName = "clipboard-win";
        version = "2.2.0";
        edition = "2018";
        sha256 = "0svqk0lrw66abaxd6h7l4k4g2s5vd1dcipy34kzfan6mzvb97873";
        libName = "clipboard_win";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            usesDefaultFeatures = false;
            target = { target, features }: target."windows";
            features = [ "std" "basetsd" "shellapi" "winbase" "winuser" ];
          }
        ];
        features = {
        };
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "cocoa" = rec {
        crateName = "cocoa";
        version = "0.19.1";
        edition = "2015";
        sha256 = "0034vahbfv574q4b63rj241b8rnka5cjiqsqc6wiggnin9l7g7zj";type = [ "rlib" ];
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
        
      };
      "color_quant" = rec {
        crateName = "color_quant";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1ga56jrafnjm80903nnqjkyii4bwd6a7visxh0g8hgi6cmrvbfqd";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        
      };
      "colorful" = rec {
        crateName = "colorful";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0rdfk0dhld8h6ijy2gshivkj7wcr87pjb3lanmb7mpapzwcidjhb";
        authors = [
          "da2018 <da2018t@gmail.com>"
        ];
        
      };
      "conrod_core" = rec {
        crateName = "conrod_core";
        version = "0.69.0";
        edition = "2015";
        sha256 = "05gf6v4cdn7f4kji0pm7ya70610k1s4r2zcs1j9jji9hr7pbgap1";
        authors = [
          "Mitchell Nordine <mitchell.nordine@gmail.com>"
          "Sven Nilsen <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "conrod_derive";
            packageId = "conrod_derive";
          }
          {
            name = "copypasta";
            packageId = "copypasta";
          }
          {
            name = "daggy";
            packageId = "daggy";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "pistoncore-input";
            packageId = "pistoncore-input";
          }
          {
            name = "rusttype";
            packageId = "rusttype 0.8.2";
            features = [ "gpu_cache" ];
          }
        ];
        features = {
          "stdweb" = [ "instant/stdweb" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" ];
        };
      };
      "conrod_derive" = rec {
        crateName = "conrod_derive";
        version = "0.69.0";
        edition = "2015";
        sha256 = "0qfmfgyyc2q7vviybw7z71yc26kvwwhavl50pr3449ci94kvribd";
        procMacro = true;
        authors = [
          "mitchmindtree <mitchell.nordine@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.16";
            features = [ "extra-traits" "full" ];
          }
        ];
        
      };
      "conrod_example_shared" = rec {
        crateName = "conrod_example_shared";
        version = "0.69.0";
        edition = "2015";
        sha256 = "1xckh7kkkg684pr0r1kwpg4gh5kg2xdk0grabhn0qm517j11zc22";
        authors = [
          "mitchmindtree <mitchell.nordine@gmail.com>"
        ];
        dependencies = [
          {
            name = "conrod_core";
            packageId = "conrod_core";
          }
          {
            name = "rand";
            packageId = "rand";
          }
        ];
        
      };
      "conrod_rendy" = rec {
        crateName = "conrod_rendy";
        version = "0.1.0";
        edition = "2018";
        src = pkgs.callPackage ./tarball-v0.1.0.nix {};
        authors = [
          "David Partouche <david@kaligs.com>"
          "mitchmindtree <mitchell.nordine@gmail.com>"
        ];
        dependencies = [
          {
            name = "conrod_core";
            packageId = "conrod_core";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "rendy";
            packageId = "rendy";
            usesDefaultFeatures = false;
            features = [ "base" "texture" ];
          }
        ];
        devDependencies = [
          {
            name = "conrod_example_shared";
            packageId = "conrod_example_shared";
          }
          {
            name = "conrod_winit";
            packageId = "conrod_winit";
          }
          {
            name = "find_folder";
            packageId = "find_folder";
          }
          {
            name = "image";
            packageId = "image";
          }
        ];
        features = {
          "dx12" = [ "rendy/dx12" ];
          "empty" = [ "rendy/empty" ];
          "gl" = [ "rendy/gl" ];
          "init-winit" = [ "rendy/init-winit" ];
          "metal" = [ "rendy/metal" ];
          "no-slow-safety-checks" = [ "rendy/no-slow-safety-checks" ];
          "profiler" = [ "rendy/profiler" ];
          "vulkan" = [ "rendy/vulkan" ];
        };
        resolvedDefaultFeatures = [ "dx12" "empty" "gl" "init-winit" "metal" "no-slow-safety-checks" "profiler" "vulkan" ];
      };
      "conrod_winit" = rec {
        crateName = "conrod_winit";
        version = "0.69.0";
        edition = "2015";
        sha256 = "0yikndzznslwj10ya1m4nxx0rddgc8jk5f036d9qcgrr2jr8imgg";
        authors = [
          "Mitchell Nordine <mitchell.nordine@gmail.com>"
          "Sven Nilsen <bvssvni@gmail.com>"
        ];
        
      };
      "copyless" = rec {
        crateName = "copyless";
        version = "0.1.4";
        edition = "2018";
        sha256 = "09s1fagd14fqch3xq9ijschay014la2i8hqfxw2rr95jkxncbybg";
        authors = [
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        
      };
      "copypasta" = rec {
        crateName = "copypasta";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1nm9985ry60i7zg8v6biiab5i87xg00ks8yipal1n2a1gaqvzz7i";
        authors = [
          "Christian Duerr <contact@christianduerr.com>"
        ];
        dependencies = [
          {
            name = "clipboard-win";
            packageId = "clipboard-win";
            target = { target, features }: target."windows";
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "objc-foundation";
            packageId = "objc-foundation";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "objc_id";
            packageId = "objc_id";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "smithay-clipboard";
            packageId = "smithay-clipboard";
            target = { target, features }: (target."unix" && (!((target."os" == "macos") || (target."os" == "android") || (target."os" == "ios") || (target."os" == "emscripten"))));
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            target = { target, features }: (target."unix" && (!((target."os" == "macos") || (target."os" == "android") || (target."os" == "ios") || (target."os" == "emscripten"))));
            features = [ "dlopen" ];
          }
          {
            name = "x11-clipboard";
            packageId = "x11-clipboard";
            target = { target, features }: (target."unix" && (!((target."os" == "macos") || (target."os" == "android") || (target."os" == "ios") || (target."os" == "emscripten"))));
          }
        ];
        
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.6.4";
        edition = "2015";
        sha256 = "0va97wf49c8dzm9c8pgyk1jn7z21rl0bj1syf2zz5m2z2hzy1f95";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.6.2";
        edition = "2015";
        sha256 = "0fzsw1j9g1x598yhwklg59l15hwzc0pyvs01w9fg2kin4598mjp7";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.17.3";
        edition = "2015";
        sha256 = "1acm3vygngnilzlr6klym5ywh7kfzh2xxrh2l41152hwmdl0jyan";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "core-video-sys" = rec {
        crateName = "core-video-sys";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1l59cg88482hkl95ssb30ac9x65hpbdsmxz9s5r6y222jlhnbh4d";
        authors = [
          "luozijun <luozijun.assistant@gmail.com>"
          "michael.laifx <cihv2@163.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
        features = {
          "all" = [ "display_link" "direct3d" "io_suface" "opengl" ];
          "default" = [ "display_link" "metal" ];
          "display_link" = [ "opengl" "core-graphics" ];
        };
        resolvedDefaultFeatures = [ "core-graphics" "display_link" "opengl" ];
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1c9dhkvf3brrzzplcijaywxi2w8wv5578i0ryhcm7x8dmzi5s4ms";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1ylyzb1m9qbvd1nd3vy38x9073wdmcy295ncjs7wf7ap476pzv68";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.6.6";
          }
        ];
        
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.7.3";
        edition = "2015";
        sha256 = "11c2c0x5grdba3ah3g94yn6b8s47xi8qwm85h8hq5vmf9nbsy0lz";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1knsf0zz7rgzxn0nwz5gajjcrivxpw3zrdcp946gdhdgr9sd53h5";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "crossbeam-utils/std" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1nwkjh185bdwjrv1zj2g7an9lglv8sp4459268m4fwvi3v5fx5f6";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils 0.6.6" = rec {
        crateName = "crossbeam-utils";
        version = "0.6.6";
        edition = "2015";
        sha256 = "1rk0r9n04bmq4a3g2q5qhvvlmrmx780gc6h9lmc94mwndslkz5q4";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossbeam-utils 0.7.2" = rec {
        crateName = "crossbeam-utils";
        version = "0.7.2";
        edition = "2015";
        sha256 = "1a31wbrda1320gj2a6az1lin2d34xfc3xf88da4c17qy5lxcgiy3";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "d3d12" = rec {
        crateName = "d3d12";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0qmn4jys3kbq2305vpwsx95f9fdc7z6526fcdca5wplhi67d8zmw";
        authors = [
          "msiglreith <m.siglreith@gmail.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "dxgi1_2" "dxgi1_3" "dxgi1_4" "dxgidebug" "d3d12" "d3d12sdklayers" "d3dcommon" "d3dcompiler" "dxgiformat" "synchapi" "winerror" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "libloading" ];
      };
      "daggy" = rec {
        crateName = "daggy";
        version = "0.5.0";
        edition = "2015";
        sha256 = "1qh9ckpbdvqzxgjh1nrd63kpp83rvvwxkr7cj00g7h8vgpda14wj";
        authors = [
          "mitchmindtree <mitchell.nordine@gmail.com>"
        ];
        dependencies = [
          {
            name = "petgraph";
            packageId = "petgraph";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "deflate" = rec {
        crateName = "deflate";
        version = "0.7.20";
        edition = "2015";
        sha256 = "1d7d9fpmgjnznrksmd3vlv3dyw01wsrm11ifil6ag22871xnlyvh";
        authors = [
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        features = {
          "gzip" = [ "gzip-header" ];
        };
      };
      "dispatch" = rec {
        crateName = "dispatch";
        version = "0.1.4";
        edition = "2015";
        sha256 = "019nzy993hxaiazcdnayx3csv2iki34i535asw11ki96hakkrs84";
        authors = [
          "Steven Sheldon"
        ];
        
      };
      "dlib" = rec {
        crateName = "dlib";
        version = "0.4.1";
        edition = "2015";
        sha256 = "0smp2cdvy12xfw26qyqms273w5anszfadv73g75s88yqm54i5rbp";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "dlopen" ];
      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.1.1";
        edition = "2015";
        sha256 = "1xhs2qj02k9m4mm5fgh19y88850y9jsnwwlblf2ffc91gjs6xfjj";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
        ];
        
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.3";
        edition = "2015";
        sha256 = "1qyz1b1acad6w0k5928jw5zaq900zhsk7p8dlcp4hh61w4f6n7xv";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "find_folder" = rec {
        crateName = "find_folder";
        version = "0.3.0";
        edition = "2015";
        sha256 = "06xr2sjiyjrwxlgjpf8ig6pq0ayfjv6qxmmfakw5j2ssp67h2vcz";
        authors = [
          "mitchmindtree <mitchell.nordine@gmail.com>"
          "bvssvni <bvssvni@gmail.com>"
        ];
        
      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0czam11mi80dbyhf4rd4lz0ihcf7vkfchrdcrn45wbs0h40dxm46";
        authors = [
          "bluss"
        ];
        
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "1ww56bi1r5b8id3ns9j3qxbi7w5h005rzhiryy0zi9h97raqbb9g";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        
      };
      "fuchsia-zircon" = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "10jxc5ks1x06gpd0xg51kcjrxr35nj6qhx2zlc5n7bmskv3675rf";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
          }
        ];
        
      };
      "fuchsia-zircon-sys" = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "19zp2085qsyq2bh1gvcxq1lb8w6v6jj9kbdkhpdjrl95fypakjix";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        
      };
      "fxhash" = rec {
        crateName = "fxhash";
        version = "0.2.1";
        edition = "2015";
        sha256 = "037mb9ichariqi45xm6mz0b11pa92gj38ba0409z3iz239sns6y3";
        libPath = "lib.rs";
        authors = [
          "cbreeden <github@u.breeden.cc>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.14";
        edition = "2018";
        sha256 = "1sq30li71h19rhnhs1h6576ja68insajx8wvh1nn088r8pc8vg3s";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "test-in-browser" = [ "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gfx-auxil" = rec {
        crateName = "gfx-auxil";
        version = "0.1.0";
        edition = "2018";
        sha256 = "068r6970mn53dzzpfg5ci650b13p4xfxjkryzsfcj8ws5aaywbjp";
        libName = "gfx_auxil";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "fxhash";
            packageId = "fxhash";
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
            rename = "hal";
          }
          {
            name = "spirv_cross";
            packageId = "spirv_cross";
          }
        ];
        
      };
      "gfx-backend-dx12" = rec {
        crateName = "gfx-backend-dx12";
        version = "0.4.3";
        edition = "2015";
        sha256 = "050pps5x5m5lwmp16d7v7sid9appfh0k5gz2z27dvdv5cfz20mih";
        libName = "gfx_backend_dx12";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "d3d12";
            packageId = "d3d12";
            features = [ "libloading" ];
          }
          {
            name = "gfx-auxil";
            packageId = "gfx-auxil";
            rename = "auxil";
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "range-alloc";
            packageId = "range-alloc";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "spirv_cross";
            packageId = "spirv_cross";
            features = [ "hlsl" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "basetsd" "d3d12" "d3d12sdklayers" "d3d12shader" "d3dcommon" "d3dcompiler" "dxgi1_2" "dxgi1_3" "dxgi1_4" "dxgi1_6" "dxgidebug" "dxgiformat" "dxgitype" "handleapi" "minwindef" "synchapi" "unknwnbase" "winbase" "windef" "winerror" "winnt" "winuser" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gfx-backend-empty" = rec {
        crateName = "gfx-backend-empty";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1iqc8wjyyl0wrn84cnbdiy7jkv0yzlwh38lqs8vwnrw8qimkwf1x";
        libName = "gfx_backend_empty";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
        ];
        
      };
      "gfx-backend-gl" = rec {
        crateName = "gfx-backend-gl";
        version = "0.4.0";
        edition = "2018";
        sha256 = "15km5hqk9j6208v3qjpk77i8ddg7ms1p04av6fsm96gnisblzp53";
        libName = "gfx_backend_gl";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "gfx-auxil";
            packageId = "gfx-auxil";
            rename = "auxil";
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
          }
          {
            name = "glow";
            packageId = "glow";
          }
          {
            name = "glutin";
            packageId = "glutin";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.9.0";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "spirv_cross";
            packageId = "spirv_cross";
            features = [ "glsl" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (target."arch" == "wasm32");
            features = [ "console" "Document" "Element" "HtmlCanvasElement" "HtmlElement" "Node" "Performance" "WebGlBuffer" "WebGlRenderingContext" "WebGl2RenderingContext" "WebGlProgram" "WebGlSampler" "WebGlShader" "WebGlTexture" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "libloaderapi" "windef" "wingdi" "winuser" ];
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.11.0";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "glutin" ];
      };
      "gfx-backend-metal" = rec {
        crateName = "gfx-backend-metal";
        version = "0.4.3";
        edition = "2018";
        sha256 = "1kgs7xjhz92kdp09n088g87f6ggck6im76smsax0fnn515000707";
        libName = "gfx_backend_metal";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "cocoa";
            packageId = "cocoa";
          }
          {
            name = "copyless";
            packageId = "copyless";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "gfx-auxil";
            packageId = "gfx-auxil";
            rename = "auxil";
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
            rename = "hal";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "metal";
            packageId = "metal";
            features = [ "private" ];
          }
          {
            name = "objc";
            packageId = "objc";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.9.0";
          }
          {
            name = "range-alloc";
            packageId = "range-alloc";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "spirv_cross";
            packageId = "spirv_cross";
            features = [ "msl" ];
          }
          {
            name = "storage-map";
            packageId = "storage-map";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gfx-backend-vulkan" = rec {
        crateName = "gfx-backend-vulkan";
        version = "0.4.2";
        edition = "2018";
        sha256 = "05nrcqj2jil8fm4fbb4bhy8fkvg5g4xavasx7lcl6if2dvj9v6pd";
        libName = "gfx_backend_vulkan";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "ash";
            packageId = "ash";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
            rename = "hal";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "libloaderapi" "windef" "winuser" ];
          }
          {
            name = "x11";
            packageId = "x11";
            optional = true;
            target = { target, features }: (target."unix" && (!(target."os" == "macos")) && (!(target."os" == "ios")) && (!(target."os" == "android")));
            features = [ "xlib" ];
          }
        ];
        features = {
          "use-rtld-next" = [ "shared_library" ];
        };
        resolvedDefaultFeatures = [ "default" "x11" ];
      };
      "gfx-hal" = rec {
        crateName = "gfx-hal";
        version = "0.4.1";
        edition = "2018";
        sha256 = "0zxsq14skr3yjamrnwa6f957ac6kvvhrkc4fn1xl9067clb9i23w";
        libName = "gfx_hal";
        authors = [
          "The Gfx-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        features = {
        };
      };
      "gif" = rec {
        crateName = "gif";
        version = "0.10.3";
        edition = "2015";
        sha256 = "1bw174f7civdfgryvc8pvyhicpr96hzdajnda4s3y8iv3ch907a7";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "color_quant";
            packageId = "color_quant";
          }
          {
            name = "lzw";
            packageId = "lzw";
          }
        ];
        features = {
          "c_api" = [ "libc" ];
          "default" = [ "raii_no_panic" ];
        };
        resolvedDefaultFeatures = [ "default" "raii_no_panic" ];
      };
      "gl_generator 0.11.0" = rec {
        crateName = "gl_generator";
        version = "0.11.0";
        edition = "2015";
        sha256 = "1gdchvay0k0g931b2ki33mkfixcw4radk5b8sqsm29rahxg3v8ir";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "gl_generator 0.13.1" = rec {
        crateName = "gl_generator";
        version = "0.13.1";
        edition = "2015";
        sha256 = "0jpqjqpyrl73sf8y20p5rv50qz8glnsvv9infg8h4vi52zgbp66a";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "glow" = rec {
        crateName = "glow";
        version = "0.3.0-alpha4";
        edition = "2018";
        sha256 = "07m40jy0llz4b82h7wd6sfzin1kvpjrv0jgwlsv7di3jsrhsb9p1";
        authors = [
          "Joshua Groves <josh@joshgroves.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "slotmap";
            packageId = "slotmap";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            optional = true;
            target = { target, features }: (target."arch" == "wasm32");
            features = [ "Document" "Element" "HtmlCanvasElement" "WebGlActiveInfo" "WebGlBuffer" "WebGlFramebuffer" "WebGlProgram" "WebGlRenderbuffer" "WebGlRenderingContext" "WebGl2RenderingContext" "WebGlSampler" "WebGlShader" "WebGlSync" "WebGlTexture" "WebGlUniformLocation" "WebGlVertexArrayObject" "Window" "AngleInstancedArrays" "ExtBlendMinmax" "ExtColorBufferFloat" "ExtColorBufferHalfFloat" "ExtDisjointTimerQuery" "ExtFragDepth" "ExtShaderTextureLod" "ExtSRgb" "ExtTextureFilterAnisotropic" "OesElementIndexUint" "OesStandardDerivatives" "OesTextureFloat" "OesTextureFloatLinear" "OesTextureHalfFloat" "OesTextureHalfFloatLinear" "OesVertexArrayObject" "WebglColorBufferFloat" "WebglCompressedTextureAstc" "WebglCompressedTextureEtc" "WebglCompressedTextureEtc1" "WebglCompressedTexturePvrtc" "WebglCompressedTextureS3tc" "WebglCompressedTextureS3tcSrgb" "WebglDebugRendererInfo" "WebglDebugShaders" "WebglDepthTexture" "WebglDrawBuffers" "WebglLoseContext" ];
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.13.1";
          }
        ];
        features = {
          "default" = [ "web-sys" ];
          "stdweb" = [ "std_web" "webgl_stdweb" ];
          "web-sys" = [ "web_sys" "js-sys" "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" "js-sys" "wasm-bindgen" "web-sys" "web_sys" ];
      };
      "glutin" = rec {
        crateName = "glutin";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1dch49xvf7knbphmi9zsxi93xrql6zd8gg9rjcxsh0lbhg44d4k3";
        authors = [
          "The glutin contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "android_glue";
            packageId = "android_glue";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "cgl";
            packageId = "cgl";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "glutin_emscripten_sys";
            packageId = "glutin_emscripten_sys";
            target = { target, features }: (target."os" == "emscripten");
          }
          {
            name = "glutin_gles2_sys";
            packageId = "glutin_gles2_sys";
            target = { target, features }: ((target."os" == "ios") || (target."os" == "macos"));
          }
          {
            name = "glutin_glx_sys";
            packageId = "glutin_glx_sys";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "glutin_wgl_sys";
            packageId = "glutin_wgl_sys";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libloading";
            packageId = "libloading";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "libloading";
            packageId = "libloading";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: ((target."os" == "ios") || (target."os" == "macos"));
          }
          {
            name = "osmesa-sys";
            packageId = "osmesa-sys";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
            features = [ "egl" "dlopen" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "winnt" "winuser" "wingdi" "libloaderapi" ];
          }
          {
            name = "winit";
            packageId = "winit";
          }
        ];
        features = {
          "serde" = [ "winit/serde" ];
        };
      };
      "glutin_egl_sys" = rec {
        crateName = "glutin_egl_sys";
        version = "0.1.4";
        edition = "2018";
        sha256 = "0k1x1frdp4wp47qkai8zzmgqxzpfcn7780m29qgd92lbnbrxwbkp";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "winnt" "winuser" "wingdi" "libloaderapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.13.1";
          }
        ];
        
      };
      "glutin_emscripten_sys" = rec {
        crateName = "glutin_emscripten_sys";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1wb3qfxg3jh6ibb7bxmlmvf4jcpzck3pn0035g1sds3nvx343pl0";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        
      };
      "glutin_gles2_sys" = rec {
        crateName = "glutin_gles2_sys";
        version = "0.1.4";
        edition = "2018";
        sha256 = "1q6scyshfvsz4i1jakylc1cnz33m14q5q8j5wi9qxjzbdgcm7s07";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        dependencies = [
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "ios");
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.13.1";
          }
        ];
        
      };
      "glutin_glx_sys" = rec {
        crateName = "glutin_glx_sys";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1hq970xnc6l122rx8pa82pirscdr5xnq526702hmxkynfkg47hh8";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        dependencies = [
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "freebsd") || (target."os" == "dragonfly") || (target."os" == "netbsd") || (target."os" == "openbsd"));
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.13.1";
          }
        ];
        
      };
      "glutin_wgl_sys" = rec {
        crateName = "glutin_wgl_sys";
        version = "0.1.4";
        edition = "2018";
        sha256 = "0spbjkzzyn8mmfn0d9zipik21kkibvr1y51pyk0fmzm0wdzblgd9";
        authors = [
          "The glutin contributors"
          "Hal Gentz <zegentzy@protonmail.com>"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator 0.13.1";
          }
        ];
        
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1n7g3bkd0hh9gnnmdzdzrrywqqb0hq8ypaxfkxg87zmv4qdmj40h";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hibitset" = rec {
        crateName = "hibitset";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1cb4dpjbhlg88s6ac16c4fymqffpip9c8ls2s6kmji542s1vp8ck";
        authors = [
          "csheratt"
        ];
        dependencies = [
          {
            name = "atom";
            packageId = "atom";
          }
        ];
        features = {
          "default" = [ "parallel" ];
          "parallel" = [ "rayon" ];
        };
      };
      "image" = rec {
        crateName = "image";
        version = "0.22.5";
        edition = "2015";
        sha256 = "0jpbd0p1q7xx6395ba9ikz2k4cfp26qczisa8m2v15w3hzd2mv88";
        authors = [
          "ccgn"
          "bvssvni <bvssvni@gmail.com>"
          "nwin"
          "TyOverby <ty@pre-alpha.com>"
          "HeroicKatora"
          "Calum"
          "CensoredUsername <cens.username@gmail.com>"
          "fintelia <fintelia@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "gif";
            packageId = "gif";
            optional = true;
          }
          {
            name = "jpeg-decoder";
            packageId = "jpeg-decoder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "png";
            packageId = "png";
            optional = true;
          }
          {
            name = "scoped_threadpool";
            packageId = "scoped_threadpool";
            optional = true;
          }
          {
            name = "tiff";
            packageId = "tiff";
            optional = true;
          }
        ];
        features = {
          "default" = [ "gif_codec" "jpeg" "ico" "png_codec" "pnm" "tga" "tiff" "webp" "bmp" "hdr" "dxt" "jpeg_rayon" ];
          "gif_codec" = [ "gif" ];
          "hdr" = [ "scoped_threadpool" ];
          "ico" = [ "bmp" "png_codec" ];
          "jpeg" = [ "jpeg-decoder" ];
          "jpeg_rayon" = [ "jpeg-decoder/rayon" ];
          "png_codec" = [ "png" ];
        };
        resolvedDefaultFeatures = [ "bmp" "default" "dxt" "gif" "gif_codec" "hdr" "ico" "jpeg" "jpeg-decoder" "jpeg_rayon" "png" "png_codec" "pnm" "scoped_threadpool" "tga" "tiff" "webp" ];
      };
      "inflate" = rec {
        crateName = "inflate";
        version = "0.4.5";
        edition = "2015";
        sha256 = "1zxjdn8iwa0ssxrnjmywm3r1v284wryvzrf8vkc7nyf5ijbjknqw";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1bwca9fr29a1pyimfl94q6m6k2l57ljw1hhhvjafzs1zkqlnqd3c";type = [ "cdylib" "rlib" ];
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (stdenv.hostPlatform.config == "asmjs-unknown-emscripten");
            features = [ "Window" "Performance" "PerformanceTiming" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (stdenv.hostPlatform.config == "wasm32-unknown-emscripten");
            features = [ "Window" "Performance" "PerformanceTiming" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = { target, features }: (stdenv.hostPlatform.config == "wasm32-unknown-unknown");
            features = [ "Window" "Performance" "PerformanceTiming" ];
          }
        ];
        features = {
          "now" = [ "time" ];
          "wasm-bindgen" = [ "web-sys" ];
        };
        resolvedDefaultFeatures = [ "wasm-bindgen" "web-sys" ];
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.5";
        edition = "2015";
        sha256 = "13nxqrfnh83a7x5rw4wq2ilp8nxvwy74dxzysdg59dbxqk0agdxq";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "jpeg-decoder" = rec {
        crateName = "jpeg-decoder";
        version = "0.1.18";
        edition = "2015";
        sha256 = "0lc428qgffh2a1agkq0p26mvf9rjaiswpywy5883j99mqypg0mh2";
        authors = [
          "Ulf Nilsson <kaksmet@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
        ];
        features = {
          "default" = [ "rayon" ];
        };
        resolvedDefaultFeatures = [ "rayon" ];
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.35";
        edition = "2018";
        sha256 = "1ybwazllkbif71i195dadgrsw64k6l04ggk5yimiy5c2cb1wg2bq";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "khronos_api" = rec {
        crateName = "khronos_api";
        version = "3.1.0";
        edition = "2015";
        sha256 = "1p0xj5mlbagqyvvnv8wmv3cr7l9y1m153888pxqwg3vk3mg5inz2";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "lazycell" = rec {
        crateName = "lazycell";
        version = "1.2.1";
        edition = "2015";
        sha256 = "0gvqycmpv7parc98i6y64ai7rvxrn1947z2a6maa02g4kvxdd55j";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikita Pekin <contact@nikitapek.in>"
        ];
        features = {
          "nightly-testing" = [ "clippy" "nightly" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.67";
        edition = "2015";
        sha256 = "061hpl3fr382s2asj7appkr1nbbxccb8f0x9nwxd8kprrnbpa57b";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0lyply8rcqc8agajzxs7bq6ivba9dnn1i68kgb9z2flnfjh13cgj";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "winerror" "errhandlingapi" "libloaderapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "line_drawing" = rec {
        crateName = "line_drawing";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1fcna7hq1g1kkkqy07hydscx5d2zgb6gskz3vnsvsif8h8ysvisw";
        authors = [
          "Expenses <expenses@airmail.cc>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.2";
        edition = "2015";
        sha256 = "10qgbvh00q36ql0jh00rxh2jlq6qvl11n6mig0cvkpf4xf5bd4df";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize_impl" = [ "heapsize" ];
          "serde_impl" = [ "serde" "serde_test" ];
        };
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0yzlz7f5xl5sm129dq8jqsrcrkyv7jjnqwd4zr4ijsdlxjaxxckr";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
      };
      "lzw" = rec {
        crateName = "lzw";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1170dfskhzlh8h2bm333811hykjvpypgnvxyhhm1rllyi2xpr53x";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        features = {
          "default" = [ "raii_no_panic" ];
        };
        resolvedDefaultFeatures = [ "default" "raii_no_panic" ];
      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "maybe-uninit" = rec {
        crateName = "maybe-uninit";
        version = "2.0.0";
        edition = "2015";
        sha256 = "004y0nzmpfdrhz251278341z6ql34iv1k6dp1h6af7d6nd6jwc30";
        authors = [
          "est31 <MTest31@outlook.com>"
          "The Rust Project Developers"
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.3.3";
        edition = "2015";
        sha256 = "0074pvsfl938ndl5js14ibc7i9q0k3zp390z843w8nlyv4bxha1p";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" "use_std" ];
      };
      "memmap" = rec {
        crateName = "memmap";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0ns7kkd1h4pijdkwfvw4qlbbmqmlmzwlq3g2676dcl5vwyazv1b5";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "basetsd" "handleapi" "memoryapi" "minwindef" "std" "sysinfoapi" ];
          }
        ];
        
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1fblqzc25hfaym8m0pj112s66pqq87avvaqm5hp5rskib2w9w63m";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        
      };
      "metal" = rec {
        crateName = "metal";
        version = "0.17.1";
        edition = "2018";
        sha256 = "1r51538bbddlhmqjb3hpjwj7pwjx4d2dx8rz95l2zq9q4367sg7q";
        authors = [
          "GFX Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "cocoa";
            packageId = "cocoa";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
            features = [ "objc_exception" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "private" ];
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.6.21";
        edition = "2015";
        sha256 = "13q02a7cwc140aygf8amadpzpl5lyj3p2r4wnvgydfpnphifqb9h";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fuchsia-zircon";
            packageId = "fuchsia-zircon";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "miow";
            packageId = "miow";
            target = { target, features }: target."windows";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "mio-extras" = rec {
        crateName = "mio-extras";
        version = "2.0.6";
        edition = "2018";
        sha256 = "069gfhlv0wlwfx1k2sriwfws490kjp490rv2qivyfb01j3i3yh2j";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "David Hotham"
        ];
        dependencies = [
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        
      };
      "miow" = rec {
        crateName = "miow";
        version = "0.2.1";
        edition = "2015";
        sha256 = "06g9b8sqlh5gxakwqq4rrib07afwanfnxgxajrldwcgk3hxjy7wc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
          }
          {
            name = "net2";
            packageId = "net2";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
          }
        ];
        
      };
      "net2" = rec {
        crateName = "net2";
        version = "0.2.33";
        edition = "2015";
        sha256 = "126g3fgfxp06zimc1l9iyxnn9cif1hjsg7sd81nlls5nnyghsma2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "redox") || target."unix");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.14.1";
        edition = "2015";
        sha256 = "1kmxdlmvnmq8cfpmr3g6wk37rwi2ybdvp1z6z3831m1p23p2nwkc";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (target."os" == "dragonfly");
          }
        ];
        
      };
      "nom" = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "1mkvby8b4m61p4g1px0pwr58yfkphyp1jcfbp4qfp7l6iqdaklia";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "num" = rec {
        crateName = "num";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0dhcvhprvvx1iaaq7sxlgxw5awmj8dibni8vhizi59zyz4q60lxq";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-bigint/i128" "num-complex/i128" "num-integer/i128" "num-iter/i128" "num-rational/i128" "num-traits/i128" ];
          "rand" = [ "num-bigint/rand" "num-complex/rand" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
          "std" = [ "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/bigint" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "std" ];
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.2.6";
        edition = "2015";
        sha256 = "015k3wixdi4w698sappvy43pf8bvkw0f88xplmdgc3zfk2cpy309";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.2.4";
        edition = "2015";
        sha256 = "15dwaksw729r3v14sgzc9723s3fnfixiir8jzwx7b7kim48r9cdn";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.2.5";
        edition = "2015";
        sha256 = "1wnv7776fh4i40r3zfxcxcmm0dh029skx7gp4sjknz2kqm2hpzga";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
        ];
        features = {
          "full-syntax" = [ "syn/full" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.42";
        edition = "2015";
        sha256 = "1fpw8yr9xwsf3qrh91rm7mzqaiwlc2dmnalsxv9pr9w1klpacviz";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.40";
        edition = "2015";
        sha256 = "005wif3bk23b5jdg7l0cprzqzyc4jg0xjyzyykciv2ci08581c6z";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.2.3";
        edition = "2015";
        sha256 = "18q3vq3xldhaj0z3f92am8f59m1awywgdj28c7wvx0bcksgwfkfs";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bigint-std" = [ "bigint" "num-bigint/std" ];
          "default" = [ "bigint-std" "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "bigint" "num-bigint" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.11";
        edition = "2015";
        sha256 = "15khrlm1bra50nd48ijl1vln13m9xg4fxzghf28jp16ic5zf8ay6";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.12.0";
        edition = "2015";
        sha256 = "1riw641hsmp2vwb9wz7d26dsycrjbw3zf4nd6p18kzw5y1a3a826";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
          {
            name = "objc_exception";
            packageId = "objc_exception";
            optional = true;
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
        };
        resolvedDefaultFeatures = [ "objc_exception" ];
      };
      "objc-foundation" = rec {
        crateName = "objc-foundation";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1y9bwb3m5fdq7w7i4bnds067dhm4qxv4m1mbg9y61j9nkrjipp8s";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "objc";
            packageId = "objc";
          }
          {
            name = "objc_id";
            packageId = "objc_id";
          }
        ];
        
      };
      "objc_exception" = rec {
        crateName = "objc_exception";
        version = "0.1.2";
        edition = "2015";
        sha256 = "191cmdmlypp6piw67y4m8y5swlxf5w0ss8n1lk5xd2l1ans0z5xd";
        authors = [
          "Steven Sheldon"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        
      };
      "objc_id" = rec {
        crateName = "objc_id";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0fq71hnp2sdblaighjc82yrac3adfmqzhpr11irhvdfp9gdlsbf9";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "objc";
            packageId = "objc";
          }
        ];
        
      };
      "ordered-float" = rec {
        crateName = "ordered-float";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0625x96987kspdxbikry5mb7hsf5pdc5bbanxd8wjwqlx0ar71hq";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Matt Brubeck <mbrubeck@limpet.net>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "osmesa-sys" = rec {
        crateName = "osmesa-sys";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0fq1q1zcgfb0qydrg9r2738jlwc4hqxgb9vj11z72bjxx7kfrkw8";
        libName = "osmesa_sys";
        libPath = "lib.rs";
        authors = [
          "Daggerbot <daggerbot@gmail.com>"
        ];
        dependencies = [
          {
            name = "shared_library";
            packageId = "shared_library";
          }
        ];
        
      };
      "parking_lot 0.10.0" = rec {
        crateName = "parking_lot";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1z0wgf2sd1266y768kxxs3313zjfzj9r3k7j4arfaz0bmd4qrscj";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.7.0";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot 0.9.0" = rec {
        crateName = "parking_lot";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0lk2vq3hp88ygpgsrypdr3ss71fidnqbykva0csgxhmn5scb2hpq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.6.2";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core 0.6.2" = rec {
        crateName = "parking_lot_core";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0ay67dpnrn68ryyvp720m9i8hzp189fd4d6slrs1lvmcwywv2xmq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "parking_lot_core 0.7.0" = rec {
        crateName = "parking_lot_core";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1wdbrvh35nn09ga570vl5062dpwfbrwgzyrlhhy78ifzhj2870km";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.2.0";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.4.13";
        edition = "2015";
        sha256 = "0kyfmca854s54jk26g2x1kjb04c3k7cjilaxyr0if8lhxv8mjdlw";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" ];
          "graphmap" = [ "ordermap" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "unstable" = [ "generate" ];
        };
      };
      "piston-float" = rec {
        crateName = "piston-float";
        version = "0.3.0";
        edition = "2015";
        sha256 = "169i7rhi986m2s5x7v993cn1k1rin15jwlb66bvbrm7g82kc6n5h";
        libName = "float";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        
      };
      "piston-viewport" = rec {
        crateName = "piston-viewport";
        version = "0.5.0";
        edition = "2015";
        sha256 = "049n07r87ww24mvkzcp0w7k6z7d3zp08wrnsgkaydavxbycxv5kx";
        libName = "viewport";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "piston-float";
            packageId = "piston-float";
          }
        ];
        
      };
      "pistoncore-input" = rec {
        crateName = "pistoncore-input";
        version = "0.24.0";
        edition = "2015";
        sha256 = "0bq5lkw0x10fdiycl30g8jpq1naz4wscm816cklwifn78bi2qq8c";
        libName = "input";
        authors = [
          "bvssvni <bvssvni@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "piston-viewport";
            packageId = "piston-viewport";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.17";
        edition = "2015";
        sha256 = "0xynnaxdv0gzadlw4h79j855k0q7rj4zb9xb1vk00nc6ss559nh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "png" = rec {
        crateName = "png";
        version = "0.15.3";
        edition = "2018";
        sha256 = "10x2qkhyfnm3si5vgx77r2ik811gaap7ahi825wfxgsb0lirm1gg";
        authors = [
          "nwin <nwin@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "deflate";
            packageId = "deflate";
            optional = true;
          }
          {
            name = "inflate";
            packageId = "inflate";
          }
        ];
        features = {
          "default" = [ "png-encoding" ];
          "png-encoding" = [ "deflate" ];
        };
        resolvedDefaultFeatures = [ "default" "deflate" "png-encoding" ];
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.6";
        edition = "2018";
        sha256 = "06zs492wbms7j5qhy58cs3976c7kyc47rx0d6fn63rgvp580njbl";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "proc-macro2 0.4.30" = rec {
        crateName = "proc-macro2";
        version = "0.4.30";
        edition = "2015";
        sha256 = "0nd71fl24sys066jrha6j7i34nfkjv44yzw8yww9742wmc8j0gfg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.9" = rec {
        crateName = "proc-macro2";
        version = "1.0.9";
        edition = "2018";
        sha256 = "0d9lr9h0rpa4gi78ha37zqbmkdhrpyjvb5ia94m3ljc1cwf742bc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 0.6.13" = rec {
        crateName = "quote";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1qgqq48jymp5h4y082aanf25hrw6bpb678xh3zw993qfhxmkpqkc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.2" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0lv8imzzl4h2glm6sjj8mkvasgi8jym23ya48dakyln7m06sk8h3";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "c2-chacha/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        
      };
      "range-alloc" = rec {
        crateName = "range-alloc";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1y8lgdbn151h0bvvj9fz9dy0hm84755pwzfk2nvyia93cy9jfnfx";
        libName = "range_alloc";
        authors = [
          "The Gfx-rs Developers"
        ];
        
      };
      "raw-window-handle" = rec {
        crateName = "raw-window-handle";
        version = "0.3.3";
        edition = "2018";
        sha256 = "04c2wir7qq3g2b143yav52a1g5ack8ffqx2bpmrn9bc0dix1li0a";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.3.0";
        edition = "2018";
        sha256 = "1650g13bxlmywhdlw65q3g1zyyb7l0wcm35v45kf31cwgwly6v6v";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.7.0";
        edition = "2018";
        sha256 = "1ac55kpnh2390ah7r071vnjbiy308qpznql0n597x5dgxx39pa08";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "relevant" = rec {
        crateName = "relevant";
        version = "0.4.2";
        edition = "2015";
        sha256 = "0203mfr401jqjfwgh1qqpifvxjl0qgpsahlvbdzm9x1p7phk5hmv";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "log" "std" ];
      };
      "rendy" = rec {
        crateName = "rendy";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1jikc8zdfcg1lqbpk39461hfqkf1cbbwbyw7awram7wv2awsxgjy";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "rendy-command";
            packageId = "rendy-command";
            optional = true;
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-descriptor";
            packageId = "rendy-descriptor";
            optional = true;
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
            optional = true;
          }
          {
            name = "rendy-frame";
            packageId = "rendy-frame";
            optional = true;
          }
          {
            name = "rendy-graph";
            packageId = "rendy-graph";
            optional = true;
          }
          {
            name = "rendy-init";
            packageId = "rendy-init";
            optional = true;
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
            optional = true;
          }
          {
            name = "rendy-mesh";
            packageId = "rendy-mesh";
            optional = true;
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
            optional = true;
          }
          {
            name = "rendy-shader";
            packageId = "rendy-shader";
            optional = true;
          }
          {
            name = "rendy-texture";
            packageId = "rendy-texture";
            optional = true;
          }
          {
            name = "rendy-wsi";
            packageId = "rendy-wsi";
            optional = true;
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "base" = [ "command" "descriptor" "factory" "frame" "graph" "init" "memory" "mesh" "shader" "resource" "texture" "wsi" ];
          "command" = [ "rendy-command" ];
          "default" = [ "base" "shader-compiler" "spirv-reflection" ];
          "descriptor" = [ "rendy-descriptor" ];
          "dx12" = [ "rendy-core/dx12" ];
          "empty" = [ "rendy-core/empty" ];
          "factory" = [ "rendy-factory" "command" "descriptor" "resource" "wsi" ];
          "frame" = [ "rendy-frame" "factory" ];
          "full" = [ "base" "mesh-obj" "texture-image" "texture-palette" "spirv-reflection" "shader-compiler" ];
          "gl" = [ "rendy-core/gl" ];
          "graph" = [ "rendy-graph" "frame" ];
          "init" = [ "rendy-init" ];
          "init-winit" = [ "rendy-init/winit" ];
          "memory" = [ "rendy-memory" ];
          "mesh" = [ "rendy-mesh" "factory" ];
          "mesh-obj" = [ "mesh" "rendy-mesh/obj" ];
          "metal" = [ "rendy-core/metal" ];
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "profiler" = [ "thread_profiler/thread_profiler" ];
          "resource" = [ "rendy-resource" "memory" ];
          "serde-1" = [ "rendy-factory/serde-1" "rendy-mesh/serde-1" "rendy-texture/serde-1" "rendy-shader/serde-1" "rendy-core/serde-1" ];
          "shader" = [ "rendy-shader" "factory" ];
          "shader-compiler" = [ "rendy-shader/shader-compiler" ];
          "spirv-reflection" = [ "rendy-shader/spirv-reflection" ];
          "texture" = [ "rendy-texture" "factory" ];
          "texture-image" = [ "texture" "rendy-texture/image" ];
          "texture-palette" = [ "texture" "rendy-texture/palette" ];
          "vulkan" = [ "rendy-core/vulkan" ];
          "wsi" = [ "rendy-wsi" ];
        };
        resolvedDefaultFeatures = [ "base" "command" "descriptor" "dx12" "empty" "factory" "frame" "gl" "graph" "init" "init-winit" "memory" "mesh" "metal" "no-slow-safety-checks" "profiler" "rendy-command" "rendy-descriptor" "rendy-factory" "rendy-frame" "rendy-graph" "rendy-init" "rendy-memory" "rendy-mesh" "rendy-resource" "rendy-shader" "rendy-texture" "rendy-wsi" "resource" "shader" "texture" "vulkan" "wsi" ];
      };
      "rendy-chain" = rec {
        crateName = "rendy-chain";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1y1minp9qb5ky8kvknrf6sa5f56swml7kqpddbx7xk2k3xmw1gbx";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "profiler" = [ "thread_profiler/thread_profiler" ];
        };
      };
      "rendy-command" = rec {
        crateName = "rendy-command";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1gnxb3h128qkycmvqwcchfnq6pyw5j93cwb21ndc2bv84pd4mg5k";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" "backtrace" ];
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "profiler" = [ "thread_profiler/thread_profiler" ];
        };
      };
      "rendy-core" = rec {
        crateName = "rendy-core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0fxvyq5wjsycy9g0n4jakh658qxba07hska45sbl9ls6vjw12j58";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "gfx-backend-dx12";
            packageId = "gfx-backend-dx12";
            optional = true;
            target = { target, features }: ((target."os" == "windows") && (!(target."arch" == "wasm32")));
          }
          {
            name = "gfx-backend-empty";
            packageId = "gfx-backend-empty";
            optional = true;
          }
          {
            name = "gfx-backend-gl";
            packageId = "gfx-backend-gl";
            optional = true;
            features = [ "glutin" ];
          }
          {
            name = "gfx-backend-metal";
            packageId = "gfx-backend-metal";
            optional = true;
            target = { target, features }: (((!(target."arch" == "wasm32")) && (target."os" == "macos")) || ((target."arch" == "aarch64") && (target."os" == "ios")));
          }
          {
            name = "gfx-backend-vulkan";
            packageId = "gfx-backend-vulkan";
            optional = true;
            target = { target, features }: (((target."os" == "windows") || (target."unix" && (!((target."os" == "macos") || (target."os" == "ios"))))) && (!(target."arch" == "wasm32")));
            features = [ "x11" ];
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.9.0";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "dx12" = [ "gfx-backend-dx12" ];
          "empty" = [ "gfx-backend-empty" ];
          "gl" = [ "gfx-backend-gl" ];
          "metal" = [ "gfx-backend-metal" ];
          "serde-1" = [ "serde" "gfx-hal/serde" ];
          "vulkan" = [ "gfx-backend-vulkan" ];
        };
        resolvedDefaultFeatures = [ "dx12" "empty" "gfx-backend-dx12" "gfx-backend-empty" "gfx-backend-gl" "gfx-backend-metal" "gfx-backend-vulkan" "gl" "metal" "no-slow-safety-checks" "vulkan" ];
      };
      "rendy-descriptor" = rec {
        crateName = "rendy-descriptor";
        version = "0.5.1";
        edition = "2018";
        sha256 = "07k2igpqsqz6ghx3a6sa2xcvbx1fqm2ha7qgb6cfjijra30bqxgl";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        
      };
      "rendy-factory" = rec {
        crateName = "rendy-factory";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1x2qcd7km7l1z5yfa535hifyx1227l96ckcfzgzd9bvfivqyj61k";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.9.0";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "rendy-command";
            packageId = "rendy-command";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-descriptor";
            packageId = "rendy-descriptor";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
          }
          {
            name = "rendy-wsi";
            packageId = "rendy-wsi";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "dx12" = [ "rendy-core/dx12" ];
          "empty" = [ "rendy-core/empty" ];
          "gl" = [ "rendy-core/gl" ];
          "metal" = [ "rendy-core/metal" ];
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "profiler" = [ "thread_profiler/thread_profiler" ];
          "serde-1" = [ "serde" "rendy-core/serde-1" "rendy-memory/serde-1" ];
        };
      };
      "rendy-frame" = rec {
        crateName = "rendy-frame";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1svcxrgvaxq0lkamzh79wx47h33zi0m6ycdxw33bd8mq73ckg70l";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "rendy-command";
            packageId = "rendy-command";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "profiler" = [ "thread_profiler/thread_profiler" ];
        };
      };
      "rendy-graph" = rec {
        crateName = "rendy-graph";
        version = "0.5.1";
        edition = "2018";
        sha256 = "02vm47n0nbhhap3p0cbv5d6jm8bhv83k39f6dnpyv6fm96xw31b8";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "rendy-chain";
            packageId = "rendy-chain";
          }
          {
            name = "rendy-command";
            packageId = "rendy-command";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-descriptor";
            packageId = "rendy-descriptor";
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
          }
          {
            name = "rendy-frame";
            packageId = "rendy-frame";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
          }
          {
            name = "rendy-shader";
            packageId = "rendy-shader";
          }
          {
            name = "rendy-wsi";
            packageId = "rendy-wsi";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "dx12" = [ "rendy-core/dx12" ];
          "empty" = [ "rendy-core/empty" ];
          "gl" = [ "rendy-core/gl" ];
          "metal" = [ "rendy-core/metal" ];
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "profiler" = [ "thread_profiler/thread_profiler" ];
          "vulkan" = [ "rendy-core/vulkan" ];
        };
      };
      "rendy-init" = rec {
        crateName = "rendy-init";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1y1jinypisdvmcjdkn3mvsclqanqcfycjiy06c82iyhygx9ag0vi";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rendy-command";
            packageId = "rendy-command";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
          }
          {
            name = "rendy-wsi";
            packageId = "rendy-wsi";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "winit";
            packageId = "winit";
            optional = true;
            features = [ "web-sys" ];
          }
        ];
        features = {
          "dx12" = [ "rendy-core/dx12" ];
          "empty" = [ "rendy-core/empty" ];
          "gl" = [ "rendy-core/gl" ];
          "metal" = [ "rendy-core/metal" ];
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "vulkan" = [ "rendy-core/vulkan" ];
        };
        resolvedDefaultFeatures = [ "winit" ];
      };
      "rendy-memory" = rec {
        crateName = "rendy-memory";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1v3035fcnllid5bdfq4wchhaqxjj0cbbn67l4xzsxzhrm1hj2jgd";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "colorful";
            packageId = "colorful";
          }
          {
            name = "gfx-hal";
            packageId = "gfx-hal";
          }
          {
            name = "hibitset";
            packageId = "hibitset";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        features = {
          "serde-1" = [ "serde" "gfx-hal/serde" ];
        };
      };
      "rendy-mesh" = rec {
        crateName = "rendy-mesh";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0hj1f2psrplcndxl5fzg2zm8kps20yv75lj3dj2pavvm9wq7xf4n";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rendy-command";
            packageId = "rendy-command";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        features = {
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "obj" = [ "wavefront_obj" ];
          "serde-1" = [ "serde" "serde_bytes" "smallvec/serde" "rendy-factory/serde-1" ];
        };
      };
      "rendy-resource" = rec {
        crateName = "rendy-resource";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0vmxj496zkghwnbc2r004vdhgj6410hdzx71ayyp0ad115mljdhb";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-descriptor";
            packageId = "rendy-descriptor";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        features = {
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
        };
      };
      "rendy-shader" = rec {
        crateName = "rendy-shader";
        version = "0.5.1";
        edition = "2018";
        sha256 = "05is9lnmskbszwna3fy3wb4n2n3yvp91836bazhw941lzb6zm3br";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
          "Walter Pearce <jaynus@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        features = {
          "serde-1" = [ "serde" "rendy-core/serde-1" ];
          "shader-compiler" = [ "shaderc" ];
          "spirv-reflection" = [ "spirv-reflect" ];
        };
      };
      "rendy-texture" = rec {
        crateName = "rendy-texture";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1r4ip9kklh1a0pyn6lnmr5474ab12118ass94f7c4c2sf51cl64b";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-factory";
            packageId = "rendy-factory";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
          }
          {
            name = "thread_profiler";
            packageId = "thread_profiler";
          }
        ];
        features = {
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "profile" = [ "thread_profiler/thread_profiler" ];
          "serde-1" = [ "serde" "rendy-core/serde-1" ];
        };
      };
      "rendy-wsi" = rec {
        crateName = "rendy-wsi";
        version = "0.5.1";
        edition = "2018";
        sha256 = "04jyp697qp153nrrm5iq698iqrgswy3sk371fqq46yyjarj3r6s9";
        authors = [
          "omni-viral <scareaangel@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "relevant";
            packageId = "relevant";
            features = [ "log" ];
          }
          {
            name = "rendy-core";
            packageId = "rendy-core";
          }
          {
            name = "rendy-memory";
            packageId = "rendy-memory";
          }
          {
            name = "rendy-resource";
            packageId = "rendy-resource";
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
        ];
        features = {
          "dx12" = [ "rendy-core/dx12" ];
          "empty" = [ "rendy-core/empty" ];
          "gl" = [ "rendy-core/gl" ];
          "metal" = [ "rendy-core/metal" ];
          "no-slow-safety-checks" = [ "rendy-core/no-slow-safety-checks" ];
          "vulkan" = [ "rendy-core/vulkan" ];
        };
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "rusttype 0.7.9" = rec {
        crateName = "rusttype";
        version = "0.7.9";
        edition = "2018";
        sha256 = "1m9ms4p94cgif74y1rzkj04rx8i1la193c0jgvnip61rd904429i";
        authors = [
          "Dylan Ede <dylanede@googlemail.com>"
          "Jeremy Soller <jackpot51@gmail.com>"
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "rusttype";
            packageId = "rusttype 0.8.2";
            rename = "rusttype_next";
          }
        ];
        features = {
          "bench" = [ "gpu_cache" ];
          "gpu_cache" = [ "rusttype_next/gpu_cache" ];
        };
      };
      "rusttype 0.8.2" = rec {
        crateName = "rusttype";
        version = "0.8.2";
        edition = "2018";
        sha256 = "12hwfg85iii7sbgsyyr23yw862dzp7f8zwn9xv5iqydm5w1i3a8l";
        authors = [
          "Dylan Ede <dylanede@googlemail.com>"
          "Jeremy Soller <jackpot51@gmail.com>"
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.7.2";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
            optional = true;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "ordered-float";
            packageId = "ordered-float";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
            optional = true;
          }
          {
            name = "stb_truetype";
            packageId = "stb_truetype";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "has-atomics" ];
          "gpu_cache" = [ "std" "linked-hash-map" "rustc-hash" "crossbeam-deque" "crossbeam-utils" "num_cpus" ];
          "libm-math" = [ "libm" "stb_truetype/libm" ];
          "std" = [ "has-atomics" "stb_truetype/std" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-deque" "crossbeam-utils" "default" "gpu_cache" "has-atomics" "linked-hash-map" "num_cpus" "rustc-hash" "std" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1j0h74f1xqf9hjkhanp8i20mqc1aw35kr1iq9i79q7713mn51a5z";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "scoped_threadpool" = rec {
        crateName = "scoped_threadpool";
        version = "0.1.9";
        edition = "2015";
        sha256 = "1a26d3lk40s9mrf4imhbik7caahmw2jryhhb6vqv6fplbbgzal8x";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
        };
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.104";
        edition = "2015";
        sha256 = "0ja4mgw4p42syjk7jkzwhj2yg6llfrfm7vn8rvy7v3c1bzr1aha1";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.104";
        edition = "2015";
        sha256 = "0r7gjlwfry44b4ylz524ynjp9v3qiwdj4c588lh94aas78q9x3qj";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.16";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.48";
        edition = "2018";
        sha256 = "09cwggp707hf0qswzrg00nffr09prx99f6qlajqnqbacbpksswck";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "preserve_order" = [ "indexmap" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "shared_library" = rec {
        crateName = "shared_library";
        version = "0.1.9";
        edition = "2015";
        sha256 = "04fs37kdak051hm524a360978g58ayrcarjsbf54vqps5c7px7js";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "slotmap" = rec {
        crateName = "slotmap";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1kasr0sz1nslxvqggjiqqc5jcd6hnfdgc2whw8lg218q4r9xb7vm";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        features = {
        };
      };
      "smallvec 0.6.13" = rec {
        crateName = "smallvec";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1dl219vnfkmsfx28lm3f83lyw24zap6fdsli6rg8nnp1aa67bc7p";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec 1.2.0" = rec {
        crateName = "smallvec";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1z6f47i3qpg9pdjzzvb0g5i1vvdm2ymk3kqc1mdnl8fdkgnb4bsw";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
        };
      };
      "smithay-client-toolkit" = rec {
        crateName = "smithay-client-toolkit";
        version = "0.6.6";
        edition = "2015";
        sha256 = "078gj7pw3x09y202yfz423iapky5q968n3qni1dj1jzmmk3qs722";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "andrew";
            packageId = "andrew";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "memmap";
            packageId = "memmap";
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            features = [ "cursor" ];
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
            features = [ "client" "unstable_protocols" ];
          }
        ];
        devDependencies = [
          {
            name = "wayland-client";
            packageId = "wayland-client";
            features = [ "dlopen" ];
          }
        ];
        
      };
      "smithay-clipboard" = rec {
        crateName = "smithay-clipboard";
        version = "0.3.7";
        edition = "2018";
        sha256 = "17pn816q2yimfl0y5nls6xhazx4pcb203pzf9mk6yndmd1p4hnaa";
        authors = [
          "Lucas Timmins <timmins.s.lucas@gmail.com>"
        ];
        dependencies = [
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            rename = "sctk";
          }
        ];
        
      };
      "sourcefile" = rec {
        crateName = "sourcefile";
        version = "0.1.4";
        edition = "2015";
        sha256 = "1lwa6973zs4bgj29my7agfjgk4nw9hp6j7dfnr13nid85fw7rxsb";
        authors = [
          "Richard Dodd <richard.o.dodd@gmail.com>"
        ];
        
      };
      "spirv_cross" = rec {
        crateName = "spirv_cross";
        version = "0.16.0";
        edition = "2018";
        sha256 = "1fv7qapj92sfd7pkwy8mrr0s4wnkkcik8lphlkk0mv6878dl9gpv";type = [ "cdylib" "rlib" ];
        authors = [
          "Joshua Groves <josh@joshgroves.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (stdenv.hostPlatform.config == "wasm32-unknown-unknown");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (stdenv.hostPlatform.config == "wasm32-unknown-unknown");
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (!(target."arch" == "wasm32"));
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "glsl" "hlsl" "msl" ];
      };
      "stb_truetype" = rec {
        crateName = "stb_truetype";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0lgvnh3ma6cz811bk8imj45djz76zs47b8327sgnmik2x03nnyzp";
        authors = [
          "Dylan Ede <dylanede@googlemail.com>"
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "storage-map" = rec {
        crateName = "storage-map";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0pn4m6cwki028xfzsycs6d8kw1g4n7b3d9s4m4jdr4f5llllh2px";
        authors = [
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
        ];
        
      };
      "syn 0.15.44" = rec {
        crateName = "syn";
        version = "0.15.44";
        edition = "2015";
        sha256 = "1id5g6x6zihv3j7hwrw3m1jp636bg8dpi671r7zy3jvpkavb794w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "parsing" "printing" "proc-macro" "quote" ];
      };
      "syn 1.0.16" = rec {
        crateName = "syn";
        version = "1.0.16";
        edition = "2018";
        sha256 = "0nbqq296ngd532nv7r2g0rgk3rajdmx2sch9slc08f7vki4xjfqj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "thread_profiler" = rec {
        crateName = "thread_profiler";
        version = "0.3.0";
        edition = "2015";
        sha256 = "03aa0cw2qgf69i5ynrfn9jyrh73hi9r8sqf6ci10mavl9s871cvi";
        authors = [
          "Glenn Watson <github@intuitionlibrary.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "time";
            packageId = "time";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "thread_profiler" ];
      };
      "tiff" = rec {
        crateName = "tiff";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0zgmbny2f8rssqmjdfvnysy0vqwcvlwl6q9f5yixhavlqk7w5dyp";
        authors = [
          "ccgn"
          "bvssvni <bvssvni@gmail.com>"
          "nwin"
          "TyOverby <ty@pre-alpha.com>"
          "HeroicKatora"
          "Calum"
          "CensoredUsername <cens.username@gmail.com>"
          "Robzz"
          "birktj"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "lzw";
            packageId = "lzw";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0vsbvsz0ryxb35dy9j4anxvy8zlaplmjmi0a4z4l64bc135cz3fv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.6.0";
        edition = "2015";
        sha256 = "1h7d48mzpi8hwf5cvnq07warkv86pvapzzzf32hvbjsk20yiagp8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.0" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0z9g39f49cycdm9vzjf8hnfh3f1csxgd65kmlphj8r2vffy84wbp";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.58";
        edition = "2018";
        sha256 = "0v31s91andxcj73w63g3fkbw3ld6cfsaa4135qcjna22vypyj1aj";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.58";
        edition = "2018";
        sha256 = "0icskn0qlj30np6x6nbyl1i9dndckx0pczaq69dm42r92rcbkk8i";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.16";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.58";
        edition = "2018";
        sha256 = "1hwxw0nhi2n4izhjn2fvnrrn59xqjxs3ybkgzdv1b4p65ivr8h2p";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.58";
        edition = "2018";
        sha256 = "0s3n7v741i4wkzib41m126li40qlhqyirnxpigkypsi59wsk2l78";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.16";
            features = [ "visit" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.58";
        edition = "2018";
        sha256 = "00cnbabf4k9bahb217vkilmjwqwzpwp112vlvgfw1x19r4gydrzm";
        authors = [
          "The wasm-bindgen Developers"
        ];
        
      };
      "wasm-bindgen-webidl" = rec {
        crateName = "wasm-bindgen-webidl";
        version = "0.2.58";
        edition = "2018";
        sha256 = "0pcpaw8w3xgfrg9y24ljrsl2bkidgdaaz3ka2bgk417wjc6jl0gg";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.9";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.16";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "weedle";
            packageId = "weedle";
          }
        ];
        
      };
      "wayland-client" = rec {
        crateName = "wayland-client";
        version = "0.23.6";
        edition = "2015";
        sha256 = "1nmw2kz70llc5mxwzg6bglnqy0qnyr9224zjmq9czazgw3mq045g";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "calloop";
            packageId = "calloop";
            optional = true;
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "wayland-commons";
            packageId = "wayland-commons";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
          }
        ];
        buildDependencies = [
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "cursor" = [ "wayland-sys/cursor" "native_lib" ];
          "dlopen" = [ "wayland-sys/dlopen" "native_lib" ];
          "egl" = [ "wayland-sys/egl" "native_lib" ];
          "eventloop" = [ "calloop" "mio" ];
          "native_lib" = [ "wayland-sys/client" ];
        };
        resolvedDefaultFeatures = [ "calloop" "cursor" "dlopen" "egl" "eventloop" "mio" "native_lib" ];
      };
      "wayland-commons" = rec {
        crateName = "wayland-commons";
        version = "0.23.6";
        edition = "2015";
        sha256 = "1nyvcs6xxxzqgh0wvc7z0fgi89bf3h9p4qrbf77bnfbwlb8v0rmv";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
          }
        ];
        
      };
      "wayland-protocols" = rec {
        crateName = "wayland-protocols";
        version = "0.23.6";
        edition = "2015";
        sha256 = "1ygwbzqlnks5xzafka3c8ag6k92g2h6ygj2xsmvjfx2n6rj8dhkc";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-commons";
            packageId = "wayland-commons";
          }
        ];
        buildDependencies = [
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" ];
          "server" = [ "wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "unstable_protocols" "wayland-client" ];
      };
      "wayland-scanner" = rec {
        crateName = "wayland-scanner";
        version = "0.23.6";
        edition = "2015";
        sha256 = "0g8wcphykjrcpslznyi3qccx1pckw97rckq5b295nfbg6r3j5c4k";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        
      };
      "wayland-sys" = rec {
        crateName = "wayland-sys";
        version = "0.23.6";
        edition = "2015";
        sha256 = "1x2qafvj8hd2x5qfaan2dfpw9amg0f5g9sqrkdy7qvbddsl8jknr";
        authors = [
          "Victor Berger <victor.berger@m4x.org>"
        ];
        dependencies = [
          {
            name = "dlib";
            packageId = "dlib";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        features = {
          "client" = [ "dlib" ];
          "cursor" = [ "client" ];
          "dlopen" = [ "dlib/dlopen" "lazy_static" ];
          "egl" = [ "client" ];
          "server" = [ "libc" "dlib" ];
        };
        resolvedDefaultFeatures = [ "client" "cursor" "dlib" "dlopen" "egl" "lazy_static" ];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.35";
        edition = "2018";
        sha256 = "0fzmxcyahy3ghl8lkjkchj9krmnr56shvbqgr7db3hm8dappryda";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        buildDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "sourcefile";
            packageId = "sourcefile";
          }
          {
            name = "wasm-bindgen-webidl";
            packageId = "wasm-bindgen-webidl";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "AngleInstancedArrays" "BeforeUnloadEvent" "CssStyleDeclaration" "Document" "DomRect" "Element" "Event" "EventTarget" "ExtBlendMinmax" "ExtColorBufferFloat" "ExtColorBufferHalfFloat" "ExtDisjointTimerQuery" "ExtFragDepth" "ExtSRgb" "ExtShaderTextureLod" "ExtTextureFilterAnisotropic" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "OesElementIndexUint" "OesStandardDerivatives" "OesTextureFloat" "OesTextureFloatLinear" "OesTextureHalfFloat" "OesTextureHalfFloatLinear" "OesVertexArrayObject" "Performance" "PerformanceTiming" "PointerEvent" "WebGl2RenderingContext" "WebGlActiveInfo" "WebGlBuffer" "WebGlFramebuffer" "WebGlProgram" "WebGlRenderbuffer" "WebGlRenderingContext" "WebGlSampler" "WebGlShader" "WebGlSync" "WebGlTexture" "WebGlUniformLocation" "WebGlVertexArrayObject" "WebglColorBufferFloat" "WebglCompressedTextureAstc" "WebglCompressedTextureEtc" "WebglCompressedTextureEtc1" "WebglCompressedTexturePvrtc" "WebglCompressedTextureS3tc" "WebglCompressedTextureS3tcSrgb" "WebglDebugRendererInfo" "WebglDebugShaders" "WebglDepthTexture" "WebglDrawBuffers" "WebglLoseContext" "WheelEvent" "Window" "console" ];
      };
      "weedle" = rec {
        crateName = "weedle";
        version = "0.10.0";
        edition = "2015";
        sha256 = "0r0i2kllvkn9jil6cjzxdi1zsc6p1gjyk751w8lyclaii1q3zd1v";
        authors = [
          "Sharad Chand <sharad.d.chand@gmail.com>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
          }
        ];
        
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.8" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "basetsd" "combaseapi" "commctrl" "consoleapi" "d3d12" "d3d12sdklayers" "d3d12shader" "d3dcommon" "d3dcompiler" "dwmapi" "dxgi1_2" "dxgi1_3" "dxgi1_4" "dxgi1_6" "dxgidebug" "dxgiformat" "dxgitype" "errhandlingapi" "fileapi" "handleapi" "hidusage" "libloaderapi" "memoryapi" "minwinbase" "minwindef" "ntdef" "ntstatus" "objbase" "ole2" "processenv" "processthreadsapi" "profileapi" "shellapi" "shellscalingapi" "shobjidl_core" "std" "synchapi" "sysinfoapi" "timezoneapi" "unknwnbase" "winbase" "wincon" "windef" "windowsx" "winerror" "wingdi" "winnt" "winsock2" "winuser" "ws2def" "ws2ipdef" "ws2tcpip" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.3";
        edition = "2018";
        sha256 = "105dq898nah3dwrzr96vvb5srp6g2v5dl5vmzf211lba9iavzksc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winit" = rec {
        crateName = "winit";
        version = "0.20.0";
        edition = "2018";
        sha256 = "1xflrjyq144bmndywg9hkkknmg3dj5di2apc7d2iyj2h01w2i89v";
        authors = [
          "The winit contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "android_glue";
            packageId = "android_glue";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "core-video-sys";
            packageId = "core-video-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "macos");
            features = [ "display_link" ];
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "mio-extras";
            packageId = "mio-extras";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "ios");
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd") || (target."os" == "windows"));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
            features = [ "dlopen" "egl" "cursor" "eventloop" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            optional = true;
            target = { target, features }: (target."arch" == "wasm32");
            features = [ "console" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser" ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target = { target, features }: ((target."os" == "linux") || (target."os" == "dragonfly") || (target."os" == "freebsd") || (target."os" == "openbsd") || (target."os" == "netbsd"));
          }
        ];
        features = {
          "stdweb" = [ "std_web" "instant/stdweb" ];
          "web-sys" = [ "web_sys" "wasm-bindgen" "instant/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "wasm-bindgen" "web-sys" "web_sys" ];
      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "x11" = rec {
        crateName = "x11";
        version = "2.18.2";
        edition = "2015";
        sha256 = "0wz7l6dlbraa9zalh9i45v9wibvkir9m2m1sg0jnzcbcaj9d1v3p";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "xrecord" = [ "xtst" ];
          "xtest" = [ "xtst" ];
        };
        resolvedDefaultFeatures = [ "xlib" ];
      };
      "x11-clipboard" = rec {
        crateName = "x11-clipboard";
        version = "0.5.1";
        edition = "2015";
        sha256 = "17c5yxxhknrp7y9mc7mp85ra8q4jw12c174m9yzbfr1vs2pkgsg5";
        authors = [
          "quininer kel <quininer@live.com>"
        ];
        dependencies = [
          {
            name = "xcb";
            packageId = "xcb";
            features = [ "thread" "xfixes" ];
          }
        ];
        
      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.18.5";
        edition = "2015";
        sha256 = "1y7yq4sfvv56shk4v3s7gvlrwk9d0migj622fl4i4c5klpiq3y9b";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        
      };
      "xcb" = rec {
        crateName = "xcb";
        version = "0.9.0";
        edition = "2015";
        sha256 = "19i2pm8alpn2f0m4jg8bsw6ckw8irj1wjh55h9pi2fcb2diny1b2";
        authors = [
          "Remi Thebault <remi.thebault@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        buildDependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "debug_all" = [ "thread" "composite" "damage" "dpms" "dri2" "dri3" "glx" "randr" "record" "render" "res" "screensaver" "shape" "shm" "xevie" "xf86dri" "xfixes" "xinerama" "xkb" "xprint" "xselinux" "xtest" "xvmc" "xv" "xlib_xcb" ];
          "present" = [ "render" "xfixes" "sync" ];
          "randr" = [ "render" ];
          "xfixes" = [ "render" "shape" ];
          "xinput" = [ "xfixes" ];
          "xlib_xcb" = [ "x11/xlib" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [ "render" "shape" "thread" "xfixes" ];
      };
      "xdg" = rec {
        crateName = "xdg";
        version = "2.2.0";
        edition = "2015";
        sha256 = "0mws8a0fr3cqk5nh7aq9lmkmhzghvasqy4mhw6nnza06l4d6i2fh";
        authors = [
          "Ben Longbons <b.r.longbons@gmail.com>"
          "whitequark <whitequark@whitequark.org>"
        ];
        
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.0";
        edition = "2015";
        crateBin = [];
        sha256 = "1db4v716rbpgjiasaim2s17rmvsfcq1qzwg6nji6mdf5k34i46sl";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vladimir.matweev@gmail.com>"
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
