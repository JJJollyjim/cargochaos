
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/rustpython/v0.1.1.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "rustpython";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "rustpython" = rec {
      packageId = "rustpython";
      build = internal.buildRustCrateWithFeatures {
        packageId = "rustpython";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "adler32" = rec {
        crateName = "adler32";
        version = "1.0.3";
        edition = "2015";
        sha256 = "0p7fxlnks9l7p7rwfqi7aqgnk2bps5zc0rjiw00mdw19nnbjjlky";
        authors = [
          "Remi Rampin <remirampin@gmail.com>"
        ];
        
      };
      "aho-corasick 0.6.10" = rec {
        crateName = "aho-corasick";
        version = "0.6.10";
        edition = "2015";
        crateBin = [];
        sha256 = "19f8v503ibvlyr824g5ynicrh1lsmp2i0zmpszr8lqay0qw3vkl1";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        
      };
      "aho-corasick 0.7.6" = rec {
        crateName = "aho-corasick";
        version = "0.7.6";
        edition = "2015";
        sha256 = "0b8dh20fhdc59dhhnfi89n2bi80a8zbagzd5c122hf1vv2amxysq";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "arr_macro" = rec {
        crateName = "arr_macro";
        version = "0.1.2";
        edition = "2018";
        sha256 = "15rsvpwdqgchh6ycwpvfv22xy0s38k6n9ryn99aj2cap5wzvhqnj";
        authors = [
          "Josh Mcguigan"
        ];
        dependencies = [
          {
            name = "arr_macro_impl";
            packageId = "arr_macro_impl";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
        ];
        
      };
      "arr_macro_impl" = rec {
        crateName = "arr_macro_impl";
        version = "0.1.2";
        edition = "2018";
        sha256 = "1z5axgkv2r7ikp0882gdqqb1dswwhb8fb4cd4929x4zczybvxv4d";
        procMacro = true;
        authors = [
          "Josh Mcguigan"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "full" ];
          }
        ];
        
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.5";
        edition = "2015";
        sha256 = "1vphy316jbgmgckk4z7m8csvlyc8hih9w95iyq48h8077xc2wf0d";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
        
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.4.11";
        edition = "2015";
        sha256 = "1fmhq4ljxr954mdyazaqa9kdxryl5d2ggr5rialylrd6xndkzmxq";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "array-sizes-33-128" "default" "std" ];
      };
      "ascii-canvas" = rec {
        crateName = "ascii-canvas";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1qipmwnmlyklnjxijkz2wg0bq72k2aii381k8ljiq6l20aadd1dk";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "term";
            packageId = "term";
          }
        ];
        
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.13";
        edition = "2015";
        sha256 = "140sswp1bwqwc4zk80bxkbnfb3g936hgrb77g9g0k1zcld3wc0qq";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "0.1.6";
        edition = "2015";
        sha256 = "0x8q946yy321rlpxhqf3mkd965x8kbjs2jwcw55dsmxlf7xwhwdn";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.37";
        edition = "2018";
        sha256 = "1qpldpgwxyf2jpkd7nlxdixnkwd5iwvx4bv5kf0lmcam0sicb02i";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.31";
        edition = "2015";
        sha256 = "0as2pk77br4br04daywhivpi1ixxb8y2c7f726kj849dxys31a42";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.10.1";
        edition = "2015";
        sha256 = "13k6bvd3n6dm7jqn9x918w65dd9xhx454bqphbnv0bkd6n9dj98b";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.1.4";
        edition = "2015";
        sha256 = "1xx6bp39irvsndk6prnmmq8m1l9p6q2qj21j6mfks2y81pjsa14z";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Daniel Griffen"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.1";
        edition = "2015";
        sha256 = "100ac8867bvbx9kv634w4xjk98b71i8nq4wdcvpf3cf4ha4j6k78";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "nightly" = [ "bit-vec/nightly" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1fyh8221s6cxlmng01v8v2ljhavzawqqs8r1xjc66ap5sjavx6zm";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1zc1qb1hwsnl2d8rhzicsv9kqd5b2hwbrscrcfw5as4sfr35659x";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "blake2" = rec {
        crateName = "blake2";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0c4k11j04kqhkci6i9b7lz6p13kpcv228pdqixgrawvavaq0gjwl";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
            features = [ "dev" ];
          }
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
          "std" = [ "digest/std" "crypto-mac/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "0.5.8";
        edition = "2018";
        sha256 = "10iiyv22rknspcrkpn49ka3widw29gv4q0ah0bfrbx2j2ppawl2q";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.7.3";
        edition = "2015";
        sha256 = "12v8wizynqin0hqf140kmp9s38q223mp1b0hkqk8j5pk8720v560";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        
      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.1.4";
        edition = "2015";
        sha256 = "02fz9wx5dmgpc79ndrb9xfxqlrkk7lg5wki2blz2zqg27spw6kbd";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
        ];
        
      };
      "build_const" = rec {
        crateName = "build_const";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0faz882spx9474cszay2djmb0lghbwq51qayabcar1s7g4r2l29r";
        authors = [
          "Garrett Berg <vitiral@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "2.6.0";
        edition = "2018";
        sha256 = "020psxs5dlm0gdbs83rx2rcavibdshdr0fpzk3mmw65zq8ppz05d";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "collections" = [ "std" ];
          "default" = [ "collections" "std" ];
        };
        resolvedDefaultFeatures = [ "collections" "default" "std" ];
      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.2";
        edition = "2015";
        sha256 = "1xbwjlmq2ziqjmjvkqxdx1yh136xxhilxd40bky1w4d7hn4xvhx7";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "caseless" = rec {
        crateName = "caseless";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0zrx8rrks6mq08m37y3ng8kq272diphnvlrircif2yvl30rsp3c0";
        build = "src/build.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        buildDependencies = [
          {
            name = "regex";
            packageId = "regex 1.3.1";
          }
        ];
        
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.45";
        edition = "2018";
        crateBin = [];
        sha256 = "1gm1llpdm3ch58myngjca6id47k7837scjy5bygfp4223xga7jag";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "num_cpus" "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0csygklgz3ybpr0670rkip49zh76m43ar3k7xgypkzbzrwycx1ml";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.7";
        edition = "2015";
        sha256 = "1glam3iqhshbamzgf0npn7hgghski92r31lm7gg8841hnxc1zn3p";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
        ];
        features = {
          "clock" = [ "time" ];
          "default" = [ "clock" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "time" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "1nf6ld3bims1n5vfzhkvcb55pdzh04bbhzf8nil5vvw05nxzarsh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim 0.8.0";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.1.4";
        edition = "2015";
        sha256 = "083icpr9xb72rrdxw3p4068dcspn6ai22jy7rhl2a8grfz448nlr";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        
      };
      "cpython" = rec {
        crateName = "cpython";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0h595y1fjs944n2mhy5y4pwrxy34wqcvf6fdzq4m2zryf97072dl";
        authors = [
          "Daniel Grunwald <daniel@danielgrunwald.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "python3-sys";
            packageId = "python3-sys";
            optional = true;
          }
        ];
        features = {
          "default" = [ "python3-sys" ];
          "extension-module" = [ "python3-sys/extension-module" ];
          "extension-module-2-7" = [ "python27-sys/extension-module" ];
          "nightly" = [ "nonnull" ];
          "python-3-4" = [ "python3-sys/python-3-4" ];
          "python-3-5" = [ "python3-sys/python-3-5" ];
          "python-3-6" = [ "python3-sys/python-3-6" ];
          "python-3-7" = [ "python3-sys/python-3-7" ];
        };
        resolvedDefaultFeatures = [ "default" "python3-sys" ];
      };
      "crc" = rec {
        crateName = "crc";
        version = "1.8.1";
        edition = "2015";
        sha256 = "1sqal6gm6lbj7f45iv3rw2s9w3pvvha8v970y51s7k7mwy6m8qyn";
        authors = [
          "Rui Hu <code@mrhooray.com>"
        ];
        buildDependencies = [
          {
            name = "build_const";
            packageId = "build_const";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1c9dhkvf3brrzzplcijaywxi2w8wv5578i0ryhcm7x8dmzi5s4ms";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-utils 0.5.0" = rec {
        crateName = "crossbeam-utils";
        version = "0.5.0";
        edition = "2015";
        sha256 = "05b00dr1srl94d7jkalhwxdvpkaby2f8p3m37y8jpgg82wx4azb7";
        authors = [
          "The Crossbeam Project Developers"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "crossbeam-utils 0.6.6" = rec {
        crateName = "crossbeam-utils";
        version = "0.6.6";
        edition = "2015";
        sha256 = "1rk0r9n04bmq4a3g2q5qhvvlmrmx780gc6h9lmc94mwndslkz5q4";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static 1.4.0";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crypto-mac" = rec {
        crateName = "crypto-mac";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1rbrq6qy9dl0pj4ym2zy33miaaa8vpzdss60p9bdb58xy46l0d24";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "diff" = rec {
        crateName = "diff";
        version = "0.1.11";
        edition = "2015";
        sha256 = "0fhavni46a2rib93ig5fgbqmm48ysms5sxzb3h9bp7vp2bwnjarw";
        authors = [
          "Utkarsh Kukreti <utkarshkukreti@gmail.com>"
        ];
        
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "2.0.2";
        edition = "2015";
        sha256 = "1qymhyq7w7wlf1dirq6gsnabdyzg6yi2yyxkx6c4ldlkbjdaibhk";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];
        
      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.3.4";
        edition = "2015";
        sha256 = "0yyykdcmbc476z1v9m4z5jb8y91dw6kgzpkiqi2ig07xx0yv585g";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "knownfolders" "objbase" "shlobj" "winbase" "winerror" ];
          }
        ];
        
      };
      "docopt" = rec {
        crateName = "docopt";
        version = "1.1.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0s9rcpmnnivs502q69lc1h1wrwapkq09ikgbfbgqf31idmc5llkz";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static 1.4.0";
          }
          {
            name = "regex";
            packageId = "regex 1.3.1";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "strsim";
            packageId = "strsim 0.9.2";
          }
        ];
        
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.2";
        edition = "2015";
        sha256 = "0yyggfd5yq9hyyp0bd5jj0fgz3rwws42d19ri0znxwwqs3hcy9sm";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "ena" = rec {
        crateName = "ena";
        version = "0.11.0";
        edition = "2015";
        sha256 = "000y5pspw4y3624av33vpscb0klvm9wpyx5vv54wa2350z696v7m";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.4.8";
          }
        ];
        features = {
          "congruence-closure" = [ "petgraph" ];
          "persistent" = [ "dogged" ];
        };
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1lx2s5nk96xx4i3m4zc4ghqgi8kb07dsnyiv8jk2clhax42dxz5a";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log 0.4.8";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex 1.3.1";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1qppmgv4i5jj6vrss91qackqnl0a12h7lnby4l7j5fdy78yxhnvr";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1q97n7dp51j5hndzic9ng2fgn6f3z5ya1992w84l7vypby8n647a";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "fake-simd" = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1vfylvk4va2ivqx85603lyqqp0zk52cgbs4n5nfbbbqx577qm2p8";
        authors = [
          "The Rust-Crypto Project Developers"
        ];
        
      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.1.9";
        edition = "2015";
        sha256 = "0czam11mi80dbyhf4rd4lz0ihcf7vkfchrdcrn45wbs0h40dxm46";
        authors = [
          "bluss"
        ];
        
      };
      "flame" = rec {
        crateName = "flame";
        version = "0.2.2";
        edition = "2015";
        sha256 = "0c5bmhyimzxch3pmh0w3z9n57saasgix4bmbbksr9vp1c5j71hhz";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static 0.2.11";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "thread-id";
            packageId = "thread-id";
          }
        ];
        features = {
          "default" = [ "json" ];
          "json" = [ "serde" "serde_derive" "serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" "json" "serde" "serde_derive" "serde_json" ];
      };
      "flamer" = rec {
        crateName = "flamer";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1b2d7jx80f3p7hqpgdi7wksaiq18k9w23p0cs2sxf7jbx2jx3bgj";
        procMacro = true;
        authors = [
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        dependencies = [
          {
            name = "flame";
            packageId = "flame";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "extra-traits" "full" "fold" "parsing" ];
          }
        ];
        
      };
      "flamescope" = rec {
        crateName = "flamescope";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0dni1pi9qi8g7khjjgvbc3ndk0azxg1cr2rhwixvja2scbp6lgkf";
        authors = [
          "coolreader18 <33094578+coolreader18@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "flame";
            packageId = "flame";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.11";
        edition = "2015";
        sha256 = "10j6bpgpipywmrsxxmp1q48qd9vp1c4fs64y2hv02r48cfxgznia";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            optional = true;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "emscripten")));
          }
        ];
        features = {
          "default" = [ "miniz-sys" ];
          "rust_backend" = [ "miniz_oxide" ];
          "tokio" = [ "tokio-io" "futures" ];
          "zlib" = [ "libz-sys" ];
        };
        resolvedDefaultFeatures = [ "libz-sys" "zlib" ];
      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.12.3";
        edition = "2015";
        sha256 = "1v5jg7djicq34nbiv1dwaki71gkny002wyy9qfn3y0hfmrs053y6";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        
      };
      "gethostname" = rec {
        crateName = "gethostname";
        version = "0.2.0";
        edition = "2018";
        sha256 = "07g0wbx45qrbah6c36mnblya8nday763fn5i835bc7m3l8y2gayl";
        authors = [
          "Sebastian Wiesner <sebastian@swsnr.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!target."windows");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "sysinfoapi" ];
          }
        ];
        
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.3.2";
        edition = "2015";
        sha256 = "0xsdcjiik5j750j67zk42qdnmm4ahirk3gmkmcqgq7qls2jjcl40";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
        };
      };
      "hexf-parse" = rec {
        crateName = "hexf-parse";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1b2h0lvksn8748764x46729ygpz8grack24spin0k29ssmr6yabr";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
        ];
        
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0krwgbf35pd46xvkqg14j070vircsndabahahlv3rwhflpy4q06z";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1wwr29axr92bbk5kbmshqw935kqb32h219q4jhg9ajkcwkxh44m6";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0n2k13b6w4x2x6np2lykh9bj3b3z4hwh2r4cn3z2dgnfq7cng12v";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0zvg2d9qv3avhf3d8ggglh6fdyw8kkwqg3r4622ly5yhxnvnc4jh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.0";
        edition = "2015";
        sha256 = "19ybbvxrdk9yy65rk7f5ad0hcxszkjwph68yzkj3954lnir1bhk7";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
        };
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "lalrpop" = rec {
        crateName = "lalrpop";
        version = "0.16.3";
        edition = "2015";
        crateBin = [];
        sha256 = "0wi5q090fyn1x83i95rw0kxx13nq7hgyzd35csjbq8hbwjz80bjf";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "ascii-canvas";
            packageId = "ascii-canvas";
          }
          {
            name = "atty";
            packageId = "atty";
          }
          {
            name = "bit-set";
            packageId = "bit-set";
          }
          {
            name = "diff";
            packageId = "diff";
          }
          {
            name = "docopt";
            packageId = "docopt";
          }
          {
            name = "ena";
            packageId = "ena";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
          }
          {
            name = "regex";
            packageId = "regex 1.3.1";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.12";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "string_cache";
            packageId = "string_cache";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
        };
      };
      "lalrpop-util" = rec {
        crateName = "lalrpop-util";
        version = "0.16.3";
        edition = "2015";
        sha256 = "1iqjk5md5pn66sc85a3kaq6w3va6ilgdd2009dqgkqfvj227vcik";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        
      };
      "lazy_static 0.2.11" = rec {
        crateName = "lazy_static";
        version = "0.2.11";
        edition = "2015";
        sha256 = "0wxy8vak7jsx6r8gx475pjqpx11p2bfq4wvw6idmqi31mp3k7w3n";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "compiletest" = [ "compiletest_rs" ];
          "spin_no_std" = [ "nightly" "spin" ];
        };
      };
      "lazy_static 1.4.0" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "lexical" = rec {
        crateName = "lexical";
        version = "2.2.2";
        edition = "2015";
        sha256 = "03fibsdk2kqky8k62bw7vvlllskwb34aw6547w56syhq1kk0j3cf";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lexical-core";
            packageId = "lexical-core";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "comprehensive_float_test" = [ "rand/std" "serde/std" "serde_derive" "std" "toml" ];
          "correct" = [ "lexical-core/correct" ];
          "default" = [ "correct" "ryu" "std" ];
          "grisu3" = [ "lexical-core/grisu3" ];
          "radix" = [ "lexical-core/radix" ];
          "rounding" = [ "lexical-core/rounding" ];
          "ryu" = [ "lexical-core/ryu" ];
          "std" = [ "lexical-core/std" ];
          "trim_floats" = [ "lexical-core/trim_floats" ];
          "unchecked_index" = [ "lexical-core/unchecked_index" ];
        };
        resolvedDefaultFeatures = [ "correct" "default" "ryu" "std" ];
      };
      "lexical-core" = rec {
        crateName = "lexical-core";
        version = "0.4.5";
        edition = "2015";
        sha256 = "1lin591h548nw4kn5gm8n8bz6z3dl7g3q24zvym9n97xiy9g648d";type = [ "lib" "staticlib" "cdylib" ];
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            optional = true;
            features = [ "array-sizes-33-128" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ryu";
            packageId = "ryu";
            optional = true;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "correct" = [ "arrayvec" "table" ];
          "default" = [ "correct" "ryu" "std" ];
          "grisu3" = [ "dtoa" ];
        };
        resolvedDefaultFeatures = [ "arrayvec" "correct" "ryu" "std" "table" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.62";
        edition = "2015";
        sha256 = "1fh69kpjg8hqff36kdczx7sax98gk4qs4ws1dwvjz0rgip0d5z1l";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libz-sys" = rec {
        crateName = "libz-sys";
        version = "1.0.25";
        edition = "2015";
        sha256 = "1gjycyl2283525abks98bhxa4r259m617xfm5z52p3p3c8ry9d9f";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
        };
      };
      "log 0.3.9" = rec {
        crateName = "log";
        version = "0.3.9";
        edition = "2015";
        sha256 = "0jq23hhn5h35k7pa8r7wqnsywji6x3wn1q5q7lif5q536if8v7p1";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.4.8";
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "max_level_debug" = [ "log/max_level_debug" ];
          "max_level_error" = [ "log/max_level_error" ];
          "max_level_info" = [ "log/max_level_info" ];
          "max_level_off" = [ "log/max_level_off" ];
          "max_level_trace" = [ "log/max_level_trace" ];
          "max_level_warn" = [ "log/max_level_warn" ];
          "release_max_level_debug" = [ "log/release_max_level_debug" ];
          "release_max_level_error" = [ "log/release_max_level_error" ];
          "release_max_level_info" = [ "log/release_max_level_info" ];
          "release_max_level_off" = [ "log/release_max_level_off" ];
          "release_max_level_trace" = [ "log/release_max_level_trace" ];
          "release_max_level_warn" = [ "log/release_max_level_warn" ];
          "use_std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "log 0.4.8" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "maplit" = rec {
        crateName = "maplit";
        version = "1.0.2";
        edition = "2015";
        sha256 = "07b5kjnhrrmfhgqm9wprjw8adx6i225lqp49gasgqg74lahnabiy";
        authors = [
          "bluss"
        ];
        
      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "020axl4q7rk9vz90phs7f8jas4imxal9y9kxl4z4v7a6719mrz3z";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        
      };
      "md-5" = rec {
        crateName = "md-5";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1j5rfxy2p76xf5f1lgaw85xla0b1bbv2lknvdhv1j0ibmzfg72m1";
        libName = "md5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "md5-asm" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.2.1";
        edition = "2015";
        sha256 = "13j6ji9x9ydpi9grbss106gqqr3xn3bcfp28aydqfa4751qrfmw8";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.3.2";
        edition = "2018";
        sha256 = "041s41l5w7z8pkp93pdzn8rngxr93q4wxp034pr0cvc7bgway23i";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
        ];
        
      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.3";
        edition = "2015";
        sha256 = "0c1br326qa0rrzxrn2rd5ah7xaprig2i9r4rwsx06vnvc1f003zl";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.14.1";
        edition = "2015";
        sha256 = "1kmxdlmvnmq8cfpmr3g6wk37rwi2ybdvp1z6z3831m1p23p2nwkc";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (target."os" == "dragonfly");
          }
        ];
        
      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.13";
        edition = "2015";
        sha256 = "0if9ifn6rvar5jirx4b3qh4sl5kjkmcifycvzhxa9j3crkfng5ig";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.2.3";
        edition = "2015";
        sha256 = "06hsaiahwbx98xbph5k9086r4hd2m2zzi6sx4v5k9wr4vm6g7hzr";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.2.3";
        edition = "2015";
        sha256 = "1z6zjdzx1g1hj4y132ddy83d3p3zvw06igbf59npxxrzzcqwzc7w";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.41";
        edition = "2015";
        sha256 = "02dwjjpfbi16c71fq689s4sw3ih52cvfzr5z5gs6qpr5z0g58pmq";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.39";
        edition = "2015";
        sha256 = "0bhk2qbr3261r6zvfc58lz4spfqjhvdripxgz5mks5rd85r55gbn";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.2.2";
        edition = "2015";
        sha256 = "0m5l76rdzzq98cfhnbjsxfngz6w75pal5mnfflpxqapysmw5527j";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bigint-std" = [ "bigint" "num-bigint/std" ];
          "default" = [ "bigint-std" "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "bigint" "bigint-std" "default" "num-bigint" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0clvrm34rrqc8p6gq5ps5fcgws3kgq5knh7nlqxf2ayarwks9abb";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.10.1";
        edition = "2015";
        sha256 = "0wrj3zvj6h3q26sqj9zxpd59frjb54n7jhjwf307clq31ic47vxw";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "ordermap" = rec {
        crateName = "ordermap";
        version = "0.3.5";
        edition = "2015";
        sha256 = "0qr0a50l0qakbjcck93qdayd0xl8gzpp42x0n7b75cs4ybsx6vm8";
        authors = [
          "bluss"
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.4.13";
        edition = "2015";
        sha256 = "0kyfmca854s54jk26g2x1kjb04c3k7cjilaxyr0if8lhxv8mjdlw";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
          }
          {
            name = "ordermap";
            packageId = "ordermap";
            optional = true;
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" ];
          "graphmap" = [ "ordermap" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "unstable" = [ "generate" ];
        };
        resolvedDefaultFeatures = [ "default" "graphmap" "ordermap" "stable_graph" ];
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.7.24";
        edition = "2015";
        sha256 = "0qi62gxk3x3whrmw5c4i71406icqk11qmpgln438p6qm7k4lqdh9";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "rand";
            packageId = "rand 0.6.5";
          }
        ];
        
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.7.24";
        edition = "2015";
        sha256 = "18371fla0vsj7d6d5rlfb747xbr2in11ar9vgv5qna72bnhp2kr3";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
        };
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.16";
        edition = "2015";
        sha256 = "1slikl3p0qbxy37crxynz7zznaf5gzl7ag9w0fyp17zlj06kgmbj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];
        
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.9";
        edition = "2015";
        sha256 = "1j11n87chsas9w54nyj3xqa2l3rwfxnlw6vsqpfw3mzzj8fz7276";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.3";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.5";
          }
        ];
        
      };
      "proc-macro2 0.4.30" = rec {
        crateName = "proc-macro2";
        version = "0.4.30";
        edition = "2015";
        sha256 = "0nd71fl24sys066jrha6j7i34nfkjv44yzw8yww9742wmc8j0gfg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.3" = rec {
        crateName = "proc-macro2";
        version = "1.0.3";
        edition = "2018";
        sha256 = "1s4pnvpsnrwr2d2kd8mh3yq5rcqvrdmacs2fj95zacdkz6lq72p9";
        libName = "proc_macro2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "pwd" = rec {
        crateName = "pwd";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1986a618ginghg9w485vvbncs1yi9rqiw990r92f2276xj5jvlsx";
        authors = [
          "Paul Woolcock <paul@woolcock.us>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "python3-sys" = rec {
        crateName = "python3-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0i04vizrnr33l6m2x3xnqirgczcxmjr6ql19whvxcgw37z2amr31";
        authors = [
          "Daniel Grunwald <daniel@danielgrunwald.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "regex";
            packageId = "regex 1.3.1";
          }
        ];
        features = {
          "default" = [ "python-3" ];
        };
        resolvedDefaultFeatures = [ "default" "python-3" ];
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.2";
        edition = "2015";
        sha256 = "1w6kgwwv7p7zr0yyg5rb315lkk24bimywklwx7fsvsbwi10bjx4j";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        
      };
      "quote 0.6.13" = rec {
        crateName = "quote";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1qgqq48jymp5h4y082aanf25hrw6bpb678xh3zw993qfhxmkpqkc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.2" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.5.6" = rec {
        crateName = "rand";
        version = "0.5.6";
        edition = "2015";
        sha256 = "1fdcgja9167hlzkf4g5daqwp498lwiyq7aqm05whklpbsdyc8666";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cloudabi";
            packageId = "cloudabi";
            optional = true;
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            optional = true;
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            optional = true;
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "i128_support" ];
          "serde1" = [ "serde" "serde_derive" "rand_core/serde1" ];
          "std" = [ "rand_core/std" "alloc" "libc" "winapi" "cloudabi" "fuchsia-cprng" ];
        };
        resolvedDefaultFeatures = [ "alloc" "cloudabi" "default" "fuchsia-cprng" "libc" "std" "winapi" ];
      };
      "rand 0.6.5" = rec {
        crateName = "rand";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1jl4449jcl4wgmzld6ffwqj5gwxrp8zvx8w573g1z368qg6xlwbd";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
          {
            name = "rand_isaac";
            packageId = "rand_isaac";
          }
          {
            name = "rand_jitter";
            packageId = "rand_jitter";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
            optional = true;
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "simd_support" ];
          "serde1" = [ "rand_core/serde1" "rand_isaac/serde1" "rand_xorshift/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "alloc" "rand_os" "rand_jitter/std" ];
          "stdweb" = [ "rand_os/stdweb" ];
          "wasm-bindgen" = [ "rand_os/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "rand_os" "std" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1vxwyzs4fy1ffjc8l00fsyygpiss135irjf7nyxgq2v0lqf3lvam";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rand_core 0.4.2" = rec {
        crateName = "rand_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1p09ynysrq1vcdlmcqnapq4qakl2yd1ng3kxh3qscpx09k2a6cww";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1i0vl8q5ddvvy0x8hf1zxny393miyzxkwqnw31ifg6p0gdy6fh3v";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "rand_isaac" = rec {
        crateName = "rand_isaac";
        version = "0.1.1";
        edition = "2015";
        sha256 = "027flpjr4znx2csxk7gxb7vrf9c7y5mydmvg5az2afgisp4rgnfy";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" "rand_core/serde1" ];
        };
      };
      "rand_jitter" = rec {
        crateName = "rand_jitter";
        version = "0.1.4";
        edition = "2015";
        sha256 = "16z387y46bfz3csc42zxbjq89vcr1axqacncvv8qhyy93p4xarhi";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "profileapi" ];
          }
        ];
        features = {
          "std" = [ "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_os" = rec {
        crateName = "rand_os";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0wahppm0s64gkr2vmhcgwc0lij37in1lgfxg5rbgqlz0l5vgcxbv";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
            features = [ "std" ];
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "winnt" ];
          }
        ];
        
      };
      "rand_pcg" = rec {
        crateName = "rand_pcg";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0i0bdla18a8x4jn1w0fxsbs3jg7ajllz6azmch1zw33r06dv1ydb";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
        };
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0p2x8nr00hricpi2m6ca5vysiha7ybnghz79yqhhx6sl4gkfkxyb";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
        };
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0vdn688q9wg997b1x5abx2gf7406rn1lvd62ypcgh1gj7g5dpkjf";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
          }
          {
            name = "rust-argon2";
            packageId = "rust-argon2";
          }
        ];
        
      };
      "regex 0.2.11" = rec {
        crateName = "regex";
        version = "0.2.11";
        edition = "2015";
        sha256 = "1163ir1k5zjspirfjl4wqbviwrxlhmfwy95xxb69y4irkv4snack";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick 0.6.10";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.5.6";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "utf8-ranges";
            packageId = "utf8-ranges";
          }
        ];
        features = {
          "unstable" = [ "pattern" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "regex 1.3.1" = rec {
        crateName = "regex";
        version = "1.3.1";
        edition = "2015";
        sha256 = "1g8wp160vzxgralyd4imydd0xsxq6yh25zhs229z1s6w7g9hn8nw";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick 0.7.6";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.12";
            usesDefaultFeatures = false;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.5.6" = rec {
        crateName = "regex-syntax";
        version = "0.5.6";
        edition = "2015";
        sha256 = "19zp25jr3dhmclg3qqjk3bh1yrn7bqi05zgr5v52szv3l97plw3x";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "ucd-util";
            packageId = "ucd-util";
          }
        ];
        
      };
      "regex-syntax 0.6.12" = rec {
        crateName = "regex-syntax";
        version = "0.6.12";
        edition = "2015";
        sha256 = "05pplicvzvgkb2wb4i98p2mrpgc8gws6vdl8xlpyyr6f3h6y59qi";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "rust-argon2" = rec {
        crateName = "rust-argon2";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1krjkmyfn37hy7sfs6lqia0fsvw130nn1z2850glsjcva7pym92c";
        libName = "argon2";
        authors = [
          "Martijn Rijkeboer <mrr@sru-systems.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.6.6";
          }
        ];
        
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "rustc_version_runtime" = rec {
        crateName = "rustc_version_runtime";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0i8ii76a8yj2g5lw1p34wihqq5x3ql7f3dk9dwq1ywypzbbyrs3d";
        authors = [
          "Sebastian Waisbrot <seppo0010@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "rustpython" = rec {
        crateName = "rustpython";
        version = "0.1.1";
        edition = "2018";
        crateBin = [
          { name = "rustpython"; path = "src/main.rs"; }
        ];
        src = pkgs.callPackage ./tarball-v0.1.1.nix {};
        authors = [
          "RustPython Team"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "flame";
            packageId = "flame";
            optional = true;
          }
          {
            name = "flamescope";
            packageId = "flamescope";
            optional = true;
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "rustpython-compiler";
            packageId = "rustpython-compiler";
          }
          {
            name = "rustpython-parser";
            packageId = "rustpython-parser";
          }
          {
            name = "rustpython-vm";
            packageId = "rustpython-vm";
          }
          {
            name = "rustyline";
            packageId = "rustyline";
          }
        ];
        devDependencies = [
          {
            name = "cpython";
            packageId = "cpython";
          }
        ];
        features = {
          "default" = [ "rustpython-vm/use-proc-macro-hack" ];
          "flame-it" = [ "rustpython-vm/flame-it" "flame" "flamescope" ];
          "freeze-stdlib" = [ "rustpython-vm/freeze-stdlib" ];
        };
        resolvedDefaultFeatures = [ "default" "flame" "flame-it" "flamescope" "freeze-stdlib" ];
      };
      "rustpython-bytecode" = rec {
        crateName = "rustpython-bytecode";
        version = "0.1.1";
        edition = "2018";
        sha256 = "04rx0x1hk26rbvdx3ic8rsi2vcq6jww47lxzzvk1aizzw537cy6h";
        authors = [
          "RustPython Team"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            features = [ "serde" ];
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        
      };
      "rustpython-compiler" = rec {
        crateName = "rustpython-compiler";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0sxmcsvdqg9wk7xff5rx4cz8ygvdwcpyk0zvixna7igwmjw33cza";
        authors = [
          "RustPython Team"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log 0.3.9";
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            features = [ "serde" ];
          }
          {
            name = "rustpython-bytecode";
            packageId = "rustpython-bytecode";
          }
          {
            name = "rustpython-parser";
            packageId = "rustpython-parser";
          }
        ];
        
      };
      "rustpython-derive" = rec {
        crateName = "rustpython-derive";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0sv73vppzk6izi2zyp3s3rgp430z0b0axjdkq65k9xqyh7qbbw8g";
        procMacro = true;
        authors = [
          "RustPython Team"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "rustpython-bytecode";
            packageId = "rustpython-bytecode";
          }
          {
            name = "rustpython-compiler";
            packageId = "rustpython-compiler";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "proc-macro-hack" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro-hack" ];
      };
      "rustpython-parser" = rec {
        crateName = "rustpython-parser";
        version = "0.1.1";
        edition = "2018";
        sha256 = "05mrp6p2v289vrp78nkyvwgcqb821bx0hmdn42k7fdrq34iigyyc";
        authors = [
          "RustPython Team"
        ];
        dependencies = [
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "regex";
            packageId = "regex 0.2.11";
          }
          {
            name = "unic-emoji-char";
            packageId = "unic-emoji-char";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
          {
            name = "wtf8";
            packageId = "wtf8";
          }
        ];
        buildDependencies = [
          {
            name = "lalrpop";
            packageId = "lalrpop";
          }
        ];
        
      };
      "rustpython-vm" = rec {
        crateName = "rustpython-vm";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0il9jh2ar5yqafk24nmh6jqc5ldphyh21mxnykl464am7vwybcih";
        authors = [
          "RustPython Team"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "arr_macro";
            packageId = "arr_macro";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "blake2";
            packageId = "blake2";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "caseless";
            packageId = "caseless";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "flame";
            packageId = "flame";
            optional = true;
          }
          {
            name = "flamer";
            packageId = "flamer";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."arch" == "wasm32"));
            features = [ "zlib" ];
          }
          {
            name = "gethostname";
            packageId = "gethostname";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hexf-parse";
            packageId = "hexf-parse";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static 1.4.0";
          }
          {
            name = "lexical";
            packageId = "lexical";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "log";
            packageId = "log 0.3.9";
          }
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            features = [ "serde" ];
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            features = [ "serde" ];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-iter";
            packageId = "num-iter";
          }
          {
            name = "num-rational";
            packageId = "num-rational";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "pwd";
            packageId = "pwd";
            target = { target, features }: (target."unix" && (!((target."os" == "android") || (target."os" == "redox"))));
          }
          {
            name = "rand";
            packageId = "rand 0.5.6";
          }
          {
            name = "regex";
            packageId = "regex 1.3.1";
          }
          {
            name = "rustc_version_runtime";
            packageId = "rustc_version_runtime";
          }
          {
            name = "rustpython-bytecode";
            packageId = "rustpython-bytecode";
          }
          {
            name = "rustpython-compiler";
            packageId = "rustpython-compiler";
            optional = true;
          }
          {
            name = "rustpython-derive";
            packageId = "rustpython-derive";
          }
          {
            name = "rustpython-parser";
            packageId = "rustpython-parser";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha-1";
            packageId = "sha-1";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "statrs";
            packageId = "statrs";
          }
          {
            name = "subprocess";
            packageId = "subprocess";
            target = { target, features }: (!(target."arch" == "wasm32"));
          }
          {
            name = "unic";
            packageId = "unic";
          }
          {
            name = "unicode-casing";
            packageId = "unicode-casing";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
          {
            name = "unicode_categories";
            packageId = "unicode_categories";
          }
          {
            name = "unicode_names2";
            packageId = "unicode_names2";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "wtf8";
            packageId = "wtf8";
          }
        ];
        features = {
          "default" = [ "rustpython-parser" "rustpython-compiler" "use-proc-macro-hack" ];
          "flame-it" = [ "flame" "flamer" ];
          "use-proc-macro-hack" = [ "proc-macro-hack" "rustpython-derive/proc-macro-hack" ];
        };
        resolvedDefaultFeatures = [ "default" "flame" "flame-it" "flamer" "freeze-stdlib" "proc-macro-hack" "rustpython-compiler" "rustpython-parser" "use-proc-macro-hack" ];
      };
      "rustyline" = rec {
        crateName = "rustyline";
        version = "5.0.1";
        edition = "2018";
        sha256 = "08mfz4mimjp22w53n2pnydayl4w368p06kr88bvw3ll6jlycmm5p";
        authors = [
          "Katsu Kawakami <kkawa1570@gmail.com>"
        ];
        dependencies = [
          {
            name = "dirs";
            packageId = "dirs";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "nix";
            packageId = "nix";
            target = { target, features }: target."unix";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "handleapi" "minwindef" "processenv" "winbase" "wincon" "winuser" ];
          }
        ];
        features = {
          "default" = [ "with-dirs" ];
          "with-dirs" = [ "dirs" ];
        };
        resolvedDefaultFeatures = [ "default" "dirs" "with-dirs" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.0";
        edition = "2015";
        sha256 = "15r9z2wzgbj04pks4jz7y6wif5xqhf1wqkl2nd7qrvn08ys68969";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.100";
        edition = "2015";
        sha256 = "0nnrl6b053v0qpky46cj6ikcq7d5iys76406y87p64xj0s2kwizl";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.100";
        edition = "2015";
        sha256 = "1fqdf5rnbhxsdx13cy6lzp88lxs0r5mx5462kxw7s59ywkyi1r0i";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.3";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.5";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.40";
        edition = "2015";
        sha256 = "010pa89zx07aqx1cwgw2a603wcp3q5n2iy0k71ppqbr8kwi4j705";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sha-1" = rec {
        crateName = "sha-1";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0s6fdy5wp3x4h2z4fcl2d9vjvrpzr87v4h49r51xcq8nm4qj35i3";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0gal773gz8gkpa9rndc917z6rl9kzd8q8gapaxv437s61vyqnkbv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1kryhpjafv3k1x9fj13psrqhrvkjigswm564kfapqfifg87bq9nx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.2.3";
        edition = "2015";
        sha256 = "1b53m53l24lyhr505lwqzrpjyq5qfnic71mynrcfvm43rybf938b";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "0.6.10";
        edition = "2015";
        sha256 = "1dyl43rgzny79jjpgzi07y0ly2ggx1xwsn64csxj0j91bsf6lq5b";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1lw33i89888yb3x29c6dv4mrkg3534n0rlg3r7qzh4p58xmv6gkz";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "statrs" = rec {
        crateName = "statrs";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1s454spijvbyls3bd6l72lpdliw6pa0nzhmg7wmxndaysp42l40h";
        authors = [
          "Michael Ma"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.5.6";
          }
        ];
        
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.7.3";
        edition = "2015";
        sha256 = "08sly9s92l0g0ai1iyj9pawl05xbwm4m8kl3zqkv2wkijw4h3mr5";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static 1.4.0";
          }
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "string_cache_shared";
            packageId = "string_cache_shared";
          }
        ];
        buildDependencies = [
          {
            name = "string_cache_codegen";
            packageId = "string_cache_codegen";
          }
        ];
        features = {
        };
      };
      "string_cache_codegen" = rec {
        crateName = "string_cache_codegen";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1npl9zq9cd16d7irksblgk7l7g6qknnzsmr12hrhky2fcpp1xshy";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "string_cache_shared";
            packageId = "string_cache_shared";
          }
        ];
        
      };
      "string_cache_shared" = rec {
        crateName = "string_cache_shared";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1z7dpdix1m42x6ddshdcpjf91ml9mhvnskmiv5kd8hcpq0dlv25i";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        
      };
      "strsim 0.8.0" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "strsim 0.9.2" = rec {
        crateName = "strsim";
        version = "0.9.2";
        edition = "2015";
        sha256 = "1xphwhf86yxxmcpvm4mikj8ls41f6nf7gqyjm98b74mfk81h6b03";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "subprocess" = rec {
        crateName = "subprocess";
        version = "0.1.18";
        edition = "2015";
        crateBin = [];
        sha256 = "001wzxqyvssfphi7g943asll20xrsbbafyilklrp7nn0y100zz18";
        authors = [
          "Hrvoje Nikšić <hniksic@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils 0.5.0";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "handleapi" "namedpipeapi" "processenv" "synchapi" "winerror" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "subtle" = rec {
        crateName = "subtle";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1vm80mxbwfj334izwm8x8l65v1xl9hr0kwrg36r1rq565fkaarrd";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
      };
      "syn 0.15.44" = rec {
        crateName = "syn";
        version = "0.15.44";
        edition = "2015";
        sha256 = "1id5g6x6zihv3j7hwrw3m1jp636bg8dpi671r7zy3jvpkavb794w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 1.0.5" = rec {
        crateName = "syn";
        version = "1.0.5";
        edition = "2018";
        sha256 = "1gw03w7lzrlqmp2vislcybikgl5wkhrqi6sy70w93xss2abhx1b6";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.3";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0grirdkgh2wl4hf9a3nbiazpgccxgq54kn52ms0xrr6njvgkwd82";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
        };
      };
      "term" = rec {
        crateName = "term";
        version = "0.4.6";
        edition = "2015";
        sha256 = "1wbh8ngqkqr3f6wz902yplf60bd5yapnckvrkgmzp5nffi7n8qzs";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.0.5";
        edition = "2015";
        sha256 = "0vjfsn1a8zvqhnrbygrz1id6yckwv1dncw3w4zj65qdx0f00kmln";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "wincolor";
            packageId = "wincolor";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thread-id" = rec {
        crateName = "thread-id";
        version = "3.3.0";
        edition = "2015";
        sha256 = "1h90v19fjz3x9b25ywh68z5yf2zsmm6h5zb4rl302ckbsp4z9yy7";
        authors = [
          "Ruud van Asseldonk <dev@veniogames.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "processthreadsapi" ];
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "06rzik99p8c5js8238yhc8rk6np543ylb1dy9nrw5v80j0r3xdf6";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static 1.4.0";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0vsbvsz0ryxb35dy9j4anxvy8zlaplmjmi0a4z4l64bc135cz3fv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.11.2";
        edition = "2015";
        sha256 = "1ybmfpp7j37zmaw50w35wiwx66lbpr0yp1312c0i333b5pz869vd";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
        };
      };
      "ucd-util" = rec {
        crateName = "ucd-util";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0x088q5z0m09a2jqcfgsnq955y8syn1mgn35cl78qinkxm4kp6zs";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        
      };
      "unic" = rec {
        crateName = "unic";
        version = "0.9.0";
        edition = "2018";
        sha256 = "11wa585m7g7bq03nxm8wl7wjl5js2pl8cim48f96mp4lwbrlh5z3";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-bidi";
            packageId = "unic-bidi";
          }
          {
            name = "unic-char";
            packageId = "unic-char";
            features = [ "std" ];
          }
          {
            name = "unic-common";
            packageId = "unic-common";
          }
          {
            name = "unic-emoji";
            packageId = "unic-emoji";
          }
          {
            name = "unic-idna";
            packageId = "unic-idna";
          }
          {
            name = "unic-normal";
            packageId = "unic-normal";
          }
          {
            name = "unic-segment";
            packageId = "unic-segment";
          }
          {
            name = "unic-ucd";
            packageId = "unic-ucd";
          }
        ];
        features = {
          "bench_it" = [ "unic-bidi/bench_it" ];
          "serde" = [ "unic-bidi/serde" ];
          "unstable" = [ "unic-common/unstable" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unic-bidi" = rec {
        crateName = "unic-bidi";
        version = "0.9.0";
        edition = "2018";
        sha256 = "02gcd3a0ir3lh3vkx7s4y60ifmz3dx5ww7gicq30b0kazdcvfmhk";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unic-ucd-bidi";
            packageId = "unic-ucd-bidi";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unic-char" = rec {
        crateName = "unic-char";
        version = "0.9.0";
        edition = "2018";
        sha256 = "02mc1c15prvmdkihnp90cdig20068yf5swmsi3q0fh8kpmwxy9dg";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-basics";
            packageId = "unic-char-basics";
          }
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
        ];
        features = {
          "std" = [ "unic-char-range/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unic-char-basics" = rec {
        crateName = "unic-char-basics";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0jvcl0gqg9glmwvs9wgy5kznb5853lzb3hd04n931533phwx5r90";
        authors = [
          "The UNIC Project Developers"
        ];
        
      };
      "unic-char-property" = rec {
        crateName = "unic-char-property";
        version = "0.9.0";
        edition = "2018";
        sha256 = "08g21dn3wwix3ycfl0vrbahn0835nv2q3swm8wms0vwvgm07mid8";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
        ];
        
      };
      "unic-char-range" = rec {
        crateName = "unic-char-range";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1g0z7iwvjhqspi6194zsff8vy6i3921hpqcrp3v1813hbwnh5603";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
          "unstable" = [ "exact-size-is-empty" "fused" "trusted-len" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unic-common" = rec {
        crateName = "unic-common";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1g1mm954m0zr497dl4kx3vr09yaly290zs33bbl4wrbaba1gzmw0";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unic-emoji" = rec {
        crateName = "unic-emoji";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ywb03m81vwf0y85x79ad63c7j0sdyff4w4yh45x4slnywr3y6bl";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-emoji-char";
            packageId = "unic-emoji-char";
          }
        ];
        
      };
      "unic-emoji-char" = rec {
        crateName = "unic-emoji-char";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0ka9fr7s6lv0z43r9xphg9injn35pfxf9g9q18ki0wl9d0g241qb";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-idna" = rec {
        crateName = "unic-idna";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0bd64dcak89va1697fyn4bsgi4la8mk9fmzd5hn4s2gj4vsrq7k2";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unic-idna-mapping";
            packageId = "unic-idna-mapping";
          }
          {
            name = "unic-idna-punycode";
            packageId = "unic-idna-punycode";
          }
          {
            name = "unic-normal";
            packageId = "unic-normal";
          }
          {
            name = "unic-ucd-bidi";
            packageId = "unic-ucd-bidi";
          }
          {
            name = "unic-ucd-normal";
            packageId = "unic-ucd-normal";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-idna-mapping" = rec {
        crateName = "unic-idna-mapping";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0hqkma2hbj8gk3nfzrgnr4kz3cgg734xp82hg8s3f59kwpa0zrsd";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-idna-punycode" = rec {
        crateName = "unic-idna-punycode";
        version = "0.9.0";
        edition = "2018";
        sha256 = "12igkz48n999gn0sp1h4gch1b2qbcc6kr0sd2icw47wzpzfaxzh6";
        authors = [
          "The UNIC Project Developers"
        ];
        
      };
      "unic-normal" = rec {
        crateName = "unic-normal";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0qmsdf7b902mmaslhwww0hzmzqn26mzh7sraphl4dac96p9n97gh";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-normal";
            packageId = "unic-ucd-normal";
          }
        ];
        
      };
      "unic-segment" = rec {
        crateName = "unic-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "08wgz2q6vrdvmbd23kf9pbg8cyzm5q8hq9spc4blzy2ppqk5vvg4";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-segment";
            packageId = "unic-ucd-segment";
          }
        ];
        
      };
      "unic-ucd" = rec {
        crateName = "unic-ucd";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1z8f4ilpc4zq6hsgxxymhq76v0n7qcfp7bi09982f48yc3vihnv2";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-age";
            packageId = "unic-ucd-age";
          }
          {
            name = "unic-ucd-bidi";
            packageId = "unic-ucd-bidi";
          }
          {
            name = "unic-ucd-block";
            packageId = "unic-ucd-block";
          }
          {
            name = "unic-ucd-case";
            packageId = "unic-ucd-case";
          }
          {
            name = "unic-ucd-category";
            packageId = "unic-ucd-category";
          }
          {
            name = "unic-ucd-common";
            packageId = "unic-ucd-common";
          }
          {
            name = "unic-ucd-hangul";
            packageId = "unic-ucd-hangul";
          }
          {
            name = "unic-ucd-ident";
            packageId = "unic-ucd-ident";
          }
          {
            name = "unic-ucd-name";
            packageId = "unic-ucd-name";
          }
          {
            name = "unic-ucd-name_aliases";
            packageId = "unic-ucd-name_aliases";
          }
          {
            name = "unic-ucd-normal";
            packageId = "unic-ucd-normal";
            features = [ "unic-ucd-category" ];
          }
          {
            name = "unic-ucd-segment";
            packageId = "unic-ucd-segment";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-age" = rec {
        crateName = "unic-ucd-age";
        version = "0.9.0";
        edition = "2018";
        sha256 = "073727rlfabzhw8m2k7fj8rjy3inrm7w5wkaviqvhimgf7zgv33c";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-bidi" = rec {
        crateName = "unic-ucd-bidi";
        version = "0.9.0";
        edition = "2018";
        sha256 = "131xnlgv76n2jbapgf3254svyc5llv54ikh9h8glwj122asnimfi";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-block" = rec {
        crateName = "unic-ucd-block";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1mzinqvb5qfjz2bmwp56264vd8bzdskaag05l4jm7lpcszr1cakb";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-case" = rec {
        crateName = "unic-ucd-case";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1lx6vrgvmamzd54zldyq24p8hz6s5d103vmycv7wdfkrd8jdd61x";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-category" = rec {
        crateName = "unic-ucd-category";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1h4ixzplc2s441vc8mc4zxliw6qfqh1ziaiv8pa1pzpwyn8lb38v";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-common" = rec {
        crateName = "unic-ucd-common";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1bglvzn6rs01v0d29898vg2y3v3cgj3h1gsrbjp1mypa1f8qpdz9";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-hangul" = rec {
        crateName = "unic-ucd-hangul";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0m001jjck7j34hsf6kw9aidzapms9hi175yv7r9f244hw68cc7gb";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-ident" = rec {
        crateName = "unic-ucd-ident";
        version = "0.9.0";
        edition = "2018";
        sha256 = "11v9mfyl9rqnvd9a8hgmbgnzyxd3lcx0dkv7klhskjl10dya6c72";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        features = {
          "default" = [ "xid" ];
        };
        resolvedDefaultFeatures = [ "default" "xid" ];
      };
      "unic-ucd-name" = rec {
        crateName = "unic-ucd-name";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0bj91ydrmhmr6zy4yxsb8f7b617iq5hbywqpvj4i0lxj8mdcb3ww";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-ucd-hangul";
            packageId = "unic-ucd-hangul";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-name_aliases" = rec {
        crateName = "unic-ucd-name_aliases";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0vx4qvycz9s5wm197v4091z4q87i0pfn6yi4pacpc2234qhp8xkb";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-normal" = rec {
        crateName = "unic-ucd-normal";
        version = "0.9.0";
        edition = "2018";
        sha256 = "044laqqf09xqv4gl27f328a2f780gkzabpar72qj4b90p1rxibl6";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-category";
            packageId = "unic-ucd-category";
            optional = true;
          }
          {
            name = "unic-ucd-hangul";
            packageId = "unic-ucd-hangul";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        devDependencies = [
          {
            name = "unic-ucd-category";
            packageId = "unic-ucd-category";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "unic-ucd-category" ];
      };
      "unic-ucd-segment" = rec {
        crateName = "unic-ucd-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0027lczcg0r401g6fnzm2bq9fxhgxvri1nlryhhv8192lqic2y90";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];
        
      };
      "unic-ucd-version" = rec {
        crateName = "unic-ucd-version";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i5hnzpfnxkp4ijfk8kvhpvj84bij575ybqx1b6hyigy6wi2zgcn";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-common";
            packageId = "unic-common";
          }
        ];
        
      };
      "unicode-casing" = rec {
        crateName = "unicode-casing";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0mkds4f59qaarwawl09hjx009r71r1x2gylkxfpvv61amzk5jgv2";
        authors = [
          "Joey Hain <jmhain@protonmail.com>"
        ];
        
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.8";
        edition = "2015";
        sha256 = "09i49va90rvia1agvgni4gicnqv50y5zy1naw8mr8bcqifh3j4ql";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1a9jqg7rb1yq6w2xc9jgxcs111yk5vxm9afjfvykfnrmzk6z8rqr";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.6";
        edition = "2015";
        sha256 = "082f9hv1r3gcd1xl33whjhrm18p0w9i77zhhhkiccb5r47adn1vh";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.0" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode_categories" = rec {
        crateName = "unicode_categories";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0kp1d7fryxxm7hqywbk88yb9d1avsam9sg76xh36k5qx2arj9v1r";
        authors = [
          "Sean Gillespie <sean@swgillespie.me>"
        ];
        
      };
      "unicode_names2" = rec {
        crateName = "unicode_names2";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1ybxa0yjw4vkcpm3gycyyzcvqqms62yldhwc93wh0wld1kdcbihd";
        authors = [
          "Huon Wilson <dbau.pp@gmail.com>"
          "Kang Seonghoon <public+rust@mearie.org>"
          "Valentin Lorentz <progval+git@progval.net>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "utf8-ranges" = rec {
        crateName = "utf8-ranges";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1fpc32znar5v02nwsw7icl41jzzzzhy0si6ngqjylzrbxxpi3bml";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        
      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0zamsj2986shm4x9zncjf2m5qy9scaw7qnxw4f89b2afpg6a8wl7";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
        ];
        
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.7";
        edition = "2015";
        sha256 = "15dzk1b96q946v9aisbd1bbhi33n93wvgziwh1shmscn1xflbp9k";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "06n8hw4hlbcz328a3gbpvmy0ma46vg1lc0r5wf55900szf3qdiq5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.50";
        edition = "2018";
        sha256 = "1z5f5x7jibp4vz3hs8185vpy8rslirl6q4kvnv197k8nicqcmpfw";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.50";
        edition = "2018";
        sha256 = "1l7xzb4nq5bjfi0v5g8pmrc9n6r7i4cgsq4r773fbiszicrdj1gq";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static 1.4.0";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.3";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.5";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.50";
        edition = "2018";
        sha256 = "1s9r8m1wmy7785c5xc1ny5sgs7pb335zc88nj9izraw2lh0q5y1z";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.50";
        edition = "2018";
        sha256 = "03mv8pif4qaz2w673n2lk7gbfrrlkz7wh06gdza7g7yvxj4kshva";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.3";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.5";
            features = [ "visit" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.50";
        edition = "2018";
        sha256 = "0z826ky62159jrgn0dpbnmdsjigx8m002pn1138zikbh6nyc27yl";
        authors = [
          "The wasm-bindgen Developers"
        ];
        
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.8" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "knownfolders" "minwinbase" "minwindef" "namedpipeapi" "ntdef" "ntsecapi" "objbase" "processenv" "processthreadsapi" "profileapi" "shlobj" "std" "synchapi" "sysinfoapi" "timezoneapi" "winbase" "wincon" "winerror" "winnt" "winuser" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1j839dc6y8vszvrsb7yk0qvs0w6asnahxzbyans37vnsw6vbls3i";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "wincolor" = rec {
        crateName = "wincolor";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1agaf3hcav113i86912ajnw6jxcy4rvkrgyf8gdj8kc031mh3xcn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "minwindef" "wincon" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
          }
        ];
        
      };
      "wtf8" = rec {
        crateName = "wtf8";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0mkrjy25payinns0sjm9n3zcjz0jnlf37ddjis54i733hsd31ffn";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
