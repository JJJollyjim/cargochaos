
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/libp2p/v0.18.0.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "libp2p";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "libp2p" = rec {
      packageId = "libp2p";
      build = internal.buildRustCrateWithFeatures {
        packageId = "libp2p";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "adler32" = rec {
        crateName = "adler32";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1hnan4fgmnidgn2k84hh2i67c3wp2c5iwd5hs61yi7gwwx1p6bjx";
        authors = [
          "Remi Rampin <remirampin@gmail.com>"
        ];
        
      };
      "aes-ctr" = rec {
        crateName = "aes-ctr";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1vnib0h0ala3dg07iks60vwi13jgar33j3wc3l6sxgm3ir2v1rfj";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aes-soft";
            packageId = "aes-soft";
            target = { target, features }: (!((target."feature" == "aes") && (target."feature" == "sse2") && (target."feature" == "ssse3") && ((target."arch" == "x86_64") || (target."arch" == "x86"))));
          }
          {
            name = "aesni";
            packageId = "aesni";
            target = { target, features }: ((target."feature" == "aes") && (target."feature" == "sse2") && (target."feature" == "ssse3") && ((target."arch" == "x86_64") || (target."arch" == "x86")));
          }
          {
            name = "ctr";
            packageId = "ctr";
            target = { target, features }: (!((target."feature" == "aes") && (target."feature" == "sse2") && (target."feature" == "ssse3") && ((target."arch" == "x86_64") || (target."arch" == "x86"))));
          }
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
          }
        ];
        devDependencies = [
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
            features = [ "dev" ];
          }
        ];
        
      };
      "aes-soft" = rec {
        crateName = "aes-soft";
        version = "0.3.3";
        edition = "2015";
        sha256 = "039si7yjp0wcd750sgq52c60sh2ikaxwd7rq7g0ba7ws7ypfgmyg";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
          }
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
            features = [ "dev" ];
          }
        ];
        
      };
      "aesni" = rec {
        crateName = "aesni";
        version = "0.6.0";
        edition = "2015";
        sha256 = "007imgcfl82nilfpamj5dik83pkcmkzvbkxp384p7r3iz6sscw1g";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
            features = [ "dev" ];
          }
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "ctr" = [ "stream-cipher" ];
          "default" = [ "ctr" ];
        };
        resolvedDefaultFeatures = [ "ctr" "default" "stream-cipher" ];
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.2.18";
        edition = "2018";
        sha256 = "1lxmn0igyizs10fasgjr4mki97wa4d7ijygjvk0lc28jiw0vacvg";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-random";
            packageId = "const-random";
            optional = true;
          }
        ];
        features = {
          "compile-time-rng" = [ "const-random" ];
          "default" = [ "compile-time-rng" ];
        };
        resolvedDefaultFeatures = [ "compile-time-rng" "const-random" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.6";
        edition = "2015";
        sha256 = "0b8dh20fhdc59dhhnfi89n2bi80a8zbagzd5c122hf1vv2amxysq";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.26";
        edition = "2018";
        sha256 = "0g6mzcxyj88k8bv8rr3zx4yczgimqvvgr12n14a29sqj6s1zc9bq";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.5";
        edition = "2015";
        sha256 = "1vphy316jbgmgckk4z7m8csvlyc8hih9w95iyq48h8077xc2wf0d";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
        
      };
      "arrayvec 0.4.12" = rec {
        crateName = "arrayvec";
        version = "0.4.12";
        edition = "2015";
        sha256 = "1fdiv5m627gh6flp4mpmi1mh647imm9x423licsr11psz97d97yd";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
      };
      "arrayvec 0.5.1" = rec {
        crateName = "arrayvec";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1f5mca8kiiwhvhxd1mbnq68j6v6rk139sch567zwwzl6hs37vxyg";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "asn1_der" = rec {
        crateName = "asn1_der";
        version = "0.6.3";
        edition = "2015";
        sha256 = "0f6nk2zhj1dryrpmd9gywliwblp880zrxrw75kcfpbzx1xm6pkkg";
        authors = [
          "KizzyCode Software Labs./Keziah Biermann <development@kizzycode.de>"
        ];
        dependencies = [
          {
            name = "asn1_der_derive";
            packageId = "asn1_der_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" ];
          "derive" = [ "asn1_der_derive" ];
        };
        resolvedDefaultFeatures = [ "asn1_der_derive" "default" "derive" ];
      };
      "asn1_der_derive" = rec {
        crateName = "asn1_der_derive";
        version = "0.1.2";
        edition = "2015";
        sha256 = "00imfjs46ik92hr92fz0bkggjsxqgm9siscv8i2v21wf9gc6820d";
        procMacro = true;
        authors = [
          "KizzyCode <development@kizzycode.de>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        
      };
      "async-std" = rec {
        crateName = "async-std";
        version = "1.5.0";
        edition = "2018";
        sha256 = "0rxjhlhyvbrd8yd369vp0izr3g0cakvvdrc741vwvvk4xc0wp3jk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
          "Contributors to async-std"
        ];
        dependencies = [
          {
            name = "async-task";
            packageId = "async-task";
            optional = true;
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
          }
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
            optional = true;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer 2.0.2";
            optional = true;
          }
          {
            name = "kv-log-macro";
            packageId = "kv-log-macro";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            features = [ "kv_unstable" ];
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
          }
          {
            name = "mio-uds";
            packageId = "mio-uds";
            optional = true;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "attributes" = [ "async-attributes" ];
          "default" = [ "std" "async-task" "crossbeam-channel" "crossbeam-deque" "futures-timer" "kv-log-macro" "log" "mio" "mio-uds" "num_cpus" "pin-project-lite" ];
          "docs" = [ "attributes" "unstable" "default" ];
          "std" = [ "crossbeam-utils" "futures-core" "futures-io" "memchr" "once_cell" "pin-project-lite" "pin-utils" "slab" ];
          "unstable" = [ "std" "broadcaster" "futures-timer" ];
        };
        resolvedDefaultFeatures = [ "async-task" "crossbeam-channel" "crossbeam-deque" "crossbeam-utils" "default" "futures-core" "futures-io" "futures-timer" "kv-log-macro" "log" "memchr" "mio" "mio-uds" "num_cpus" "once_cell" "pin-project-lite" "pin-utils" "slab" "std" ];
      };
      "async-task" = rec {
        crateName = "async-task";
        version = "1.3.1";
        edition = "2018";
        sha256 = "0p88087z43zvv924my16a17qd65kdlv1r59h80h73rvrn0bc1hha";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "processthreadsapi" ];
          }
        ];
        
      };
      "async-tls" = rec {
        crateName = "async-tls";
        version = "0.7.0";
        edition = "2018";
        sha256 = "12np6wc6zv15lkhclggx2fw8c8rg7i9rrsww9szk9c49dd187zcm";
        authors = [
          "The async-rs developers"
          "Florian Gilcher <florian.gilcher@ferrous-systems.com>"
          "dignifiedquire <dignifiedquire@gmail.com>"
          "quininer kel <quininer@live.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "rustls";
            packageId = "rustls";
          }
          {
            name = "webpki";
            packageId = "webpki";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.19.0";
          }
        ];
        features = {
        };
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg 0.1.7" = rec {
        crateName = "autocfg";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1chwgimpx5z7xbag7krr9d8asxfqbh683qhgl9kn3hxk2l0djj8x";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "autocfg 1.0.0" = rec {
        crateName = "autocfg";
        version = "1.0.0";
        edition = "2015";
        sha256 = "17cv6pwb4q08s0ynpr4n8hv5299hcmhdgvdchzixfpw8y5qcgapq";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.11.0";
        edition = "2018";
        sha256 = "1iqmims6yvr6vwzyy54qd672zw29ipjj17p8klcr578c9ajpw6xl";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "blake2-rfc" = rec {
        crateName = "blake2-rfc";
        version = "0.2.18";
        edition = "2015";
        sha256 = "0034g47hyq2bzmk40895ill1mbnpmmjakdq3dmm9clidvl5m6vax";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.4.12";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "0.5.10";
        edition = "2018";
        sha256 = "12icvk8ixlivv3jv5nyrg01sajp4s279zb1kmif0nfja4ms2vyyq";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "blake2s_simd" = rec {
        crateName = "blake2s_simd";
        version = "0.5.10";
        edition = "2018";
        sha256 = "0i6g2zbcqf8ix3xcld8xp36xm1gmnjnn8z7b9ii7k4l25cshg7mb";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.7.3";
        edition = "2015";
        sha256 = "12v8wizynqin0hqf140kmp9s38q223mp1b0hkqk8j5pk8720v560";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        
      };
      "block-cipher-trait" = rec {
        crateName = "block-cipher-trait";
        version = "0.6.2";
        edition = "2015";
        sha256 = "0x273w6fwka0i48nrv428birdrs2jz6jdnmc0dhc1rq9pm4lv4hw";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1xbkmysiz23vimd17rnsjpw9bgjxipwfslwyygqlkx4in3dxwygs";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
        ];
        
      };
      "bs58" = rec {
        crateName = "bs58";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1bkd77ic7ybm5mhy5hyv4j0pxiyzvykl8gmfxnwsd7rzd8jwsw5i";
        authors = [
          "Wim Looman <wim@nemo157.com>"
        ];
        features = {
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.1.1";
        edition = "2018";
        sha256 = "171nyj1bvi9b7g46lg1ravysqwsndlc9x8wswfsfsflaimx5dqlg";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "byteorder 0.5.3" = rec {
        crateName = "byteorder";
        version = "0.5.3";
        edition = "2015";
        sha256 = "0ma8pkyz1jbglr29m1yzlc9ghmv6672nvsrn7zd0yn5jqs60xh8g";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "byteorder 1.3.2" = rec {
        crateName = "byteorder";
        version = "1.3.2";
        edition = "2015";
        sha256 = "1xbwjlmq2ziqjmjvkqxdx1yh136xxhilxd40bky1w4d7hn4xvhx7";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1q9r7si1l8vndg4n2ny2nv833ghp5vyqzk5indb9rmhd5ibaq2hk";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "c2-chacha" = rec {
        crateName = "c2-chacha";
        version = "0.2.3";
        edition = "2018";
        sha256 = "1fzn2n9k51b8wp4m41pkdzwlk1dbkjb6ha9rqdp4jfmzl753hhi1";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            rename = "ppv-lite86";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "simd" "rustcrypto_api" ];
          "rustcrypto_api" = [ "stream-cipher" "byteorder" ];
          "simd" = [ "ppv-lite86/simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "c_linked_list" = rec {
        crateName = "c_linked_list";
        version = "1.1.1";
        edition = "2015";
        sha256 = "0jvjr3233wqgx6li65kciqpg354pvb0cv1i8hc71ka5lsf5m2r29";
        authors = [
          "Andrew Cann <shum@canndrew.org>"
        ];
        
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.49";
        edition = "2018";
        crateBin = [];
        sha256 = "03n2lj4kyyw9hz7wzfkkzc0xgrickwpnjdv4gi72fvxajbdbhl74";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "num_cpus" "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "chacha20-poly1305-aead" = rec {
        crateName = "chacha20-poly1305-aead";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0fs2ym190lk4rl9kckh8lm693qw50j703ag8fnfgd54mla5hblkp";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        dependencies = [
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
        };
      };
      "clear_on_drop" = rec {
        crateName = "clear_on_drop";
        version = "0.2.3";
        edition = "2015";
        sha256 = "05qxifm7pkms9gnvr50j67x59m3br5fg68yfcrmv9zr7w40nh9wp";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "nightly" = [ "no_cc" ];
        };
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "const-random" = rec {
        crateName = "const-random";
        version = "0.1.8";
        edition = "2018";
        sha256 = "0sp1ang5sh27fq5b7g9fdwpq4d5s17ymj7khfzax4bbvffngj6ig";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-random-macro";
            packageId = "const-random-macro";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
        ];
        
      };
      "const-random-macro" = rec {
        crateName = "const-random-macro";
        version = "0.1.8";
        edition = "2018";
        sha256 = "0ykc9riajn6bijvw46092gp18vrbky3y1cjpgjgx57a5xc3cdr15";
        procMacro = true;
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
        ];
        
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1g3vp04qzmk6cpzrd19yci6a95m7ap6wy7wkwgiy2pjklklrfl14";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1c9dhkvf3brrzzplcijaywxi2w8wv5578i0ryhcm7x8dmzi5s4ms";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.4.0";
        edition = "2015";
        sha256 = "135ncx9680afs8jkjz8g3iq3naay9rn7942gxrdg2n9m1cxrmv5c";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.7.2";
        edition = "2015";
        sha256 = "1jm3rqb3qfpfywrakyy81f61xnl4jsim7lam9digw6w6cdfr9an3";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1b2mgc2gxxvyzyxgd5wvn9k42gr6f9phi2swwjawpqswy3dynr2h";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 0.1.7";
          }
        ];
        features = {
          "alloc" = [ "crossbeam-utils/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "crossbeam-utils/std" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1x1rn35q2v05qif14ijfg7800d3rf3ji2cg79awnacfw5jq6si6f";
        authors = [
          "The Crossbeam Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 0.1.7";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "default" "lazy_static" "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" "std" ];
      };
      "crypto-mac" = rec {
        crateName = "crypto-mac";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1rbrq6qy9dl0pj4ym2zy33miaaa8vpzdss60p9bdb58xy46l0d24";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "subtle";
            packageId = "subtle 1.0.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.3.2";
        edition = "2015";
        sha256 = "0dk7ik2pjr10q8b3bm64af10k0x0xkl6y02xs9kxz4a4f28xcb02";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
          }
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
          }
        ];
        devDependencies = [
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
            features = [ "dev" ];
          }
        ];
        
      };
      "cuckoofilter" = rec {
        crateName = "cuckoofilter";
        version = "0.3.2";
        edition = "2015";
        sha256 = "07xz76lp55bc8m5flyxpyc6wap705vmbl43acf3a7q7zz9y3zm4d";
        authors = [
          "Seif Lotfy <seif.lotfy@gmail.com>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
          "Florian Jacob <briefe@florianjacob.de>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder 0.5.3";
          }
          {
            name = "rand";
            packageId = "rand 0.3.23";
          }
        ];
        features = {
          "dev" = [ "clippy" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "2.0.0";
        edition = "2015";
        sha256 = "0fa883rqr6a6qpz9zsdrmn4bsydrc8mn0jx44lfzmkznlwc8axr6";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.2.2";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "avx2_backend" = [ "simd_backend" ];
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "subtle/nightly" ];
          "simd_backend" = [ "nightly" "u64_backend" "packed_simd" ];
          "std" = [ "alloc" "subtle/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "u64_backend" ];
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.1.2";
        edition = "2018";
        sha256 = "15xd6afhsjl08285piwczrafmckpp8i29padj8v12xhahshprx7l";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "dns-parser" = rec {
        crateName = "dns-parser";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1spv0psvxc31qg9xnqf0gmjclyiim7vp23r2b1gzf1ix8zlkply4";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        features = {
          "with-serde" = [ "serde" "serde_derive" ];
        };
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "1.0.0-pre.3";
        edition = "2018";
        sha256 = "18lrlnx1jni2bvckv1iz165dbpxi5wzikzrbgg4k6x23aari11wp";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
        ];
        dependencies = [
          {
            name = "clear_on_drop";
            packageId = "clear_on_drop";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "rand/alloc" ];
          "asm" = [ "sha2/asm" ];
          "batch" = [ "merlin" "rand" ];
          "batch_deterministic" = [ "merlin" "rand" "rand_core" ];
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "curve25519-dalek/nightly" "clear_on_drop/nightly" "rand/nightly" ];
          "simd_backend" = [ "curve25519-dalek/simd_backend" ];
          "std" = [ "curve25519-dalek/std" "sha2/std" "rand/std" ];
          "u32_backend" = [ "curve25519-dalek/u32_backend" ];
          "u64_backend" = [ "curve25519-dalek/u64_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "std" "u64_backend" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.3";
        edition = "2015";
        sha256 = "1qyz1b1acad6w0k5928jw5zaq900zhsk7p8dlcp4hh61w4f6n7xv";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0djx8h8xfib43g5w94r1m1mkky5spcw4wblzgnhiyg5vnfxknls4";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "fake-simd" = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1vfylvk4va2ivqx85603lyqqp0zk52cgbs4n5nfbbbqx577qm2p8";
        authors = [
          "The Rust-Crypto Project Developers"
        ];
        
      };
      "fixedbitset" = rec {
        crateName = "fixedbitset";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0kg03p777wc0dajd9pvlcnsyrwa8dhqwf0sd9r4dw0p82rs39arp";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.13";
        edition = "2018";
        sha256 = "03rwyh691j20ih2vcskwp1sinhf9paggrkv32fvzwli9fpsddmkb";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libz-sys";
            packageId = "libz-sys";
            optional = true;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            target = { target, features }: ((target."arch" == "wasm32") && (!(target."os" == "emscripten")));
          }
        ];
        features = {
          "default" = [ "rust_backend" ];
          "rust_backend" = [ "miniz_oxide" ];
          "tokio" = [ "tokio-io" "futures" ];
          "zlib" = [ "libz-sys" ];
        };
        resolvedDefaultFeatures = [ "default" "libz-sys" "miniz_oxide" "rust_backend" "zlib" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "1ww56bi1r5b8id3ns9j3qxbi7w5h005rzhiryy0zi9h97raqbb9g";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        
      };
      "fuchsia-zircon" = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "10jxc5ks1x06gpd0xg51kcjrxr35nj6qhx2zlc5n7bmskv3675rf";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
          }
        ];
        
      };
      "fuchsia-zircon-sys" = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "19zp2085qsyq2bh1gvcxq1lb8w6v6jj9kbdkhpdjrl95fypakjix";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.4";
        edition = "2018";
        sha256 = "105p5bwjf2dsclvi95g784n6b51az8ibdhjgmr2gn0imfpl9lcjw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" "futures-channel/cfg-target-has-atomic" "futures-util/cfg-target-has-atomic" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "read-initializer" = [ "futures-io/read-initializer" "futures-util/read-initializer" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "bilock" "default" "executor" "futures-executor" "std" "thread-pool" "unstable" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1a7iq7m4ggq2njrm7h1x2v2gxzxkd2160awk0fwrrpcfrq27vizh";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" ];
          "default" = [ "std" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
          "unstable" = [ "futures-core/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "futures-sink" "sink" "std" "unstable" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0jj6mjvjbvv36r6w86lmjkh62mwndz901nsq4fwqjpl2d7vr4mgj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "unstable" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1fj1jw8g7l5v1sf7lh0w0smq596vmxaxzklh98l3fnxipkhz6x7n";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "num_cpus" "std" "thread-pool" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1ihd1429kyfncxpc4mvina1hbppywfqzql6zrnjcflk1m6d9af56";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unstable" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.4";
        edition = "2018";
        sha256 = "19r3akc8y0br6jbx0lh1cfq07n8f23g7qfaag4m59xz17nm82l4s";
        procMacro = true;
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.4";
        edition = "2018";
        sha256 = "19n88jlh8cwam4gqzj4vj9g130vg9ir0m1bv11dxj5619cdq4ril";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.4";
        edition = "2018";
        sha256 = "09ss6zg7w36s3y2715bnvfrnwr3b8vnklmxag00wvkgn7kjk82kv";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" "unstable" ];
      };
      "futures-timer 2.0.2" = rec {
        crateName = "futures-timer";
        version = "2.0.2";
        edition = "2018";
        sha256 = "1xlx22asam8g5m32avwxx4x4p5hw3gvdhbk6047rn0hqn847bpm1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "futures-timer 3.0.2" = rec {
        crateName = "futures-timer";
        version = "3.0.2";
        edition = "2018";
        sha256 = "0b5v7lk9838ix6jdcrainsyrh7xrf24pwm61dp13907qkn806jz6";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "wasm-bindgen" = [ "gloo-timers" "send_wrapper" ];
        };
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1i84h30q2q93y4l4bk2g22mp96aws02a0k9qy3nnnc34bpr6qxi2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" "proc-macro-hack" "proc-macro-nested" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "read-initializer" = [ "io" "futures-io/read-initializer" "futures-io/unstable" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "bilock" "channel" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "proc-macro-hack" "proc-macro-nested" "sink" "slab" "std" "unstable" ];
      };
      "futures_codec" = rec {
        crateName = "futures_codec";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1cy2w53kyrxqcc5p1lq8wfmp182pd4fzr02rwi9593viwjck59x0";
        authors = [
          "Matt Hunzinger <matthunz2@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
        ];
        
      };
      "gcc" = rec {
        crateName = "gcc";
        version = "0.3.55";
        edition = "2015";
        crateBin = [];
        sha256 = "1hng1sajn4r67hndvhjysswz8niayjwvcj42zphpxzhbz89kjpwg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "rayon" ];
        };
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.12.3";
        edition = "2015";
        sha256 = "1v5jg7djicq34nbiv1dwaki71gkny002wyy9qfn3y0hfmrs053y6";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        
      };
      "get_if_addrs" = rec {
        crateName = "get_if_addrs";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1xsfxq3ga63vllw5k6pxpdlfp3m6fh8jiga865gr4cldi5dbbpdb";
        authors = [
          "MaidSafe Developers <dev@maidsafe.net>"
        ];
        dependencies = [
          {
            name = "c_linked_list";
            packageId = "c_linked_list";
          }
          {
            name = "get_if_addrs-sys";
            packageId = "get_if_addrs-sys";
            target = { target, features }: (target."os" == "android");
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: (target."os" == "windows");
          }
        ];
        
      };
      "get_if_addrs-sys" = rec {
        crateName = "get_if_addrs-sys";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0j5bypizbk59jhkaw1abkx7ydj79pplfvwq03hcnpwvcfkxzj10d";
        libPath = "lib.rs";
        authors = [
          "MaidSafe Developers <dev@maidsafe.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "gcc";
            packageId = "gcc";
          }
        ];
        
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.14";
        edition = "2018";
        sha256 = "1sq30li71h19rhnhs1h6576ja68insajx8wvh1nn088r8pc8vg3s";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "test-in-browser" = [ "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1bbf9k46v57zi41m6hjwn83rjldyipv5zwxmdsa7a9c1rb876q4f";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 0.1.7";
          }
        ];
        features = {
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "default" = [ "ahash" "ahash-compile-time-rng" "inline-more" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
        };
        resolvedDefaultFeatures = [ "ahash" "ahash-compile-time-rng" "default" "inline-more" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.6";
        edition = "2015";
        sha256 = "0wippj5nkw9q5yyyaqpdrgdhag3l3nbrwja7149cwn7ii1nnbwpg";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hmac" = rec {
        crateName = "hmac";
        version = "0.7.1";
        edition = "2015";
        sha256 = "15cnwpssp2n1kdm9x7abir67f2hp3q6rdfj1mcck3hm4rmj5xjsx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
            features = [ "dev" ];
          }
        ];
        
      };
      "hmac-drbg" = rec {
        crateName = "hmac-drbg";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0yqskpca1jmxsfzl9xc0wylkxdhk0i9xv35lh5jhzwck2i2p1rf6";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
        ];
        
      };
      "http" = rec {
        crateName = "http";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0sqm60mi6ha9x9cfx393qqg5s6hjg8dadfakdw15jd290rzwq25p";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1yf23ldnjwfkkhkca7f4w15mky9961gjz28dlwyybhphc7l9l5yd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0krwgbf35pd46xvkqg14j070vircsndabahahlv3rwhflpy4q06z";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        
      };
      "idna" = rec {
        crateName = "idna";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1a9066imqpdrm1aavfasdyb1zahqaz8jmdcwdawvb1pf60y6gqh2";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.3.1";
        edition = "2015";
        sha256 = "1p60sdnb0c38ixr26h4gndr3irfdjy4sz3ys0dl0py3g1a7ham0b";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.0";
          }
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.2.0";
        edition = "2015";
        sha256 = "1yqn565vp0xq8pl0dva6q1ghfa96i6hrhvw13s63ilb3qmyhand8";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1154j48aw913v5jnyhpxialxhdn2sfpl4d7bwididyb1r05jsspm";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0zvg2d9qv3avhf3d8ggglh6fdyw8kkwqg3r4622ly5yhxnvnc4jh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.34";
        edition = "2018";
        sha256 = "0kl3d9fxw2qh4h6brqdndr95zcmckb4jyri5dph0pkxnmx7pl3n4";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.0";
        edition = "2015";
        sha256 = "19ybbvxrdk9yy65rk7f5ad0hcxszkjwph68yzkj3954lnir1bhk7";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
        };
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "kv-log-macro" = rec {
        crateName = "kv-log-macro";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1fxar5mvl8gf19phy86b915n2yhs11z23p7bwr9afc6mcpsdjm4c";
        authors = [
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            features = [ "kv_unstable" ];
          }
        ];
        
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.66";
        edition = "2015";
        sha256 = "0n0mwry21fxfwc063k33mvxk8xj7ia5ar8m42c9ymbam2ksb25fm";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libp2p" = rec {
        crateName = "libp2p";
        version = "0.18.0";
        edition = "2018";
        src = pkgs.callPackage ./tarball-v0.18.0.nix {};
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-core-derive";
            packageId = "libp2p-core-derive";
          }
          {
            name = "libp2p-deflate";
            packageId = "libp2p-deflate";
            optional = true;
            target = { target, features }: (!((target."os" == "emscripten") || (target."os" == "unknown")));
          }
          {
            name = "libp2p-dns";
            packageId = "libp2p-dns";
            optional = true;
            target = { target, features }: (!((target."os" == "emscripten") || (target."os" == "unknown")));
          }
          {
            name = "libp2p-floodsub";
            packageId = "libp2p-floodsub";
            optional = true;
          }
          {
            name = "libp2p-gossipsub";
            packageId = "libp2p-gossipsub";
            optional = true;
          }
          {
            name = "libp2p-identify";
            packageId = "libp2p-identify";
            optional = true;
          }
          {
            name = "libp2p-kad";
            packageId = "libp2p-kad";
            optional = true;
          }
          {
            name = "libp2p-mdns";
            packageId = "libp2p-mdns";
            optional = true;
            target = { target, features }: (!((target."os" == "emscripten") || (target."os" == "unknown")));
          }
          {
            name = "libp2p-mplex";
            packageId = "libp2p-mplex";
            optional = true;
          }
          {
            name = "libp2p-noise";
            packageId = "libp2p-noise";
            optional = true;
          }
          {
            name = "libp2p-ping";
            packageId = "libp2p-ping";
            optional = true;
          }
          {
            name = "libp2p-plaintext";
            packageId = "libp2p-plaintext";
            optional = true;
          }
          {
            name = "libp2p-pnet";
            packageId = "libp2p-pnet";
            optional = true;
          }
          {
            name = "libp2p-secio";
            packageId = "libp2p-secio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "libp2p-tcp";
            packageId = "libp2p-tcp";
            optional = true;
            target = { target, features }: (!((target."os" == "emscripten") || (target."os" == "unknown")));
          }
          {
            name = "libp2p-uds";
            packageId = "libp2p-uds";
            optional = true;
          }
          {
            name = "libp2p-wasm-ext";
            packageId = "libp2p-wasm-ext";
            optional = true;
          }
          {
            name = "libp2p-websocket";
            packageId = "libp2p-websocket";
            optional = true;
            target = { target, features }: (!((target."os" == "emscripten") || (target."os" == "unknown")));
          }
          {
            name = "libp2p-yamux";
            packageId = "libp2p-yamux";
            optional = true;
          }
          {
            name = "multihash";
            packageId = "multihash";
          }
          {
            name = "parity-multiaddr";
            packageId = "parity-multiaddr";
            rename = "multiaddr";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        devDependencies = [
          {
            name = "async-std";
            packageId = "async-std";
          }
          {
            name = "env_logger";
            packageId = "env_logger";
          }
        ];
        features = {
          "default" = [ "deflate" "dns" "floodsub" "identify" "kad" "gossipsub" "mdns" "mplex" "noise" "ping" "plaintext" "pnet" "secio" "secp256k1" "tcp" "uds" "wasm-ext" "websocket" "yamux" ];
          "deflate" = [ "libp2p-deflate" ];
          "dns" = [ "libp2p-dns" ];
          "floodsub" = [ "libp2p-floodsub" ];
          "gossipsub" = [ "libp2p-gossipsub" ];
          "identify" = [ "libp2p-identify" ];
          "kad" = [ "libp2p-kad" ];
          "mdns" = [ "libp2p-mdns" ];
          "mplex" = [ "libp2p-mplex" ];
          "noise" = [ "libp2p-noise" ];
          "ping" = [ "libp2p-ping" ];
          "plaintext" = [ "libp2p-plaintext" ];
          "pnet" = [ "libp2p-pnet" ];
          "secio" = [ "libp2p-secio" ];
          "secp256k1" = [ "libp2p-core/secp256k1" "libp2p-secio/secp256k1" ];
          "tcp" = [ "libp2p-tcp" ];
          "uds" = [ "libp2p-uds" ];
          "wasm-ext" = [ "libp2p-wasm-ext" ];
          "websocket" = [ "libp2p-websocket" ];
          "yamux" = [ "libp2p-yamux" ];
        };
        resolvedDefaultFeatures = [ "default" "deflate" "dns" "floodsub" "gossipsub" "identify" "kad" "libp2p-deflate" "libp2p-dns" "libp2p-floodsub" "libp2p-gossipsub" "libp2p-identify" "libp2p-kad" "libp2p-mdns" "libp2p-mplex" "libp2p-noise" "libp2p-ping" "libp2p-plaintext" "libp2p-pnet" "libp2p-secio" "libp2p-tcp" "libp2p-uds" "libp2p-wasm-ext" "libp2p-websocket" "libp2p-yamux" "mdns" "mplex" "noise" "ping" "plaintext" "pnet" "secio" "secp256k1" "tcp" "uds" "wasm-ext" "websocket" "yamux" ];
      };
      "libp2p-core" = rec {
        crateName = "libp2p-core";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0fapid4vx4sz8454f4y0a1zjv1phqsm2fnbsly2akp64b1qw3lm1";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "asn1_der";
            packageId = "asn1_der";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "executor" "thread-pool" ];
          }
          {
            name = "futures-timer";
            packageId = "futures-timer 3.0.2";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multihash";
            packageId = "multihash";
          }
          {
            name = "multistream-select";
            packageId = "multistream-select";
          }
          {
            name = "parity-multiaddr";
            packageId = "parity-multiaddr";
            rename = "multiaddr";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "ring";
            packageId = "ring";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."os" == "emscripten") || (target."os" == "unknown")));
            features = [ "alloc" "std" ];
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        features = {
          "default" = [ "secp256k1" ];
          "secp256k1" = [ "libsecp256k1" ];
        };
        resolvedDefaultFeatures = [ "default" "libsecp256k1" "secp256k1" ];
      };
      "libp2p-core-derive" = rec {
        crateName = "libp2p-core-derive";
        version = "0.18.0";
        edition = "2018";
        sha256 = "1rp2b9la9ly75q1fv47izljr769a6npdacqcnrddna27is2jg49j";
        procMacro = true;
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        
      };
      "libp2p-deflate" = rec {
        crateName = "libp2p-deflate";
        version = "0.18.0";
        edition = "2018";
        sha256 = "1iif4nn88xrxqsld4rx4pa7as3sbvzr7qlvfqs6dl8m9dq02plsa";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
        ];
        
      };
      "libp2p-dns" = rec {
        crateName = "libp2p-dns";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0wbwjxwbcbb1hk3xd7k5a2wcdjmh7w1psy1grvjnhg90h4s9kl60";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        
      };
      "libp2p-floodsub" = rec {
        crateName = "libp2p-floodsub";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0ggxpzqypfhg8ldjczygkrkdcmck0ryh9pzs8pbpkhb7m4y1awrn";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "cuckoofilter";
            packageId = "cuckoofilter";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        
      };
      "libp2p-gossipsub" = rec {
        crateName = "libp2p-gossipsub";
        version = "0.18.0";
        edition = "2018";
        sha256 = "18v370ahrg9zan8zl3rawpg7clnknx0pdi3w66q4v1k0y1wkyzrz";
        authors = [
          "Age Manning <Age@AgeManning.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures_codec";
            packageId = "futures_codec";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "lru";
            packageId = "lru";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
            features = [ "futures-codec" ];
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        
      };
      "libp2p-identify" = rec {
        crateName = "libp2p-identify";
        version = "0.18.0";
        edition = "2018";
        sha256 = "050l0vrj3x5217vvbf47amncchrq5g6sfb6885py52bph3ms7353";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        
      };
      "libp2p-kad" = rec {
        crateName = "libp2p-kad";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0n8pxvb0nj7408nk5siqxsg30b3spp99jara156sd7hlp0gxlb59";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec 0.5.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures_codec";
            packageId = "futures_codec";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multihash";
            packageId = "multihash";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "uint";
            packageId = "uint";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
            features = [ "futures-codec" ];
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        
      };
      "libp2p-mdns" = rec {
        crateName = "libp2p-mdns";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0wclp457ac1n88ka4s1sn2q7yxzx8hcgw0hzmp30xzzqmb90isa1";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-std";
            packageId = "async-std";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "dns-parser";
            packageId = "dns-parser";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        
      };
      "libp2p-mplex" = rec {
        crateName = "libp2p-mplex";
        version = "0.18.0";
        edition = "2018";
        sha256 = "00jal1bfhwnj8xwadg50cj0hcg7aadvl8wafsy0jx6v10qmqhch8";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures_codec";
            packageId = "futures_codec";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
            features = [ "futures-codec" ];
          }
        ];
        
      };
      "libp2p-noise" = rec {
        crateName = "libp2p-noise";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0xwwqb4fm6rdgxwaywclgcanvfns58gqq7wzxqj9q4z196k993li";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "snow";
            packageId = "snow";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "unknown"));
            features = [ "ring-resolver" ];
          }
          {
            name = "snow";
            packageId = "snow";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "unknown");
            features = [ "default-resolver" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        
      };
      "libp2p-ping" = rec {
        crateName = "libp2p-ping";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0c3jy388dl57nzcphpmccl276f4p3k4cb6cq1w22sjdvxs3vzgzr";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "libp2p-swarm";
            packageId = "libp2p-swarm";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        
      };
      "libp2p-plaintext" = rec {
        crateName = "libp2p-plaintext";
        version = "0.18.0";
        edition = "2018";
        sha256 = "06d05q13zk5qzg7klg6h2ix24464zbpgcqp3ii56vgs979ah1fzs";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures_codec";
            packageId = "futures_codec";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
            features = [ "futures-codec" ];
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        
      };
      "libp2p-pnet" = rec {
        crateName = "libp2p-pnet";
        version = "0.18.0";
        edition = "2018";
        sha256 = "04flwagjrrspgv9c2x51il8g5pjpqvd9dhr03ksy2agmgyrvi0cz";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "salsa20";
            packageId = "salsa20";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
        ];
        
      };
      "libp2p-secio" = rec {
        crateName = "libp2p-secio";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0x47d5kah66p71g3d91kmqllvgw1bfw5ivsgjmcm4927gsd51857";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "aes-ctr";
            packageId = "aes-ctr";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parity-send-wrapper";
            packageId = "parity-send-wrapper";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "quicksink";
            packageId = "quicksink";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "ring";
            packageId = "ring";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."arch" == "wasm32"));
            features = [ "alloc" ];
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "twofish";
            packageId = "twofish";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (target."arch" == "wasm32");
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (target."arch" == "wasm32");
            features = [ "Crypto" "CryptoKey" "SubtleCrypto" "Window" ];
          }
        ];
        buildDependencies = [
          {
            name = "prost-build";
            packageId = "prost-build";
          }
        ];
        features = {
          "aes-all" = [ "aesni" ];
          "default" = [ "secp256k1" ];
        };
        resolvedDefaultFeatures = [ "secp256k1" ];
      };
      "libp2p-swarm" = rec {
        crateName = "libp2p-swarm";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0g9q2mzml95v1l95mn4ynsz8ddqlwl3jb70qf9apprl5g20ha9k2";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "void";
            packageId = "void";
          }
          {
            name = "wasm-timer";
            packageId = "wasm-timer";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
        ];
        
      };
      "libp2p-tcp" = rec {
        crateName = "libp2p-tcp";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0s8nv0r9lm00cwl5495f0l7m5g3p06sr9nh58qz25vfk4d4a8zmk";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-std";
            packageId = "async-std";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer 3.0.2";
          }
          {
            name = "get_if_addrs";
            packageId = "get_if_addrs";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = [ "async-std" ];
        };
        resolvedDefaultFeatures = [ "async-std" "default" ];
      };
      "libp2p-uds" = rec {
        crateName = "libp2p-uds";
        version = "0.18.0";
        edition = "2018";
        sha256 = "0460mnmrkw03px3kh3kpcfidj62rvw2l8v7pdy59rjxa5zm1h718";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-std";
            packageId = "async-std";
            optional = true;
            target = { target, features }: (target."unix" && (!((target."os" == "emscripten") || (target."os" == "unknown"))));
          }
          {
            name = "futures";
            packageId = "futures";
            target = { target, features }: (target."unix" && (!((target."os" == "emscripten") || (target."os" == "unknown"))));
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
            target = { target, features }: (target."unix" && (!((target."os" == "emscripten") || (target."os" == "unknown"))));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (target."unix" && (!((target."os" == "emscripten") || (target."os" == "unknown"))));
          }
        ];
        features = {
          "default" = [ "async-std" ];
        };
        resolvedDefaultFeatures = [ "async-std" "default" ];
      };
      "libp2p-wasm-ext" = rec {
        crateName = "libp2p-wasm-ext";
        version = "0.18.0";
        edition = "2018";
        sha256 = "1hv0868wnvkv24zk3jp84ccd0a5ficxhgzfd3lcsv37qw2ypvb73";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "parity-send-wrapper";
            packageId = "parity-send-wrapper";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
        ];
        features = {
        };
      };
      "libp2p-websocket" = rec {
        crateName = "libp2p-websocket";
        version = "0.18.0";
        edition = "2018";
        sha256 = "1401b0mkadc9hwfz2j60znhb41n757qjjyywz6fqjgg9kh3cjx38";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "async-tls";
            packageId = "async-tls";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "quicksink";
            packageId = "quicksink";
          }
          {
            name = "rustls";
            packageId = "rustls";
          }
          {
            name = "rw-stream-sink";
            packageId = "rw-stream-sink";
          }
          {
            name = "soketto";
            packageId = "soketto";
            features = [ "deflate" ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "webpki";
            packageId = "webpki";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.18.0";
          }
        ];
        
      };
      "libp2p-yamux" = rec {
        crateName = "libp2p-yamux";
        version = "0.18.0";
        edition = "2018";
        sha256 = "11xbp5w7wq5zwklr9p98xi0zs2i7kc7dqn60qq5iwmzna3m1my82";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "libp2p-core";
            packageId = "libp2p-core";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "yamux";
            packageId = "yamux";
          }
        ];
        
      };
      "libsecp256k1" = rec {
        crateName = "libsecp256k1";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0l4swi43hag6mvgiig163ln938zdx8j97crj774x3ak2zn2dyvnz";
        libName = "secp256k1";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "hmac-drbg";
            packageId = "hmac-drbg";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle 2.2.2";
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "subtle/std" "rand/std" "sha2/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libz-sys" = rec {
        crateName = "libz-sys";
        version = "1.0.25";
        edition = "2015";
        sha256 = "1gjycyl2283525abks98bhxa4r259m617xfm5z52p3p3c8ry9d9f";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            target = {target, features}: (target."env" == "msvc");
          }
        ];
        features = {
        };
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0yzlz7f5xl5sm129dq8jqsrcrkyv7jjnqwd4zr4ijsdlxjaxxckr";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "kv_unstable" "std" ];
      };
      "lru" = rec {
        crateName = "lru";
        version = "0.4.3";
        edition = "2015";
        sha256 = "0ds2l1rkbxw7v16c51bhnxyrhbjs1rz58kvxhp7xmfp5vrfk8286";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "020axl4q7rk9vz90phs7f8jas4imxal9y9kxl4z4v7a6719mrz3z";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        
      };
      "maybe-uninit" = rec {
        crateName = "maybe-uninit";
        version = "2.0.0";
        edition = "2015";
        sha256 = "004y0nzmpfdrhz251278341z6ql34iv1k6dp1h6af7d6nd6jwc30";
        authors = [
          "est31 <MTest31@outlook.com>"
          "The Rust Project Developers"
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.3.3";
        edition = "2015";
        sha256 = "0074pvsfl938ndl5js14ibc7i9q0k3zp390z843w8nlyv4bxha1p";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "use_std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1fblqzc25hfaym8m0pj112s66pqq87avvaqm5hp5rskib2w9w63m";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.3.5";
        edition = "2018";
        sha256 = "09bnfn4bn3hcp912v5syphm4kjd0fdkwq023a4zmr4xf4vvp8gvg";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler32";
            packageId = "adler32";
          }
        ];
        
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.6.21";
        edition = "2015";
        sha256 = "13q02a7cwc140aygf8amadpzpl5lyj3p2r4wnvgydfpnphifqb9h";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fuchsia-zircon";
            packageId = "fuchsia-zircon";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "miow";
            packageId = "miow";
            target = { target, features }: target."windows";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "mio-uds" = rec {
        crateName = "mio-uds";
        version = "0.6.7";
        edition = "2015";
        sha256 = "09gimdbnj7b9yca99pk8lxh9jhl79msj795c8fxi2sqr9slmfqln";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "iovec";
            packageId = "iovec";
            target = { target, features }: target."unix";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "miow" = rec {
        crateName = "miow";
        version = "0.2.1";
        edition = "2015";
        sha256 = "06g9b8sqlh5gxakwqq4rrib07afwanfnxgxajrldwcgk3hxjy7wc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
          }
          {
            name = "net2";
            packageId = "net2";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
          }
        ];
        
      };
      "multihash" = rec {
        crateName = "multihash";
        version = "0.10.1";
        edition = "2018";
        sha256 = "0sb84cxhvk5krfkgfziwvnxqlrmjxiwlah4m3xqcpcg2ywkw5ys7";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            usesDefaultFeatures = false;
          }
          {
            name = "blake2s_simd";
            packageId = "blake2s_simd";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
          }
          {
            name = "sha-1";
            packageId = "sha-1";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "sha3";
            packageId = "sha3";
            usesDefaultFeatures = false;
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
          }
        ];
        features = {
          "test" = [ "quickcheck" "rand" ];
        };
      };
      "multimap" = rec {
        crateName = "multimap";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1p2897583jl6hb19zp38jdriwqxgba7syczl23xppqz001fvszx9";
        authors = [
          "Håvar Nøvik <havar.novik@gmail.com>"
        ];
        features = {
          "default" = [ "serde_impl" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "multistream-select" = rec {
        crateName = "multistream-select";
        version = "0.8.0";
        edition = "2018";
        sha256 = "0b1x1kpzaxs74ghq3m437jrnjg83rcb53yd12lg8h0ilzdyczkbl";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
          }
        ];
        
      };
      "net2" = rec {
        crateName = "net2";
        version = "0.2.33";
        edition = "2015";
        sha256 = "126g3fgfxp06zimc1l9iyxnn9cif1hjsg7sd81nlls5nnyghsma2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "redox") || target."unix");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.14";
        edition = "2015";
        sha256 = "1fz1v9r8ijacf0hlq0pdv5l9mz8vgqg1snmhvpjmi9aci1b4mvvj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
      "nohash-hasher" = rec {
        crateName = "nohash-hasher";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0lf4p6k01w4wm7zn4grnihzj8s7zd5qczjmzng7wviwxawih5x9b";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "1mkvby8b4m61p4g1px0pwr58yfkphyp1jcfbp4qfp7l6iqdaklia";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.11.1";
        edition = "2015";
        sha256 = "0wlxs00cpg16z09fwchj1gdz1jxnf5dgg1cbidvq0sc75bnwbnkn";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1vdz8xlg3r05w3wfjimnc347hgm54i5nrqf72r4mlp0fcdplh7w9";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "parity-multiaddr" = rec {
        crateName = "parity-multiaddr";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1lypq82mfzai32c38264w1jppsy4cp0zcwqqcvkg8gkq5wi5xcsd";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "multihash";
            packageId = "multihash";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "unsigned-varint";
            packageId = "unsigned-varint";
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "parity-send-wrapper" = rec {
        crateName = "parity-send-wrapper";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0vswzhxfdm9lc2kabz2jp7gg3iq2rdmrnjm0mbarvbdqj6m7g5xa";
        authors = [
          "Thomas Keh"
          "Parity Technologies <admin@parity.io>"
        ];
        
      };
      "parking_lot 0.10.0" = rec {
        crateName = "parking_lot";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1z0wgf2sd1266y768kxxs3313zjfzj9r3k7j4arfaz0bmd4qrscj";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.7.0";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot 0.9.0" = rec {
        crateName = "parking_lot";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0lk2vq3hp88ygpgsrypdr3ss71fidnqbykva0csgxhmn5scb2hpq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core 0.6.2";
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core 0.6.2" = rec {
        crateName = "parking_lot_core";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0ay67dpnrn68ryyvp720m9i8hzp189fd4d6slrs1lvmcwywv2xmq";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 0.6.13";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "parking_lot_core 0.7.0" = rec {
        crateName = "parking_lot_core";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1wdbrvh35nn09ga570vl5062dpwfbrwgzyrlhhy78ifzhj2870km";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.5.0";
        edition = "2018";
        sha256 = "14pxq66civ0afgj0zlza9k3kxwqk2bf5jg0mbp4cd7m2lkp2gh99";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "unstable" = [ "generate" ];
        };
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "0.4.8";
        edition = "2018";
        sha256 = "0b3pfbqfy3hhgq62zvbw7m0a4d55mrgnll9w8l9jymyrm1is813q";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "0.4.8";
        edition = "2018";
        sha256 = "0gwvrd8y9x1zfhwqw9qg3l2yi1969ad58aldqq839krfbyj24lrq";
        procMacro = true;
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];
        
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.1.2";
        edition = "2018";
        sha256 = "08m4jk0pzr43jnf52xizz0my4grcl3plhq5ziq1jyibjpfw2x0p8";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0-alpha.4";
        edition = "2018";
        sha256 = "11xmyx00n4m37d546by2rxb8ryxs12v55cc172i3yak1rqccd52q";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.17";
        edition = "2015";
        sha256 = "0xynnaxdv0gzadlw4h79j855k0q7rj4zb9xb1vk00nc6ss559nh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.6";
        edition = "2018";
        sha256 = "06zs492wbms7j5qhy58cs3976c7kyc47rx0d6fn63rgvp580njbl";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.11";
        edition = "2018";
        sha256 = "1idz5vmnjjhvr51yvwyjb45mza18wa53fr05m1skqvbdyw15gm7c";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        
      };
      "proc-macro-nested" = rec {
        crateName = "proc-macro-nested";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0bmlksm8vl44wkwihmwr7jsjznhbg0n7aibcw1cs2jgjcp86x6in";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.7";
        edition = "2018";
        sha256 = "1k1bxv95j4mvd9nfk6y656ykwvh6mbpav8admwfnhqp4r8nrf683";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "prost" = rec {
        crateName = "prost";
        version = "0.6.1";
        edition = "2018";
        sha256 = "04n2i5ryhi5pwl524pxmfxv5z6l5s9xwf9r9wdfs8i311bzawjff";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "prost-derive";
            packageId = "prost-derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "prost-derive" ];
        };
        resolvedDefaultFeatures = [ "default" "prost-derive" ];
      };
      "prost-build" = rec {
        crateName = "prost-build";
        version = "0.6.1";
        edition = "2018";
        sha256 = "09iggxnikpawp7bw2gvpq1v8c6prmv1kb18f6mlvvv0kr5w0dc82";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "multimap";
            packageId = "multimap";
            usesDefaultFeatures = false;
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "prost-types";
            packageId = "prost-types";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        buildDependencies = [
          {
            name = "which";
            packageId = "which";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "prost-derive" = rec {
        crateName = "prost-derive";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0wlgn7nbb3x79xdlxkg47m05gxw6cd302hzc5yhi1pmcjnds2yjk";
        procMacro = true;
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "extra-traits" ];
          }
        ];
        
      };
      "prost-types" = rec {
        crateName = "prost-types";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1ahp6j6b62zfv1d0hfns5rs8k76xgbv7dgkm9cq03h4p0rygcd0q";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "prost";
            packageId = "prost";
          }
        ];
        
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.3";
        edition = "2015";
        sha256 = "1q6za3v78hsspisc197bg3g7rpc989qycy8ypr8ap8igv10ikl51";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        
      };
      "quicksink" = rec {
        crateName = "quicksink";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0c3m28f1dm6kln1nxcrf7hdi7f94wyf65l6wv1rgsqaz8kviwim8";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.3.23" = rec {
        crateName = "rand";
        version = "0.3.23";
        edition = "2015";
        sha256 = "0v679h38pjjqj5h4md7v2slsvj6686qgcn7p9fbw3h43iwnk1b34";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "rand";
            packageId = "rand 0.4.6";
          }
        ];
        features = {
          "nightly" = [ "i128_support" ];
        };
      };
      "rand 0.4.6" = rec {
        crateName = "rand";
        version = "0.4.6";
        edition = "2015";
        sha256 = "14qjfv3gggzhnma20k0sc1jf8y6pplsaq7n1j9ls5c8kf2wl0a2m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "nightly" = [ "i128_support" ];
          "std" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "default" "libc" "std" ];
      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0lv8imzzl4h2glm6sjj8mkvasgi8jym23ya48dakyln7m06sk8h3";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "c2-chacha/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
      };
      "rand_core 0.4.2" = rec {
        crateName = "rand_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1p09ynysrq1vcdlmcqnapq4qakl2yd1ng3kxh3qscpx09k2a6cww";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" ];
        };
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.3.1";
        edition = "2015";
        sha256 = "1g8wp160vzxgralyd4imydd0xsxq6yh25zhs229z1s6w7g9hn8nw";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.12";
        edition = "2015";
        sha256 = "05pplicvzvgkb2wb4i98p2mrpgc8gws6vdl8xlpyyr6f3h6y59qi";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0bkrlyg26mgizpiy1yb2hhpgscxcag8r5fnckqsvk25608vzm0sa";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];
        
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.16.11";
        edition = "2018";
        sha256 = "0qhqmncpaa4nnm3g6aihaizrf7l09yagbya21709j6g299qa26vl";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "android") || (target."os" == "freebsd") || (target."os" == "linux") || (target."os" == "netbsd") || (target."os" == "openbsd") || (target."os" == "solaris"));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "android") || (target."os" == "linux"));
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            target = { target, features }: (((target."arch" == "aarch64") || (target."arch" == "arm") || (target."arch" == "x86") || (target."arch" == "x86_64")) && (!(target."os" == "ios")));
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."arch" == "wasm32") && (target."vendor" == "unknown") && (target."os" == "unknown") && (target."env" == ""));
            features = [ "Crypto" "Window" ];
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "windows");
            features = [ "ntsecapi" "wtypesbase" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {target, features}: (target."unix" || target."windows");
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "dev_urandom_fallback" = [ "lazy_static" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "lazy_static" "std" ];
      };
      "rustc-hex" = rec {
        crateName = "rustc-hex";
        version = "2.0.1";
        edition = "2015";
        sha256 = "1f2sax4lb4883rx4sm9xil1187nc18ky30jzba108yhhhsib6fs0";
        authors = [
          "The Rust Project Developers"
          "debris <marek.kotewicz@gmail.com>"
          "Robert Habermeier"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
        
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.17.0";
        edition = "2018";
        sha256 = "1q8m835viqrf4bbd2fa8rnmaj48fkd984saxf0238hb8blgs7m60";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "sct";
            packageId = "sct";
          }
          {
            name = "webpki";
            packageId = "webpki";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = [ "logging" ];
          "logging" = [ "log" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "logging" ];
      };
      "rw-stream-sink" = rec {
        crateName = "rw-stream-sink";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0810glqcrs36r3k3a5skg40kygd9hn914fw3zxfmlvy4ajqgr9ad";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        
      };
      "salsa20" = rec {
        crateName = "salsa20";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1zli3zwwzq467w27h2p0ims2qzhfywv33nqzaxm5i6mvqglb0913";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "salsa20-core";
            packageId = "salsa20-core";
          }
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
          }
        ];
        devDependencies = [
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "xsalsa20" ];
          "zeroize" = [ "salsa20-core/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "xsalsa20" ];
      };
      "salsa20-core" = rec {
        crateName = "salsa20-core";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0sbfiqjcj898wpzx2274g5v2y10gwyfhjqyy7a2nfn2skwdwrrig";
        authors = [
          "Eric McCorkle <eric@metricspace.net>"
        ];
        dependencies = [
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
          }
        ];
        devDependencies = [
          {
            name = "stream-cipher";
            packageId = "stream-cipher";
            features = [ "dev" ];
          }
        ];
        
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.0.0";
        edition = "2015";
        sha256 = "03aay84r1f6w87ckbpj6cc4rnsxkxcfs13n5ynxjia0qkgjiabml";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "sct" = rec {
        crateName = "sct";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0g4dz7las43kcpi9vqv9c6l1afjkdv3g3w3s7d2w7a7w77wjl173";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        
      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];
        
      };
      "send_wrapper" = rec {
        crateName = "send_wrapper";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1d5y1adlc1rvybdmijz3g4vjm9qzc8c9zhc8ya0xgkjhiwpdzvd0";
        authors = [
          "Thomas Keh"
        ];
        
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.104";
        edition = "2015";
        sha256 = "0ja4mgw4p42syjk7jkzwhj2yg6llfrfm7vn8rvy7v3c1bzr1aha1";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha-1" = rec {
        crateName = "sha-1";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1pv387q0r7llk2cqzyq0nivzvkgqgzsiygqzlv7b68z9xl5lvngp";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "asm-aarch64" = [ "asm" "libc" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.6.0";
        edition = "2015";
        sha256 = "03gs2q4m67rn2p8xcdfxhip6mpgahdwm12bnb3vh90ahv9grhy95";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
        };
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1827pplynq0ahxid1xq281kiv56kj2afp7gm97v7gw71sbgll117";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" "libc" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1kryhpjafv3k1x9fj13psrqhrvkjigswm564kfapqfifg87bq9nx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "smallvec 0.6.13" = rec {
        crateName = "smallvec";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1dl219vnfkmsfx28lm3f83lyw24zap6fdsli6rg8nnp1aa67bc7p";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "maybe-uninit";
            packageId = "maybe-uninit";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec 1.1.0" = rec {
        crateName = "smallvec";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1x78v1z931bxvkp0d7b9fmg4a17yqkiydr765a8if250kw69xra4";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
        };
      };
      "snow" = rec {
        crateName = "snow";
        version = "0.6.2";
        edition = "2018";
        sha256 = "0bydmh033w8rgck4bvrj2ql24fy17dkhi6qb5whblmyjwzp6gdxg";
        authors = [
          "Jake McGinty <me@jake.su>"
          "trevp"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "blake2-rfc";
            packageId = "blake2-rfc";
            optional = true;
          }
          {
            name = "chacha20-poly1305-aead";
            packageId = "chacha20-poly1305-aead";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "sha2";
            packageId = "sha2";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle 2.2.2";
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "default" = [ "default-resolver" ];
          "default-resolver" = [ "chacha20-poly1305-aead" "blake2-rfc" "sha2" "x25519-dalek" "rand" ];
          "nightly" = [ "blake2-rfc/simd_opt" "chacha20-poly1305-aead/simd_opt" "x25519-dalek/nightly" "subtle/nightly" ];
          "ring-accelerated" = [ "ring-resolver" "default-resolver" ];
          "ring-resolver" = [ "ring" ];
        };
        resolvedDefaultFeatures = [ "blake2-rfc" "chacha20-poly1305-aead" "default-resolver" "rand" "ring" "ring-resolver" "sha2" "x25519-dalek" ];
      };
      "soketto" = rec {
        crateName = "soketto";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0wc6aax7g556d3qxwslqmzjgma8lfpn9196gwhhryhb5nzb0maiw";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Jason Ozias <jason.g.ozias@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "zlib" ];
          }
          {
            name = "futures";
            packageId = "futures";
            features = [ "unstable" "bilock" ];
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "deflate" = [ "flate2" ];
        };
        resolvedDefaultFeatures = [ "deflate" "flate2" ];
      };
      "sourcefile" = rec {
        crateName = "sourcefile";
        version = "0.1.4";
        edition = "2015";
        sha256 = "1lwa6973zs4bgj29my7agfjgk4nw9hp6j7dfnr13nid85fw7rxsb";
        authors = [
          "Richard Dodd <richard.o.dodd@gmail.com>"
        ];
        
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];
        
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "stream-cipher" = rec {
        crateName = "stream-cipher";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1333qng84n6b15p8kndhajlgvbp1rgdddx04xgsvrjlnb1m2acc1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "subtle 1.0.0" = rec {
        crateName = "subtle";
        version = "1.0.0";
        edition = "2015";
        sha256 = "1vm80mxbwfj334izwm8x8l65v1xl9hr0kwrg36r1rq565fkaarrd";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
      };
      "subtle 2.2.2" = rec {
        crateName = "subtle";
        version = "2.2.2";
        edition = "2015";
        sha256 = "0hg9p61kyqhahk8assj5zcc5nhvyb6506jgkjk1fmjhcn4qdarbw";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.13";
        edition = "2018";
        sha256 = "1y0ycplnrk6sn648dhfwvy1kf9pmgfsyl9c1gnjx2h8a48rz0kqy";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.3";
        edition = "2018";
        sha256 = "0igmc5fzpk6fg7kgff914j05lbpc6ai2wmji312v2h8vvjhnwrb7";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1a9cfdqw70n7bcnkx05aih9xdba8lqazmqlkjpkmn2la6gcj8vks";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.0.5";
        edition = "2015";
        sha256 = "0vjfsn1a8zvqhnrbygrz1id6yckwv1dncw3w4zj65qdx0f00kmln";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "wincolor";
            packageId = "wincolor";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.9";
        edition = "2018";
        sha256 = "0zlp3kzjssl1ndqmn7cipqnyggq4851ghhqj4bfc4fxk2hc7sdbg";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];
        
      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.9";
        edition = "2018";
        sha256 = "1vxzhb98pm5yrq9mmcz50bgpml35iyx7lwjgi4v89sq7ag92abpb";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "06rzik99p8c5js8238yhc8rk6np543ylb1dy9nrw5v80j0r3xdf6";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "twofish" = rec {
        crateName = "twofish";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1q9l4h2zqr119x8fwn596vdkavn3cynaqpdpvgich9z7hcg2cbbi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
          }
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "block-cipher-trait";
            packageId = "block-cipher-trait";
            features = [ "dev" ];
          }
        ];
        
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.11.2";
        edition = "2015";
        sha256 = "1ybmfpp7j37zmaw50w35wiwx66lbpr0yp1312c0i333b5pz869vd";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
        };
      };
      "uint" = rec {
        crateName = "uint";
        version = "0.8.2";
        edition = "2018";
        sha256 = "03cf0wizgz7cw4g9ap5s2sznpvl8k8xlhg51vd08icl7ggflqnp7";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder 1.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" ];
          "quickcheck" = [ "qc" "rand" ];
          "std" = [ "byteorder/std" "rustc-hex/std" "crunchy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1malx8ljgm7v1gbaazkn7iicy5wj0bwcyadj3l727a38ch6bvwj9";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
        ];
        features = {
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.11";
        edition = "2015";
        sha256 = "1kxxb5ndb5dzyp1flajjdxnbwyjw6ml9xvy0pz7b8srjn9ky4qdm";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec 1.1.0";
          }
        ];
        
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.6.0";
        edition = "2015";
        sha256 = "1h7d48mzpi8hwf5cvnq07warkv86pvapzzzf32hvbjsk20yiagp8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unsigned-varint" = rec {
        crateName = "unsigned-varint";
        version = "0.3.2";
        edition = "2018";
        sha256 = "12jxi47xvrl1rbkiq5xakvbrjfl7z49rmgy1cvhl5w4q9fnh33pk";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "futures_codec";
            packageId = "futures_codec";
            optional = true;
          }
        ];
        features = {
          "codec" = [ "bytes" "tokio-util" ];
          "futures" = [ "futures-io" "futures-util" ];
          "futures-codec" = [ "bytes" "futures_codec" ];
        };
        resolvedDefaultFeatures = [ "bytes" "futures-codec" "futures_codec" ];
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1kmfykcwif6ashkwg54gcnhxj03kpba2i9vc7z5rpr0xlgvrwdk0";
        libPath = "src/untrusted.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        
      };
      "url" = rec {
        crateName = "url";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0qcxx9kr0wfawsr83h0kfgxl6dxw4cgrbgxsz7bpkj34qkv19d3m";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];
        
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0s1ijdrsg6917imja2hb07l0z4vbx7ydm8m2i1n9g62fg7r3ki1z";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];
        
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.57";
        edition = "2018";
        sha256 = "1kgpj29wk078gz8nsarjhd86rvsiz54ai12rv3ffiyd7jh3w46vh";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.57";
        edition = "2018";
        sha256 = "0799ilvg5qmr413na7gvq81jxa0ssl3jachwis11lgip1ll1aqs2";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.7";
        edition = "2018";
        sha256 = "1c99qacg8wq761jqdmkx8jqwdsm58ymn0pbi3zxai1ybh3z4xr8x";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (target."feature" == "atomics");
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.57";
        edition = "2018";
        sha256 = "07y15wssqkca98r4ddxs58kginpc0aiwq34ivs9chcnvfdis9a6r";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.57";
        edition = "2018";
        sha256 = "0c34v8n0qx4kfx2sbi4pahcgidkml1p9g80ysvrlw3ww4p1cdla5";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.57";
        edition = "2018";
        sha256 = "042qks1qlph8w0qnckh7llswc20z21k4f709gc0yialmwf5113nx";
        authors = [
          "The wasm-bindgen Developers"
        ];
        
      };
      "wasm-bindgen-webidl" = rec {
        crateName = "wasm-bindgen-webidl";
        version = "0.2.57";
        edition = "2018";
        sha256 = "0p5v6nsb7sm28bjmsdbrf61q1fcn9h6r8x6dfpnwha8wrsd8af3s";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "weedle";
            packageId = "weedle";
          }
        ];
        
      };
      "wasm-timer" = rec {
        crateName = "wasm-timer";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0m2vm4izgy6c6qgdsrabrpf8aaxjg9ckd8ab6g2ck6c6l1jmwk1j";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((target."arch" == "wasm32") && (target."os" == "unknown"));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.9.0";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper";
            target = { target, features }: ((target."arch" == "wasm32") && (target."os" == "unknown"));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ((target."arch" == "wasm32") && (target."os" == "unknown"));
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ((target."arch" == "wasm32") && (target."os" == "unknown"));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ((target."arch" == "wasm32") && (target."os" == "unknown"));
            features = [ "Performance" "Window" ];
          }
        ];
        
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.34";
        edition = "2018";
        sha256 = "0xdp95ml3cpq3m67xj76wm4lg4hs6x6n2s97gp43pff091a2j2ds";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        buildDependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "sourcefile";
            packageId = "sourcefile";
          }
          {
            name = "wasm-bindgen-webidl";
            packageId = "wasm-bindgen-webidl";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "Crypto" "CryptoKey" "MessageEvent" "Performance" "SubtleCrypto" "Window" "Worker" ];
      };
      "webpki" = rec {
        crateName = "webpki";
        version = "0.21.2";
        edition = "2018";
        sha256 = "1vv3x2alvczfy6jhx79c9h00d1nliqf7s5jlvcd6npc6f8chxxgi";
        libPath = "src/webpki.rs";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "default" = [ "std" "trust_anchor_util" ];
          "trust_anchor_util" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "trust_anchor_util" ];
      };
      "webpki-roots 0.18.0" = rec {
        crateName = "webpki-roots";
        version = "0.18.0";
        edition = "2018";
        crateBin = [];
        sha256 = "1d4ss607rgi9pj01zzqa13c1p3m35z314yh6lmjaj4kzvwv5gkci";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "webpki";
            packageId = "webpki";
          }
        ];
        
      };
      "webpki-roots 0.19.0" = rec {
        crateName = "webpki-roots";
        version = "0.19.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0fapdqwbfv0kncplpvbgnr0bjd5a9krlpij9jdzk0mvaa6vz9vzq";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "webpki";
            packageId = "webpki";
          }
        ];
        
      };
      "weedle" = rec {
        crateName = "weedle";
        version = "0.10.0";
        edition = "2015";
        sha256 = "0r0i2kllvkn9jil6cjzxdi1zsc6p1gjyk751w8lyclaii1q3zd1v";
        authors = [
          "Sharad Chand <sharad.d.chand@gmail.com>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
          }
        ];
        
      };
      "which" = rec {
        crateName = "which";
        version = "3.1.0";
        edition = "2015";
        sha256 = "1j14a331qz3dj30hm4kiyxhfvwsycigbmxql0vk056i0g1qd8xal";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "failure" ];
        };
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.8" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "minwinbase" "minwindef" "ntsecapi" "ntstatus" "processenv" "processthreadsapi" "profileapi" "std" "winbase" "wincon" "winerror" "winnt" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" "wtypesbase" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1j839dc6y8vszvrsb7yk0qvs0w6asnahxzbyans37vnsw6vbls3i";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "wincolor" = rec {
        crateName = "wincolor";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1agaf3hcav113i86912ajnw6jxcy4rvkrgyf8gdj8kc031mh3xcn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "minwindef" "wincon" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
          }
        ];
        
      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "x25519-dalek" = rec {
        crateName = "x25519-dalek";
        version = "0.6.0";
        edition = "2018";
        sha256 = "05rjlm157pzzld5dfjcxqzkvmr39601nazjppdrk1yj0jl6gjzv3";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "DebugSteven <debugsteven@gmail.com>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "curve25519-dalek/nightly" ];
          "serde" = [ "our_serde" "curve25519-dalek/serde" ];
          "std" = [ "curve25519-dalek/std" ];
          "u32_backend" = [ "curve25519-dalek/u32_backend" ];
          "u64_backend" = [ "curve25519-dalek/u64_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "u64_backend" ];
      };
      "yamux" = rec {
        crateName = "yamux";
        version = "0.4.5";
        edition = "2018";
        sha256 = "1sjm7dni130yclv31ansa9f1mv1j8qmwd0dr70v8z1ycjfs0nc44";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot 0.10.0";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        
      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1f5547q8l8bpi16yy6lix2gl9rf1qz45lj06bq7wjk525gnw5fiw";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.0.0";
        edition = "2018";
        sha256 = "18lc9xq9dwvmv81y3bqnw20974nbrs7d20rljb1inz7wd7n1w9fy";
        procMacro = true;
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
