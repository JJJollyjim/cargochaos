
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/druid-shell/v0.3.1.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "druid-shell";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "druid-shell" = rec {
      packageId = "druid-shell";
      build = internal.buildRustCrateWithFeatures {
        packageId = "druid-shell";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.4.12";
        edition = "2015";
        sha256 = "1fdiv5m627gh6flp4mpmi1mh647imm9x423licsr11psz97d97yd";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "nodrop";
            packageId = "nodrop";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde-1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "atk" = rec {
        crateName = "atk";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0snyzhyy7rnp9wnbq15irrfwqnpvpd3f7ii0b2xkdw5cfa94kdw6";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "atk-sys/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "v2_30" = [ "atk-sys/v2_30" ];
        };
      };
      "atk-sys" = rec {
        crateName = "atk-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "1c311gxy675681rlm42ynxsblnkidrkvncj001zh409cflgm6rsh";
        libName = "atk_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1chwgimpx5z7xbag7krr9d8asxfqbh683qhgl9kn3hxk2l0djj8x";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.40";
        edition = "2018";
        sha256 = "1skpshz0gszhpmj51p35ci9nf4nmd79s899cfrfs570dgxcpck4j";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.32";
        edition = "2015";
        sha256 = "14c406z8bdmms8a5l8cv79jfkz1mk10qk5p97izf4vai53qparax";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];
        
      };
      "boolinator" = rec {
        crateName = "boolinator";
        version = "2.4.0";
        edition = "2015";
        sha256 = "1nccxzb1dfkjfrgzqaw1a90p26zlvv6nah5ckcpj6bn9a4zqga6g";
        authors = [
          "Daniel Keep <daniel.keep@gmail.com>"
        ];
        
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "2.6.0";
        edition = "2018";
        sha256 = "020psxs5dlm0gdbs83rx2rcavibdshdr0fpzk3mmw65zq8ppz05d";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "collections" = [ "std" ];
          "default" = [ "collections" "std" ];
        };
        resolvedDefaultFeatures = [ "collections" "default" "std" ];
      };
      "cairo-rs" = rec {
        crateName = "cairo-rs";
        version = "0.7.1";
        edition = "2015";
        sha256 = "171m98g41avp5mmshqir4ka21napp7ma5fx45wi9mw5hwdyv8pg0";
        libName = "cairo";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "glib";
            packageId = "glib";
            optional = true;
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            optional = true;
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "use_glib" ];
          "dox" = [ "cairo-sys-rs/dox" "glib/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "pdf" = [ "cairo-sys-rs/pdf" ];
          "png" = [ "cairo-sys-rs/png" ];
          "ps" = [ "cairo-sys-rs/ps" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "svg" = [ "cairo-sys-rs/svg" ];
          "use_glib" = [ "glib" "glib-sys" "gobject-sys" "cairo-sys-rs/use_glib" ];
          "v1_14" = [ "cairo-sys-rs/v1_14" ];
          "v1_16" = [ "v1_14" "cairo-sys-rs/v1_16" ];
          "xcb" = [ "cairo-sys-rs/xcb" ];
          "xlib" = [ "cairo-sys-rs/xlib" ];
        };
        resolvedDefaultFeatures = [ "default" "glib" "glib-sys" "gobject-sys" "use_glib" ];
      };
      "cairo-sys-rs" = rec {
        crateName = "cairo-sys-rs";
        version = "0.9.0";
        edition = "2015";
        sha256 = "1jnwapza39pf9bkvj9paayybyv9rxkf5wf3ai08w2y1sc02fr8ch";
        libName = "cairo_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "windef" ];
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = [ "x11/dox" ];
          "use_glib" = [ "glib-sys" ];
          "v1_16" = [ "v1_14" ];
          "xlib" = [ "x11" ];
        };
        resolvedDefaultFeatures = [ "glib-sys" "use_glib" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.46";
        edition = "2018";
        crateBin = [];
        sha256 = "177rxsz16y5cf3k5xwhqbj13kmiww8xpq0qbqhc2rsn4sdbd64q2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "num_cpus" "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cocoa" = rec {
        crateName = "cocoa";
        version = "0.19.1";
        edition = "2015";
        sha256 = "0034vahbfv574q4b63rj241b8rnka5cjiqsqc6wiggnin9l7g7zj";type = [ "rlib" ];
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "objc";
            packageId = "objc";
          }
        ];
        
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.6.4";
        edition = "2015";
        sha256 = "0va97wf49c8dzm9c8pgyk1jn7z21rl0bj1syf2zz5m2z2hzy1f95";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.6.2";
        edition = "2015";
        sha256 = "0fzsw1j9g1x598yhwklg59l15hwzc0pyvs01w9fg2kin4598mjp7";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.17.3";
        edition = "2015";
        sha256 = "1acm3vygngnilzlr6klym5ywh7kfzh2xxrh2l41152hwmdl0jyan";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "direct2d" = rec {
        crateName = "direct2d";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0x9y8mzdzyv62jj3yyhckc9g8wkksazpx60nmv8m7ckyhl8gz9kz";
        authors = [
          "Connie Hilarides <conni_h@outlook.com>"
        ];
        dependencies = [
          {
            name = "directwrite";
            packageId = "directwrite";
            target = { target, features }: target."windows";
          }
          {
            name = "dxgi";
            packageId = "dxgi";
            target = { target, features }: target."windows";
          }
          {
            name = "either";
            packageId = "either";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "d2d1_1" "d3d11" "dwrite" "winbase" "libloaderapi" "errhandlingapi" "windef" "winuser" ];
          }
          {
            name = "wio";
            packageId = "wio";
            target = { target, features }: target."windows";
          }
        ];
        features = {
        };
      };
      "direct3d11" = rec {
        crateName = "direct3d11";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1ymfyjwjrr079m677dfr5zh1gx94mwi1nvxqdz5nd84bwqlsjnii";
        authors = [
          "Connie Hilarides <conni_h@outlook.com>"
        ];
        dependencies = [
          {
            name = "dxgi";
            packageId = "dxgi";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "d3d11" "winerror" ];
          }
          {
            name = "wio";
            packageId = "wio";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "directwrite" = rec {
        crateName = "directwrite";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0g884bfyr0hk2bd9a1960vz8r0bwl8ranp5gihdl271mx4wxgp4c";
        authors = [
          "Connie Hilarides <conni_h@outlook.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "dwrite" "winbase" "winnls" ];
          }
          {
            name = "wio";
            packageId = "wio";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "druid-shell" = rec {
        crateName = "druid-shell";
        version = "0.3.1";
        edition = "2018";
        src = pkgs.callPackage ./tarball-v0.3.1.nix {};
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "cocoa";
            packageId = "cocoa";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "direct2d";
            packageId = "direct2d";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "directwrite";
            packageId = "directwrite";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "gdk";
            packageId = "gdk";
            optional = true;
          }
          {
            name = "gdk";
            packageId = "gdk";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            optional = true;
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "gio";
            packageId = "gio";
            optional = true;
          }
          {
            name = "gio";
            packageId = "gio";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "glib";
            packageId = "glib";
            optional = true;
          }
          {
            name = "glib";
            packageId = "glib";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            optional = true;
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "gtk";
            packageId = "gtk";
            optional = true;
          }
          {
            name = "gtk";
            packageId = "gtk";
            target = { target, features }: (target."os" == "linux");
            features = [ "v3_20" ];
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
            optional = true;
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "piet-common";
            packageId = "piet-common";
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."os" == "windows");
            features = [ "d2d1_1" "dwrite" "winbase" "libloaderapi" "errhandlingapi" "winuser" "shellscalingapi" "shobjidl" "combaseapi" "synchapi" "dxgi1_3" "dcomp" "d3d11" "dwmapi" "wincon" "fileapi" "processenv" "winbase" "handleapi" ];
          }
          {
            name = "wio";
            packageId = "wio";
            target = { target, features }: (target."os" == "windows");
          }
        ];
        features = {
          "use_gtk" = [ "gtk" "gio" "gdk" "gdk-sys" "glib" "glib-sys" "cairo-rs" ];
        };
        resolvedDefaultFeatures = [ "cairo-rs" "gdk" "gdk-sys" "gio" "glib" "glib-sys" "gtk" "gtk-sys" "use_gtk" ];
      };
      "dxgi" = rec {
        crateName = "dxgi";
        version = "0.1.7";
        edition = "2015";
        sha256 = "14g0q6l6ldz4m0wky0b81cr4jnxcrdx7l8bx4r02msb5czyvnf8n";
        authors = [
          "Connie Hilarides <conni_h@outlook.com>"
        ];
        dependencies = [
          {
            name = "boolinator";
            packageId = "boolinator";
            target = { target, features }: target."windows";
          }
          {
            name = "num";
            packageId = "num";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "dxgi1_2" "guiddef" "minwindef" "unknwnbase" "winbase" "windef" "winerror" "winnt" ];
          }
          {
            name = "wio";
            packageId = "wio";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.3";
        edition = "2015";
        sha256 = "1qyz1b1acad6w0k5928jw5zaq900zhsk7p8dlcp4hh61w4f6n7xv";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.6";
        edition = "2015";
        sha256 = "1nay5c2cgi40kp84rbiir1dgwlh9aap9jazbnxfmqrkpr49ky9zq";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.6";
        edition = "2015";
        sha256 = "022xfb9wcs1bdssfm2airsrfxpn2ccpbyh1ld2wf9483isvjbhhb";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        
      };
      "fragile" = rec {
        crateName = "fragile";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1yf2hmkw52x2dva3c9km1x8c2z5kwby7qqn8kz5ms3gs480i9y05";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        
      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        
      };
      "gdk" = rec {
        crateName = "gdk";
        version = "0.11.0";
        edition = "2015";
        sha256 = "1m92zqfbw6cr7g59vj20j7fr7kpd373lrra732in2fhzyjayjhv2";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango";
            packageId = "pango";
          }
        ];
        features = {
          "dox" = [ "gdk-sys/dox" "glib/dox" "gio/dox" "gdk-pixbuf/dox" "cairo-rs/dox" "pango/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" "cairo-rs/embed-lgpl-docs" "gdk-pixbuf/embed-lgpl-docs" "gio/embed-lgpl-docs" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" "cairo-rs/purge-lgpl-docs" "gdk-pixbuf/purge-lgpl-docs" "gio/purge-lgpl-docs" ];
          "v3_16" = [ "gdk-sys/v3_16" ];
          "v3_18" = [ "v3_16" "gdk-sys/v3_18" ];
          "v3_20" = [ "v3_18" "gdk-sys/v3_20" ];
          "v3_22" = [ "v3_20" "gdk-sys/v3_22" ];
          "v3_24" = [ "v3_22" "gdk-sys/v3_24" ];
        };
        resolvedDefaultFeatures = [ "v3_16" ];
      };
      "gdk-pixbuf" = rec {
        crateName = "gdk-pixbuf";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1k2g3w2p57m68bi5sldvkmgjgslgqswrjsijjhqaibdvw67409lp";
        libName = "gdk_pixbuf";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "glib/dox" "gdk-pixbuf-sys/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "futures" = [ "futures-preview" "fragile" "glib/futures" "gio/futures" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "v2_32" = [ "gdk-pixbuf-sys/v2_32" ];
          "v2_36" = [ "v2_32" "gdk-pixbuf-sys/v2_36" ];
          "v2_36_8" = [ "v2_36" "gdk-pixbuf-sys/v2_36_8" ];
        };
      };
      "gdk-pixbuf-sys" = rec {
        crateName = "gdk-pixbuf-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0rf467a6344sl84divdklck98a0nbmna2ick184bjr2ppy57gmmi";
        libName = "gdk_pixbuf_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_36" = [ "v2_32" ];
          "v2_36_8" = [ "v2_36" ];
        };
      };
      "gdk-sys" = rec {
        crateName = "gdk-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0yq6p3jr8v5wg8l6445lbcvmv3v30kdmnlsvax87y4hjf8shdgiy";
        libName = "gdk_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v3_18" = [ "v3_16" ];
          "v3_20" = [ "v3_18" ];
          "v3_22" = [ "v3_20" ];
          "v3_24" = [ "v3_22" ];
        };
        resolvedDefaultFeatures = [ "v3_16" ];
      };
      "gio" = rec {
        crateName = "gio";
        version = "0.7.0";
        edition = "2015";
        sha256 = "1qv0wc1hqyb81c03h81s3xrl9jslrw23fr4yhygxbhih9k9vaqb2";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fragile";
            packageId = "fragile";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "gio-sys/dox" "glib/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "futures" = [ "futures-preview" "glib/futures" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "subclassing" = [ "glib/subclassing" ];
          "v2_44" = [ "gio-sys/v2_44" "glib/v2_44" ];
          "v2_46" = [ "v2_44" "gio-sys/v2_46" "glib/v2_46" ];
          "v2_48" = [ "v2_46" "gio-sys/v2_48" "glib/v2_48" ];
          "v2_50" = [ "v2_48" "gio-sys/v2_50" "glib/v2_50" ];
          "v2_52" = [ "v2_50" "gio-sys/v2_52" "glib/v2_52" ];
          "v2_54" = [ "v2_52" "gio-sys/v2_54" "glib/v2_54" ];
          "v2_56" = [ "v2_54" "gio-sys/v2_56" "glib/v2_56" ];
          "v2_58" = [ "v2_56" "gio-sys/v2_58" "glib/v2_58" ];
        };
        resolvedDefaultFeatures = [ "v2_44" ];
      };
      "gio-sys" = rec {
        crateName = "gio-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "1zkwcmjhbwr8pj22kj7mzljgjvab1hdzmiswvp2jqbm3f1m8b2vp";
        libName = "gio_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_48" = [ "v2_46" ];
          "v2_50" = [ "v2_48" ];
          "v2_52" = [ "v2_50" ];
          "v2_54" = [ "v2_52" ];
          "v2_56" = [ "v2_54" ];
          "v2_58" = [ "v2_56" ];
        };
        resolvedDefaultFeatures = [ "v2_44" ];
      };
      "glib" = rec {
        crateName = "glib";
        version = "0.8.2";
        edition = "2015";
        sha256 = "0ysy87zrwyzhfpf3d8rkyyr3amwj85wky05fsl7kx95s84l269xy";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "glib-sys/dox" "gobject-sys/dox" ];
          "futures" = [ "futures-preview" ];
          "v2_44" = [ "glib-sys/v2_44" "gobject-sys/v2_44" ];
          "v2_46" = [ "v2_44" "glib-sys/v2_46" "gobject-sys/v2_46" ];
          "v2_48" = [ "v2_46" "glib-sys/v2_48" ];
          "v2_50" = [ "v2_48" "glib-sys/v2_50" ];
          "v2_52" = [ "v2_50" "glib-sys/v2_52" ];
          "v2_54" = [ "v2_52" "glib-sys/v2_54" "gobject-sys/v2_54" ];
          "v2_56" = [ "v2_54" "glib-sys/v2_56" ];
          "v2_58" = [ "v2_56" "glib-sys/v2_58" ];
        };
        resolvedDefaultFeatures = [ "v2_44" ];
      };
      "glib-sys" = rec {
        crateName = "glib-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0qxq241nlmx3zggfgzf5fp2xa2ab6313jl1ixyhgk75wkwbak1jb";
        libName = "glib_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_48" = [ "v2_46" ];
          "v2_50" = [ "v2_48" ];
          "v2_52" = [ "v2_50" ];
          "v2_54" = [ "v2_52" ];
          "v2_56" = [ "v2_54" ];
          "v2_58" = [ "v2_56" ];
        };
        resolvedDefaultFeatures = [ "v2_44" ];
      };
      "gobject-sys" = rec {
        crateName = "gobject-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0jv0yf9kwlcpir3sp0kgyq820cg36s609l3adxvwlir4434mpmb1";
        libName = "gobject_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_54" = [ "v2_46" ];
          "v2_58" = [ "v2_54" ];
        };
        resolvedDefaultFeatures = [ "v2_44" ];
      };
      "gtk" = rec {
        crateName = "gtk";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0q3a543jdplmxjbdrz5h2m3m0nzkqxsjpy9kc6wqailx4ms117vh";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk";
            packageId = "atk";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk";
            packageId = "gdk";
          }
          {
            name = "gdk-pixbuf";
            packageId = "gdk-pixbuf";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gtk-sys";
            packageId = "gtk-sys";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango";
            packageId = "pango";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            target = {target, features}: (target."os" == "macos");
          }
        ];
        features = {
          "dox" = [ "gdk/dox" "gtk-sys/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" "gdk/embed-lgpl-docs" ];
          "futures" = [ "futures-preview" "fragile" "gio/futures" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" "gdk/purge-lgpl-docs" ];
          "subclassing" = [ "glib/subclassing" "gio/subclassing" ];
          "v3_16" = [ "gtk-sys/v3_16" "gio/v2_44" "gdk/v3_16" ];
          "v3_18" = [ "v3_16" "gtk-sys/v3_18" ];
          "v3_20" = [ "v3_18" "gtk-sys/v3_20" ];
          "v3_22" = [ "v3_20" "gtk-sys/v3_22" "gdk/v3_22" ];
          "v3_22_20" = [ "v3_22" "gtk-sys/v3_22" ];
          "v3_22_26" = [ "v3_22_20" "gtk-sys/v3_22_26" ];
          "v3_22_27" = [ "v3_22_26" "gtk-sys/v3_22_27" ];
          "v3_22_29" = [ "v3_22_27" "gtk-sys/v3_22_29" ];
          "v3_22_30" = [ "v3_22_29" "gtk-sys/v3_22_30" ];
          "v3_24" = [ "v3_22_30" "gtk-sys/v3_24" ];
        };
        resolvedDefaultFeatures = [ "v3_16" "v3_18" "v3_20" ];
      };
      "gtk-sys" = rec {
        crateName = "gtk-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "09a0zi814h8w36n38v4h2gv5nx783baj5rfns4aij7dfjxa3kndv";
        libName = "gtk_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "atk-sys";
            packageId = "atk-sys";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "gdk-pixbuf-sys";
            packageId = "gdk-pixbuf-sys";
          }
          {
            name = "gdk-sys";
            packageId = "gdk-sys";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v3_18" = [ "v3_16" ];
          "v3_20" = [ "v3_18" ];
          "v3_22" = [ "v3_20" ];
          "v3_22_26" = [ "v3_22_6" ];
          "v3_22_27" = [ "v3_22_26" ];
          "v3_22_29" = [ "v3_22_27" ];
          "v3_22_30" = [ "v3_22_29" ];
          "v3_22_6" = [ "v3_22" ];
          "v3_24" = [ "v3_22_30" ];
        };
        resolvedDefaultFeatures = [ "v3_16" "v3_18" "v3_20" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.30";
        edition = "2018";
        sha256 = "0qkyh5lwd911l1v9zq8na8j6f0jnl64k2kmk79703qvsxfjnq3x6";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        
      };
      "kurbo" = rec {
        crateName = "kurbo";
        version = "0.5.4";
        edition = "2018";
        sha256 = "19xaraynprlp9a71ragzry69p6gpx3gxjsp1h0x4b1nh4cs92bp0";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
        ];
        
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.65";
        edition = "2015";
        sha256 = "1s14bjxnz6haw0gr1h3j4sr7s2s407hpgm8dxhwnl7yzgxia0c8s";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.2.1";
        edition = "2015";
        sha256 = "13j6ji9x9ydpi9grbss106gqqr3xn3bcfp28aydqfa4751qrfmw8";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "use_std" ];
      };
      "nodrop" = rec {
        crateName = "nodrop";
        version = "0.1.14";
        edition = "2015";
        sha256 = "1fz1v9r8ijacf0hlq0pdv5l9mz8vgqg1snmhvpjmi9aci1b4mvvj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_union" = [ "nodrop-union" ];
        };
      };
      "nom" = rec {
        crateName = "nom";
        version = "4.2.3";
        edition = "2015";
        sha256 = "1mkvby8b4m61p4g1px0pwr58yfkphyp1jcfbp4qfp7l6iqdaklia";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "regexp" = [ "regex" ];
          "regexp_macros" = [ "regexp" "lazy_static" ];
          "std" = [ "alloc" "memchr/use_std" ];
          "verbose-errors" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "num" = rec {
        crateName = "num";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0vhmyvfan380f86895z0f8rjscjc6qvwcmyvm15370ik2mjas0s7";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            optional = true;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-iter";
            packageId = "num-iter";
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "complex" = [ "num-complex" ];
          "default" = [ "bigint" "complex" "rational" "rustc-serialize" ];
          "rational" = [ "num-rational" ];
          "rustc-serialize" = [ "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
        };
        resolvedDefaultFeatures = [ "bigint" "complex" "default" "num-bigint" "num-complex" "num-rational" "rational" "rustc-serialize" ];
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.1.44";
        edition = "2015";
        sha256 = "1hg80xd7vd5yqzks1h0zk2fcgqnf84m2cdj9q4cffk581nnrjf76";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
          }
          {
            name = "rustc-serialize";
            packageId = "rustc-serialize";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand";
          }
        ];
        features = {
          "default" = [ "rand" "rustc-serialize" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "rustc-serialize" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.1.43";
        edition = "2015";
        sha256 = "0mln3h018lar511hadjwfkbyq1561s8kdzfg8aagbakqg0fn725j";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustc-serialize";
            packageId = "rustc-serialize";
            optional = true;
          }
        ];
        features = {
          "default" = [ "rustc-serialize" ];
        };
        resolvedDefaultFeatures = [ "default" "rustc-serialize" ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.41";
        edition = "2015";
        sha256 = "02dwjjpfbi16c71fq689s4sw3ih52cvfzr5z5gs6qpr5z0g58pmq";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.39";
        edition = "2015";
        sha256 = "0bhk2qbr3261r6zvfc58lz4spfqjhvdripxgz5mks5rd85r55gbn";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0kkqb8j3b3nis9hs4ww4hkrmb4a6v9sr9al08xmwhgvmpms4qcgf";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            optional = true;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustc-serialize";
            packageId = "rustc-serialize";
            optional = true;
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "default" = [ "bigint" "rustc-serialize" ];
        };
        resolvedDefaultFeatures = [ "bigint" "default" "num-bigint" "rustc-serialize" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0clvrm34rrqc8p6gq5ps5fcgws3kgq5knh7nlqxf2ayarwks9abb";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
        };
      };
      "pango" = rec {
        crateName = "pango";
        version = "0.7.0";
        edition = "2015";
        sha256 = "11np7nxb69g3kid2l78b7k519x1wk1c3f9yy7swgzy24n5qs0grr";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        features = {
          "dox" = [ "pango-sys/dox" "glib/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "v1_38" = [ "pango-sys/v1_38" ];
          "v1_40" = [ "v1_38" ];
          "v1_42" = [ "v1_40" "pango-sys/v1_42" ];
        };
      };
      "pango-sys" = rec {
        crateName = "pango-sys";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0gr1z3cb1xd82qjwxrm025xhwy8wmmbn4r9jw1srh3w2mny7ms8y";
        libName = "pango_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v1_38" = [ "v1_36_7" ];
          "v1_42" = [ "v1_38" ];
        };
      };
      "piet" = rec {
        crateName = "piet";
        version = "0.0.7";
        edition = "2018";
        sha256 = "1ygiszzad73vbiiacrcxpccaq2jwzlbmbdv7zdknis7fas1j9xhb";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "kurbo";
            packageId = "kurbo";
          }
        ];
        
      };
      "piet-cairo" = rec {
        crateName = "piet-cairo";
        version = "0.0.7";
        edition = "2018";
        sha256 = "1r83h399mfh4zagx1r9mldmsy3h6754w5k20z9rbl0h5qvy4vsvk";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            usesDefaultFeatures = false;
          }
          {
            name = "piet";
            packageId = "piet";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        devDependencies = [
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            usesDefaultFeatures = false;
            features = [ "png" ];
          }
        ];
        
      };
      "piet-common" = rec {
        crateName = "piet-common";
        version = "0.0.7";
        edition = "2018";
        sha256 = "1z0kmh6zzvpi2w6z8jd05ki8xx32inkfmmqpdkinsar27p3qwy1h";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."arch" == "wasm32") || (target."os" == "windows")));
          }
          {
            name = "direct2d";
            packageId = "direct2d";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "direct3d11";
            packageId = "direct3d11";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "directwrite";
            packageId = "directwrite";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "dxgi";
            packageId = "dxgi";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "piet";
            packageId = "piet";
          }
          {
            name = "piet-cairo";
            packageId = "piet-cairo";
            optional = true;
          }
          {
            name = "piet-cairo";
            packageId = "piet-cairo";
            target = { target, features }: (!((target."arch" == "wasm32") || (target."os" == "windows")));
          }
          {
            name = "piet-direct2d";
            packageId = "piet-direct2d";
            optional = true;
          }
          {
            name = "piet-direct2d";
            packageId = "piet-direct2d";
            target = { target, features }: (target."os" == "windows");
          }
          {
            name = "piet-web";
            packageId = "piet-web";
            optional = true;
          }
          {
            name = "piet-web";
            packageId = "piet-web";
            target = { target, features }: (target."arch" == "wasm32");
          }
        ];
        features = {
          "cairo" = [ "piet-cairo" "cairo-rs" ];
          "d2d" = [ "piet-direct2d" ];
          "web" = [ "piet-web" ];
        };
      };
      "piet-direct2d" = rec {
        crateName = "piet-direct2d";
        version = "0.0.7";
        edition = "2018";
        sha256 = "1pixqm7fhw9ml9r6xzz5m57hqlhd3i3d94s7wqz8basbbg9ll5gi";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "direct2d";
            packageId = "direct2d";
          }
          {
            name = "directwrite";
            packageId = "directwrite";
          }
          {
            name = "dxgi";
            packageId = "dxgi";
          }
          {
            name = "piet";
            packageId = "piet";
          }
          {
            name = "winapi";
            packageId = "winapi";
          }
        ];
        
      };
      "piet-web" = rec {
        crateName = "piet-web";
        version = "0.0.7";
        edition = "2018";
        sha256 = "0pfq96csaqrjl69csimi8cmfgghk1a9f8qh0z02mqmp8viga9bmh";type = [ "cdylib" "rlib" ];
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "piet";
            packageId = "piet";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "Window" "CanvasGradient" "CanvasRenderingContext2d" "CanvasWindingRule" "Document" "Element" "HtmlCanvasElement" "ImageBitmap" "ImageData" "TextMetrics" ];
          }
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.17";
        edition = "2015";
        sha256 = "0xynnaxdv0gzadlw4h79j855k0q7rj4zb9xb1vk00nc6ss559nh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.6";
        edition = "2018";
        sha256 = "09rgb5ab0jgw39kyad0lgqs4nb9yaf7mwcrgxqnsxbn4il54g7lw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.4.6";
        edition = "2015";
        sha256 = "14qjfv3gggzhnma20k0sc1jf8y6pplsaq7n1j9ls5c8kf2wl0a2m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "nightly" = [ "i128_support" ];
          "std" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "default" "libc" "std" ];
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
      };
      "rand_core 0.4.2" = rec {
        crateName = "rand_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1p09ynysrq1vcdlmcqnapq4qakl2yd1ng3kxh3qscpx09k2a6cww";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" ];
        };
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-serialize" = rec {
        crateName = "rustc-serialize";
        version = "0.3.24";
        edition = "2015";
        sha256 = "1nkg3vasg7nk80ffkazizgiyv3hb1l9g3d8h17cajbkx538jiwfw";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "sourcefile" = rec {
        crateName = "sourcefile";
        version = "0.1.4";
        edition = "2015";
        sha256 = "1lwa6973zs4bgj29my7agfjgk4nw9hp6j7dfnr13nid85fw7rxsb";
        authors = [
          "Richard Dodd <richard.o.dodd@gmail.com>"
        ];
        
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.7";
        edition = "2018";
        sha256 = "0k34zdvdcqcynwfqi8zdlcvd7mr8i8y742sbb4sk03qd6arysyqf";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.1";
        edition = "2018";
        sha256 = "00x28sjln2w7vfmnh5m98d7wzbm49q2cz20jr90h834kamc5l21z";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0vsbvsz0ryxb35dy9j4anxvy8zlaplmjmi0a4z4l64bc135cz3fv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1mzsxdnv8lzxcddkn6bn0yf2wmamc1gsp1jr5ls7g2zx4mi55xa9";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.53";
        edition = "2018";
        sha256 = "0hdf48cf4r903jnv0g3x1f3lv6fzl3sa9i9mpqxwafrvbiyxaaac";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.53";
        edition = "2018";
        sha256 = "0q0smpvvvkgiqc7amn8pha5794kkz6h7f4jd6slkdgz5jgx6ha5a";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.53";
        edition = "2018";
        sha256 = "056fpczl6bcl6vhz2bwa18jrdd4ggcjd3r9fv7rin91ag2a0bs21";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.53";
        edition = "2018";
        sha256 = "0mwiiig0f2ia0l6aybgii9gdmvg79pflp670knh2rndial1rbfbl";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "visit" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.53";
        edition = "2018";
        sha256 = "0s5d91p8q02srs49bk68b1ijgnq3zc9sasryvvrjwrwrmmkzx4vl";
        authors = [
          "The wasm-bindgen Developers"
        ];
        
      };
      "wasm-bindgen-webidl" = rec {
        crateName = "wasm-bindgen-webidl";
        version = "0.2.53";
        edition = "2018";
        sha256 = "17dm1sc1jsl26kff928g0pg876xg7qdvg5l9j0q6prhvhfldjwl2";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "weedle";
            packageId = "weedle";
          }
        ];
        
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1kk1w7rkl6d3jz2961l6mv9kwgiisvi6lwmaxpd4wf36bj7g6ch2";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        buildDependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "sourcefile";
            packageId = "sourcefile";
          }
          {
            name = "wasm-bindgen-webidl";
            packageId = "wasm-bindgen-webidl";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "CanvasGradient" "CanvasRenderingContext2d" "CanvasWindingRule" "Document" "Element" "HtmlCanvasElement" "ImageBitmap" "ImageData" "TextMetrics" "Window" ];
      };
      "weedle" = rec {
        crateName = "weedle";
        version = "0.10.0";
        edition = "2015";
        sha256 = "0r0i2kllvkn9jil6cjzxdi1zsc6p1gjyk751w8lyclaii1q3zd1v";
        authors = [
          "Sharad Chand <sharad.d.chand@gmail.com>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
          }
        ];
        
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "combaseapi" "consoleapi" "d2d1_1" "d3d11" "dcomp" "dwmapi" "dwrite" "dxgi1_2" "dxgi1_3" "errhandlingapi" "fileapi" "guiddef" "handleapi" "libloaderapi" "minwinbase" "minwindef" "ntdef" "ntsecapi" "processenv" "processthreadsapi" "profileapi" "shellscalingapi" "shobjidl" "std" "synchapi" "sysinfoapi" "timezoneapi" "unknwnbase" "winbase" "wincon" "windef" "winerror" "winnls" "winnt" "winuser" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "wio" = rec {
        crateName = "wio";
        version = "0.2.2";
        edition = "2015";
        sha256 = "199p404fp96w1f1c93bf1jrvaqwypxf3hmmldhww4jk4yhr9j4jx";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "minwindef" "processthreadsapi" "std" "unknwnbase" "wincon" "winnt" ];
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
