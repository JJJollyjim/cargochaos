
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/mdbook-tag/v0.0.2.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "mdbook-tag";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "mdbook-tag" = rec {
      packageId = "mdbook-tag";
      build = internal.buildRustCrateWithFeatures {
        packageId = "mdbook-tag";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "0.7.6";
        edition = "2015";
        sha256 = "0b8dh20fhdc59dhhnfi89n2bi80a8zbagzd5c122hf1vv2amxysq";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ammonia" = rec {
        crateName = "ammonia";
        version = "3.0.0";
        edition = "2018";
        sha256 = "0fl2631yrpz1g9d0497b6ihaxlz1dxcf4l7n159s1zz59cgnw9ly";
        authors = [
          "Michael Howell <michael@notriddle.com>"
        ];
        dependencies = [
          {
            name = "html5ever";
            packageId = "html5ever";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "tendril";
            packageId = "tendril";
          }
          {
            name = "url";
            packageId = "url 2.1.0";
          }
        ];
        
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.13";
        edition = "2015";
        sha256 = "140sswp1bwqwc4zk80bxkbnfb3g936hgrb77g9g0k1zcld3wc0qq";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1chwgimpx5z7xbag7krr9d8asxfqbh683qhgl9kn3hxk2l0djj8x";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.40";
        edition = "2018";
        sha256 = "1skpshz0gszhpmj51p35ci9nf4nmd79s899cfrfs570dgxcpck4j";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.32";
        edition = "2015";
        sha256 = "14c406z8bdmms8a5l8cv79jfkz1mk10qk5p97izf4vai53qparax";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.9.3";
        edition = "2015";
        sha256 = "0hs62r35bgxslawyrn1vp9rmvrkkm76fqv0vqcwd048vs876r7a8";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "safemem";
            packageId = "safemem";
          }
        ];
        
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.7.3";
        edition = "2015";
        sha256 = "12v8wizynqin0hqf140kmp9s38q223mp1b0hkqk8j5pk8720v560";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        
      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1xbkmysiz23vimd17rnsjpw9bgjxipwfslwyygqlkx4in3dxwygs";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byte-tools";
            packageId = "byte-tools";
          }
        ];
        
      };
      "byte-tools" = rec {
        crateName = "byte-tools";
        version = "0.3.1";
        edition = "2015";
        sha256 = "1mqi29wsm8njpl51pfwr31wmpzs5ahlcb40wsjyd92l90ixcmdg3";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.3.2";
        edition = "2015";
        sha256 = "1xbwjlmq2ziqjmjvkqxdx1yh136xxhilxd40bky1w4d7hn4xvhx7";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "0.4.12";
        edition = "2015";
        sha256 = "0768a55q2fsqdjsvcv98ndg9dq7w2g44dvq1avhwpxrdzbydyvr0";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
        ];
        features = {
          "i128" = [ "byteorder/i128" ];
        };
      };
      "c2-chacha" = rec {
        crateName = "c2-chacha";
        version = "0.2.3";
        edition = "2018";
        sha256 = "1fzn2n9k51b8wp4m41pkdzwlk1dbkjb6ha9rqdp4jfmzl753hhi1";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            rename = "ppv-lite86";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "simd" "rustcrypto_api" ];
          "rustcrypto_api" = [ "stream-cipher" "byteorder" ];
          "simd" = [ "ppv-lite86/simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.47";
        edition = "2018";
        crateBin = [];
        sha256 = "1f08560cwbalni1fc2jcmh1dszl3rc31azvr45bgz8vhrs6hb1xa";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "num_cpus" "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.10";
        edition = "2015";
        sha256 = "00dw7k11hmkm7yhc1v9pi0lrk0n28k4r3rh9g9pk3bkb9m50p19i";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
        ];
        features = {
          "bench" = [ "std" ];
          "clock" = [ "time" "std" ];
          "default" = [ "clock" "std" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "std" "time" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "1nf6ld3bims1n5vfzhkvcb55pdzh04bbhzf8nil5vvw05nxzarsh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "cloudabi" = rec {
        crateName = "cloudabi";
        version = "0.0.3";
        edition = "2015";
        sha256 = "0kxcg83jlihy0phnd2g8c2c303px3l2p3pkjz357ll6llnd5pz6x";
        libPath = "cloudabi.rs";
        authors = [
          "Nuxi (https://nuxi.nl/) and contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "default" = [ "bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" "default" ];
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.8.6";
        edition = "2015";
        sha256 = "1q2bwb3lb4ypxxj2qna5jfrhh86ya16mxf257ryab8v2pj8dcn4i";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.8.6";
        edition = "2015";
        sha256 = "10pgybkvnr674j2xr1wvsipzd3gwishf7j8hgq91wfb5jic6i8yj";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "syn/full" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.8.6";
        edition = "2015";
        sha256 = "1c87ka0valy3an1c4qvmg6q7yq3zcnij1phc4j2l65sfpn3qjki4";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
        ];
        
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1madjl27f3kj5ql7kwgvb9c8b7yb7bv7yfgx7rqzj4i3fp4cil7k";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.5.3";
        edition = "2015";
        sha256 = "1qyz1b1acad6w0k5928jw5zaq900zhsk7p8dlcp4hh61w4f6n7xv";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "elasticlunr-rs" = rec {
        crateName = "elasticlunr-rs";
        version = "2.3.6";
        edition = "2015";
        sha256 = "093rzzq7j8vm54h371mgnc8hk2zg5i1i0n9mssybp3f3fq4n4spn";
        libName = "elasticlunr";
        authors = [
          "Matt Ickstadt <mattico8@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "strum";
            packageId = "strum";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
        ];
        features = {
          "da" = [ "rust-stemmers" ];
          "de" = [ "rust-stemmers" ];
          "default" = [ "languages" ];
          "du" = [ "rust-stemmers" ];
          "es" = [ "rust-stemmers" ];
          "fi" = [ "rust-stemmers" ];
          "fr" = [ "rust-stemmers" ];
          "it" = [ "rust-stemmers" ];
          "languages" = [ "da" "de" "du" "es" "fi" "fr" "it" "pt" "ro" "ru" "sv" "tr" ];
          "nightly" = [ "bench" ];
          "pt" = [ "rust-stemmers" ];
          "ro" = [ "rust-stemmers" ];
          "ru" = [ "rust-stemmers" ];
          "sv" = [ "rust-stemmers" ];
          "tr" = [ "rust-stemmers" ];
        };
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.6.2";
        edition = "2015";
        sha256 = "1lx2s5nk96xx4i3m4zc4ghqgi8kb07dsnyiv8jk2clhax42dxz5a";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log 0.4.8";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "error-chain" = rec {
        crateName = "error-chain";
        version = "0.12.1";
        edition = "2015";
        crateBin = [];
        sha256 = "1ndpw1ny2kxqpw6k1shq8k56z4vfpk4xz9zr8ay988k0rffrxd1s";
        authors = [
          "Brian Anderson <banderson@mozilla.com>"
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
          "Yamakaky <yamakaky@yamaworld.fr>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.1.5";
          }
        ];
        features = {
          "default" = [ "backtrace" "example_generated" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "example_generated" ];
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.6";
        edition = "2015";
        sha256 = "1nay5c2cgi40kp84rbiir1dgwlh9aap9jazbnxfmqrkpr49ky9zq";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.6";
        edition = "2015";
        sha256 = "022xfb9wcs1bdssfm2airsrfxpn2ccpbyh1ld2wf9483isvjbhhb";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.11";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "fake-simd" = rec {
        crateName = "fake-simd";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1vfylvk4va2ivqx85603lyqqp0zk52cgbs4n5nfbbbqx577qm2p8";
        authors = [
          "The Rust-Crypto Project Developers"
        ];
        
      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0zfc90802dbw11bx6kmm8zw6r88k7glm4q6l8riqw35an3dd9xhz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "fileapi" "minwindef" "winbase" ];
          }
        ];
        
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.6";
        edition = "2015";
        sha256 = "1ww56bi1r5b8id3ns9j3qxbi7w5h005rzhiryy0zi9h97raqbb9g";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "fsevent" = rec {
        crateName = "fsevent";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1djxnc2fmv265xqf1iyfz56smh13v9r1p0w9125wjg6k3fyx3dss";
        authors = [
          "Pierre Baillet <pierre@baillet.name>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fsevent-sys";
            packageId = "fsevent-sys";
          }
        ];
        
      };
      "fsevent-sys" = rec {
        crateName = "fsevent-sys";
        version = "2.0.1";
        edition = "2015";
        sha256 = "18246vxk7rqn52m0sfrhivxq802i34p2wqqx5zsa0pamjj5086zl";
        authors = [
          "Pierre Baillet <pierre@baillet.name>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "fuchsia-cprng" = rec {
        crateName = "fuchsia-cprng";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1fnkqrbz7ixxzsb04bsz9p0zzazanma8znfdqjvh39n14vapfvx0";
        authors = [
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        
      };
      "fuchsia-zircon" = rec {
        crateName = "fuchsia-zircon";
        version = "0.3.3";
        edition = "2015";
        sha256 = "10jxc5ks1x06gpd0xg51kcjrxr35nj6qhx2zlc5n7bmskv3675rf";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
          }
        ];
        
      };
      "fuchsia-zircon-sys" = rec {
        crateName = "fuchsia-zircon-sys";
        version = "0.3.3";
        edition = "2015";
        sha256 = "19zp2085qsyq2bh1gvcxq1lb8w6v6jj9kbdkhpdjrl95fypakjix";
        authors = [
          "Raph Levien <raph@google.com>"
        ];
        
      };
      "futf" = rec {
        crateName = "futf";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0fxc18bnabird5jl941nsd6d25vq8cn8barmz4d30dlkzbiir73w";
        authors = [
          "Keegan McAllister <kmcallister@mozilla.com>"
        ];
        dependencies = [
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
        ];
        
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.12.3";
        edition = "2015";
        sha256 = "1v5jg7djicq34nbiv1dwaki71gkny002wyy9qfn3y0hfmrs053y6";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        
      };
      "getopts" = rec {
        crateName = "getopts";
        version = "0.2.21";
        edition = "2015";
        sha256 = "1mgb3qvivi26gs6ihqqhh8iyhp3vgxri6vwyrwg28w0xqzavznql";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "unicode-width/rustc-dep-of-std" "std" "core" ];
        };
      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.1.13";
        edition = "2018";
        sha256 = "01zlzhdbg8y6d1zrlihvm93s421g0nldiq7f1hch3kfl9slprnz7";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "test-in-browser" = [ "wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gitignore" = rec {
        crateName = "gitignore";
        version = "1.0.6";
        edition = "2015";
        crateBin = [];
        sha256 = "1zcdxsxz7nmgnky7ifd733whkrqafymbfr6i3nybwy34a8xyvgpm";
        authors = [
          "Nathan Kleyn <nathan@nathankleyn.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
        };
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.2.11";
        edition = "2015";
        sha256 = "1ysvi72slkw784fcsymgj4308c3y03gwjjzqxp80xdjnkbh8vqcb";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "handlebars" = rec {
        crateName = "handlebars";
        version = "2.0.2";
        edition = "2018";
        sha256 = "06q0407hp65zxy2z5vmpcbybkdhw15bkrrzw6nwa5aif1z1imvwi";
        authors = [
          "Ning Sun <sunng@pm.me>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown";
            features = [ "serde" ];
          }
          {
            name = "log";
            packageId = "log 0.4.8";
            optional = true;
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "quick-error";
            packageId = "quick-error";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "default" = [ "dir_source" "logging" ];
          "dir_source" = [ "walkdir" ];
          "logging" = [ "log" ];
          "no_dir_source" = [ "logging" ];
          "no_logging" = [ "dir_source" ];
        };
        resolvedDefaultFeatures = [ "log" "logging" "no_dir_source" ];
      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0lr3gsicplw7czapsscmii87hgzpvxf5ch92v7pi95xsipxl3pp1";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01a2v7yvkiqxakdqz4hw3w3g4sm52ivz9cs3qcsv2arxsmw4wmi0";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];
        
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.3";
        edition = "2015";
        sha256 = "087ibb7v4dxhx1h66jjffk4zrjlhy3n4fr0x9d9y6f3zjfgkqz1h";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "html5ever" = rec {
        crateName = "html5ever";
        version = "0.24.1";
        edition = "2015";
        sha256 = "1js4cr04941ld4r4fqpblvfigy75ds48qcbqhnr7nmz4l6q86m02";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "markup5ever";
            packageId = "markup5ever";
          }
        ];
        buildDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.11";
            features = [ "extra-traits" "full" "fold" ];
          }
        ];
        
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1yf23ldnjwfkkhkca7f4w15mky9961gjz28dlwyybhphc7l9l5yd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0krwgbf35pd46xvkqg14j070vircsndabahahlv3rwhflpy4q06z";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
        ];
        dependencies = [
          {
            name = "quick-error";
            packageId = "quick-error";
          }
        ];
        
      };
      "hyper" = rec {
        crateName = "hyper";
        version = "0.10.16";
        edition = "2015";
        sha256 = "0wwjh9p3mzvg3fss2lqz5r7ddcgl1fh9w6my2j69d6k0lbcm41ha";
        authors = [
          "Sean McArthur <sean.monstar@gmail.com>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "language-tags";
            packageId = "language-tags";
          }
          {
            name = "log";
            packageId = "log 0.3.9";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "traitobject";
            packageId = "traitobject";
          }
          {
            name = "typeable";
            packageId = "typeable";
          }
          {
            name = "unicase";
            packageId = "unicase 1.4.2";
          }
          {
            name = "url";
            packageId = "url 1.7.2";
          }
        ];
        features = {
        };
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        
      };
      "idna 0.1.5" = rec {
        crateName = "idna";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0kl4gs5kaydn4v07c6ka33spm9qdh2np0x7iw7g5zd8z1c7rxw1q";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        
      };
      "idna 0.2.0" = rec {
        crateName = "idna";
        version = "0.2.0";
        edition = "2015";
        sha256 = "1a9066imqpdrm1aavfasdyb1zahqaz8jmdcwdawvb1pf60y6gqh2";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        
      };
      "inotify" = rec {
        crateName = "inotify";
        version = "0.6.1";
        edition = "2015";
        sha256 = "0627k5aq44knjlrc09hl017nxap3svpl79przf26y3ciycwlbda0";
        authors = [
          "Hanno Braun <mail@hannobraun.de>"
          "Félix Saparelli <me@passcod.name>"
          "Cristian Kubis <cristian.kubis@tsunix.de>"
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "inotify-sys";
            packageId = "inotify-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "stream" ];
          "stream" = [ "futures" "mio" "tokio-io" "tokio-reactor" ];
        };
      };
      "inotify-sys" = rec {
        crateName = "inotify-sys";
        version = "0.1.3";
        edition = "2015";
        sha256 = "1h2nwgajz80qddjm4mpma94zahxw84nscbycy9pgzbjrgjl1ljp7";
        authors = [
          "Hanno Braun <hb@hannobraun.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "iron" = rec {
        crateName = "iron";
        version = "0.6.1";
        edition = "2015";
        sha256 = "1s4mf8395f693nhwsr0znw3j5frzn56gzllypyl50il85p50ily6";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
          "Zach Pomerantz <zmp@umich.edu>"
          "Michael Sproul <micsproul@gmail.com>"
          "Patrick Tran <patrick.tran06@gmail.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "log";
            packageId = "log 0.3.9";
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
          }
          {
            name = "modifier";
            packageId = "modifier";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "plugin";
            packageId = "plugin";
          }
          {
            name = "typemap";
            packageId = "typemap";
          }
          {
            name = "url";
            packageId = "url 1.7.2";
          }
        ];
        features = {
          "native-tls-example" = [ "hyper-native-tls" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "is-match" = rec {
        crateName = "is-match";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0lxh7q417fy422br8dfhdgskwgrcsfwpq8v5prvwd89kxxm3hnvy";
        authors = [
          "Matthias Beyer <mail@beyermatthias.de>"
        ];
        
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1154j48aw913v5jnyhpxialxhdn2sfpl4d7bwididyb1r05jsspm";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "0.4.4";
        edition = "2015";
        sha256 = "0zvg2d9qv3avhf3d8ggglh6fdyw8kkwqg3r4622ly5yhxnvnc4jh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "language-tags" = rec {
        crateName = "language-tags";
        version = "0.2.2";
        edition = "2015";
        sha256 = "16hrjdpa827carq5x4b8zhas24d8kg4s16m6nmmn1kb7cr5qh7d9";
        authors = [
          "Pyfisch <pyfisch@gmail.com>"
        ];
        features = {
          "heap_size" = [ "heapsize" "heapsize_plugin" ];
        };
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "lazycell" = rec {
        crateName = "lazycell";
        version = "1.2.1";
        edition = "2015";
        sha256 = "0gvqycmpv7parc98i6y64ai7rvxrn1947z2a6maa02g4kvxdd55j";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikita Pekin <contact@nikitapek.in>"
        ];
        features = {
          "nightly-testing" = [ "clippy" "nightly" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.66";
        edition = "2015";
        sha256 = "0n0mwry21fxfwc063k33mvxk8xj7ia5ar8m42c9ymbam2ksb25fm";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "log 0.3.9" = rec {
        crateName = "log";
        version = "0.3.9";
        edition = "2015";
        sha256 = "0jq23hhn5h35k7pa8r7wqnsywji6x3wn1q5q7lif5q536if8v7p1";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.4.8";
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "max_level_debug" = [ "log/max_level_debug" ];
          "max_level_error" = [ "log/max_level_error" ];
          "max_level_info" = [ "log/max_level_info" ];
          "max_level_off" = [ "log/max_level_off" ];
          "max_level_trace" = [ "log/max_level_trace" ];
          "max_level_warn" = [ "log/max_level_warn" ];
          "release_max_level_debug" = [ "log/release_max_level_debug" ];
          "release_max_level_error" = [ "log/release_max_level_error" ];
          "release_max_level_info" = [ "log/release_max_level_info" ];
          "release_max_level_off" = [ "log/release_max_level_off" ];
          "release_max_level_trace" = [ "log/release_max_level_trace" ];
          "release_max_level_warn" = [ "log/release_max_level_warn" ];
          "use_std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "log 0.4.8" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "mac" = rec {
        crateName = "mac";
        version = "0.1.1";
        edition = "2015";
        sha256 = "194vc7vrshqff72rl56f9xgb0cazyl4jda7qsv31m5l6xx7hq7n4";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "maplit" = rec {
        crateName = "maplit";
        version = "1.0.2";
        edition = "2015";
        sha256 = "07b5kjnhrrmfhgqm9wprjw8adx6i225lqp49gasgqg74lahnabiy";
        authors = [
          "bluss"
        ];
        
      };
      "markup5ever" = rec {
        crateName = "markup5ever";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00wxigkiw8f777pjp7q5kfq77xpwda9zskkwp698assh8yfisf35";
        libPath = "lib.rs";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "phf";
            packageId = "phf";
          }
          {
            name = "string_cache";
            packageId = "string_cache";
          }
          {
            name = "tendril";
            packageId = "tendril";
          }
        ];
        buildDependencies = [
          {
            name = "phf_codegen";
            packageId = "phf_codegen";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "string_cache_codegen";
            packageId = "string_cache_codegen";
          }
        ];
        
      };
      "matches" = rec {
        crateName = "matches";
        version = "0.1.8";
        edition = "2015";
        sha256 = "020axl4q7rk9vz90phs7f8jas4imxal9y9kxl4z4v7a6719mrz3z";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        
      };
      "mdbook" = rec {
        crateName = "mdbook";
        version = "0.3.4";
        edition = "2018";
        crateBin = [];
        sha256 = "18f553wgx94qv3vs8h5pmxrbyghncs5zwqxj37jcy5sagqwi1klf";
        authors = [
          "Mathieu David <mathieudavid@mathieudavid.org>"
          "Michael-F-Bryan <michaelfbryan@gmail.com>"
          "Matt Ickstadt <mattico8@gmail.com>"
        ];
        dependencies = [
          {
            name = "ammonia";
            packageId = "ammonia";
            optional = true;
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "elasticlunr-rs";
            packageId = "elasticlunr-rs";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "error-chain";
            packageId = "error-chain";
          }
          {
            name = "gitignore";
            packageId = "gitignore";
            optional = true;
          }
          {
            name = "handlebars";
            packageId = "handlebars";
            usesDefaultFeatures = false;
            features = [ "no_dir_source" ];
          }
          {
            name = "iron";
            packageId = "iron";
            optional = true;
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "notify";
            packageId = "notify";
            optional = true;
          }
          {
            name = "open";
            packageId = "open";
          }
          {
            name = "pulldown-cmark";
            packageId = "pulldown-cmark";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "staticfile";
            packageId = "staticfile";
            optional = true;
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml";
            packageId = "toml";
          }
          {
            name = "toml-query";
            packageId = "toml-query";
          }
          {
            name = "ws";
            packageId = "ws";
            optional = true;
          }
        ];
        features = {
          "default" = [ "output" "watch" "serve" "search" ];
          "search" = [ "elasticlunr-rs" "ammonia" ];
          "serve" = [ "iron" "staticfile" "ws" ];
          "watch" = [ "notify" "gitignore" ];
        };
        resolvedDefaultFeatures = [ "ammonia" "default" "elasticlunr-rs" "gitignore" "iron" "notify" "output" "search" "serve" "staticfile" "watch" "ws" ];
      };
      "mdbook-tag" = rec {
        crateName = "mdbook-tag";
        version = "0.0.2";
        edition = "2018";
        crateBin = [
          { name = "mdbook-tag"; path = "src/main.rs"; }
        ];
        src = pkgs.callPackage ./tarball-v0.0.2.nix {};
        authors = [
          "Dylan Owen <dyltotheo@gmail.com>"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "mdbook";
            packageId = "mdbook";
          }
          {
            name = "pulldown-cmark";
            packageId = "pulldown-cmark";
          }
          {
            name = "pulldown-cmark-to-cmark";
            packageId = "pulldown-cmark-to-cmark";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "toml";
            packageId = "toml";
          }
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.2.1";
        edition = "2015";
        sha256 = "13j6ji9x9ydpi9grbss106gqqr3xn3bcfp28aydqfa4751qrfmw8";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1q1s1ax1gaz8ld3513nvhidfwnik5asbs1ma3hp6inp5dn56nqms";
        authors = [
          "Sean McArthur <sean.monstar@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.3.9";
          }
        ];
        features = {
          "heap_size" = [ "heapsize" ];
        };
      };
      "mime_guess" = rec {
        crateName = "mime_guess";
        version = "1.8.7";
        edition = "2015";
        sha256 = "1xshrkchpmcpph8ri1w365085npkq0arb5rjx4b0n6l5xvlpv5qd";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        dependencies = [
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "phf";
            packageId = "phf";
            features = [ "unicase" ];
          }
          {
            name = "unicase";
            packageId = "unicase 1.4.2";
          }
        ];
        buildDependencies = [
          {
            name = "phf_codegen";
            packageId = "phf_codegen";
          }
          {
            name = "unicase";
            packageId = "unicase 1.4.2";
          }
        ];
        features = {
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.6.21";
        edition = "2015";
        sha256 = "13q02a7cwc140aygf8amadpzpl5lyj3p2r4wnvgydfpnphifqb9h";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fuchsia-zircon";
            packageId = "fuchsia-zircon";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "fuchsia-zircon-sys";
            packageId = "fuchsia-zircon-sys";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "miow";
            packageId = "miow";
            target = { target, features }: target."windows";
          }
          {
            name = "net2";
            packageId = "net2";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
          "default" = [ "with-deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" "with-deprecated" ];
      };
      "mio-extras" = rec {
        crateName = "mio-extras";
        version = "2.0.5";
        edition = "2015";
        sha256 = "0h6fc7pmvsh5r1vpg5xz48lyraalsmb4s4q2v2w50qpsq823mrs6";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "David Hotham"
        ];
        dependencies = [
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        
      };
      "miow" = rec {
        crateName = "miow";
        version = "0.2.1";
        edition = "2015";
        sha256 = "06g9b8sqlh5gxakwqq4rrib07afwanfnxgxajrldwcgk3hxjy7wc";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
          }
          {
            name = "net2";
            packageId = "net2";
            usesDefaultFeatures = false;
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
          }
        ];
        
      };
      "modifier" = rec {
        crateName = "modifier";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0n3fmgli1nsskl0whrfzm1gk0rmwwl6pw1q4nb9sqqmn5h8wkxa1";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "mount" = rec {
        crateName = "mount";
        version = "0.4.0";
        edition = "2015";
        sha256 = "02vg71z11p4yb2rkxaw9qjgrzxlcqk2pxbrfbz3ziaj1540hcp72";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        dependencies = [
          {
            name = "iron";
            packageId = "iron";
          }
          {
            name = "sequence_trie";
            packageId = "sequence_trie";
          }
        ];
        
      };
      "net2" = rec {
        crateName = "net2";
        version = "0.2.33";
        edition = "2015";
        sha256 = "126g3fgfxp06zimc1l9iyxnn9cif1hjsg7sd81nlls5nnyghsma2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."os" == "redox") || target."unix");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "handleapi" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
          "default" = [ "duration" ];
        };
        resolvedDefaultFeatures = [ "default" "duration" ];
      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.3";
        edition = "2015";
        sha256 = "0c1br326qa0rrzxrn2rd5ah7xaprig2i9r4rwsx06vnvc1f003zl";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "notify" = rec {
        crateName = "notify";
        version = "4.0.14";
        edition = "2015";
        sha256 = "12vpbg8j49196rxkm01hw2xfr0mk005ljmx0p9kwf6xj6gy2i5hr";
        authors = [
          "Félix Saparelli <me@passcod.name>"
          "Jorge Israel Peña <jorge.israel.p@gmail.com>"
          "Michael Maurizi <michael.maurizi@gmail.com>"
          "Pierre Baillet <oct@zoy.org>"
          "Joe Wilm <joe@jwilm.com>"
          "Daniel Faust <hessijames@gmail.com>"
          "Aron Heinecke <Ox0p54r36@t-online.de>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "fsevent";
            packageId = "fsevent";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "fsevent-sys";
            packageId = "fsevent-sys";
            target = { target, features }: (target."os" == "macos");
          }
          {
            name = "inotify";
            packageId = "inotify";
            usesDefaultFeatures = false;
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "mio-extras";
            packageId = "mio-extras";
            target = { target, features }: (target."os" == "linux");
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.41";
        edition = "2015";
        sha256 = "02dwjjpfbi16c71fq689s4sw3ih52cvfzr5z5gs6qpr5z0g58pmq";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.10";
        edition = "2015";
        sha256 = "1r079jbmrnrbvsz7dc5mcghijx7bhpfikjspfqrgl4n227y1zj6l";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.11.1";
        edition = "2015";
        sha256 = "0wlxs00cpg16z09fwchj1gdz1jxnf5dgg1cbidvq0sc75bnwbnkn";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.2.3";
        edition = "2015";
        sha256 = "172j6bs8ndclqxa2m64qc0y1772rr73g4l9fg2svscgicnbfff98";
        authors = [
          "RustCrypto Developers"
        ];
        
      };
      "open" = rec {
        crateName = "open";
        version = "1.3.2";
        edition = "2015";
        crateBin = [];
        sha256 = "0jqkq28r4zcrfsgavgl1303hhdz6ggs6yp1323gv0a3313hj9d4l";
        authors = [
          "Sebastian Thiel <byronimo@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "shellapi" ];
          }
        ];
        
      };
      "percent-encoding 1.0.1" = rec {
        crateName = "percent-encoding";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0cgq08v1fvr6bs5fvy390cz830lq4fak8havdasdacxcw790s09i";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "percent-encoding 2.1.0" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];
        
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.1.2";
        edition = "2015";
        sha256 = "0jl9nv6jx1jy3fz2j49nw7jkh9z5igvrbvsgnbc5aan2ql0v4kvy";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
          }
        ];
        features = {
          "pretty-print" = [ "serde" "serde_json" ];
        };
      };
      "pest_derive" = rec {
        crateName = "pest_derive";
        version = "2.1.0";
        edition = "2015";
        sha256 = "1l5jfa6ril71cw5nsiw0r45br54dd8cj2r1nc2d1wq6wb3jilgc3";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_generator";
            packageId = "pest_generator";
          }
        ];
        
      };
      "pest_generator" = rec {
        crateName = "pest_generator";
        version = "2.1.1";
        edition = "2015";
        sha256 = "1h3z8jccki87mn7gppy4292s1ah98z4md998w5pd04jpkclwz7vv";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_meta";
            packageId = "pest_meta";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.11";
          }
        ];
        
      };
      "pest_meta" = rec {
        crateName = "pest_meta";
        version = "2.1.2";
        edition = "2015";
        sha256 = "0iymvrh7lcfi8iarkgq0hwgarr00np3l4xg4bx42rmvgi6czshyz";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "pest";
            packageId = "pest";
          }
        ];
        buildDependencies = [
          {
            name = "sha-1";
            packageId = "sha-1";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "phf" = rec {
        crateName = "phf";
        version = "0.7.24";
        edition = "2015";
        sha256 = "066xwv4dr6056a9adlkarwp4n94kbpwngbmd47ngm3cfbyw49nmk";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
        ];
        features = {
          "core" = [ "phf_shared/core" ];
          "macros" = [ "phf_macros" ];
          "unicase" = [ "phf_shared/unicase" ];
        };
        resolvedDefaultFeatures = [ "unicase" ];
      };
      "phf_codegen" = rec {
        crateName = "phf_codegen";
        version = "0.7.24";
        edition = "2015";
        sha256 = "0zjiblicfm0nrmr2xxrs6pnf6zz2394wgch6dcbd8jijkq98agmh";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
        ];
        
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.7.24";
        edition = "2015";
        sha256 = "0qi62gxk3x3whrmw5c4i71406icqk11qmpgln438p6qm7k4lqdh9";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "rand";
            packageId = "rand 0.6.5";
          }
        ];
        
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.7.24";
        edition = "2015";
        sha256 = "18371fla0vsj7d6d5rlfb747xbr2in11ar9vgv5qna72bnhp2kr3";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
          {
            name = "unicase";
            packageId = "unicase 1.4.2";
            optional = true;
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "unicase" ];
      };
      "plugin" = rec {
        crateName = "plugin";
        version = "0.2.6";
        edition = "2015";
        sha256 = "1q7nghkpvxxr168y2jnzh3w7qc9vfrby9n7ygy3xpj0bj71hsshs";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        dependencies = [
          {
            name = "typemap";
            packageId = "typemap";
          }
        ];
        
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.6";
        edition = "2018";
        sha256 = "06zs492wbms7j5qhy58cs3976c7kyc47rx0d6fn63rgvp580njbl";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" "simd" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];
        
      };
      "proc-macro2 0.4.30" = rec {
        crateName = "proc-macro2";
        version = "0.4.30";
        edition = "2015";
        sha256 = "0nd71fl24sys066jrha6j7i34nfkjv44yzw8yww9742wmc8j0gfg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.6" = rec {
        crateName = "proc-macro2";
        version = "1.0.6";
        edition = "2018";
        sha256 = "09rgb5ab0jgw39kyad0lgqs4nb9yaf7mwcrgxqnsxbn4il54g7lw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "pulldown-cmark" = rec {
        crateName = "pulldown-cmark";
        version = "0.5.3";
        edition = "2018";
        crateBin = [];
        sha256 = "0mq3cgjwxlrv0p1svjg93m1jkybzyfrl9p0jwa76hx1352hks13p";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
          "Marcus Klaas de Vries <mail@marcusklaas.nl>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "getopts";
            packageId = "getopts";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "unicase";
            packageId = "unicase 2.6.0";
          }
        ];
        features = {
          "default" = [ "getopts" ];
        };
        resolvedDefaultFeatures = [ "default" "getopts" ];
      };
      "pulldown-cmark-to-cmark" = rec {
        crateName = "pulldown-cmark-to-cmark";
        version = "1.2.4";
        edition = "2015";
        sha256 = "0px2f3c5ilmwqyy5j2016y7yls58xn6k74pgxw08baq2ik5snxzj";
        authors = [
          "Sebastian Thiel <byronimo@gmail.com>"
          "Dylan Owen <dyltotheo@gmail.com>"
        ];
        dependencies = [
          {
            name = "pulldown-cmark";
            packageId = "pulldown-cmark";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "quick-error" = rec {
        crateName = "quick-error";
        version = "1.2.2";
        edition = "2015";
        sha256 = "1w6kgwwv7p7zr0yyg5rb315lkk24bimywklwx7fsvsbwi10bjx4j";
        authors = [
          "Paul Colomiets <paul@colomiets.name>"
          "Colin Kiegel <kiegel@gmx.de>"
        ];
        
      };
      "quote 0.6.13" = rec {
        crateName = "quote";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1qgqq48jymp5h4y082aanf25hrw6bpb678xh3zw993qfhxmkpqkc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.2" = rec {
        crateName = "quote";
        version = "1.0.2";
        edition = "2018";
        sha256 = "1zkc46ryacf2jdkc6krsy2z615xbk1x8kp1830rcxz3irj5qqfh5";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.6.5" = rec {
        crateName = "rand";
        version = "0.6.5";
        edition = "2015";
        sha256 = "1jl4449jcl4wgmzld6ffwqj5gwxrp8zvx8w573g1z368qg6xlwbd";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.1.1";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc 0.1.0";
          }
          {
            name = "rand_isaac";
            packageId = "rand_isaac";
          }
          {
            name = "rand_jitter";
            packageId = "rand_jitter";
          }
          {
            name = "rand_os";
            packageId = "rand_os";
            optional = true;
          }
          {
            name = "rand_pcg";
            packageId = "rand_pcg";
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "profileapi" "winnt" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "nightly" = [ "simd_support" ];
          "serde1" = [ "rand_core/serde1" "rand_isaac/serde1" "rand_xorshift/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "alloc" "rand_os" "rand_jitter/std" ];
          "stdweb" = [ "rand_os/stdweb" ];
          "wasm-bindgen" = [ "rand_os/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "rand_os" "std" ];
      };
      "rand 0.7.2" = rec {
        crateName = "rand";
        version = "0.7.2";
        edition = "2018";
        sha256 = "04l4rkm4clpkp9ykl3rp88hf91d3y2cajxc4kdsn3bry4ilv3q9s";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.1";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc 0.2.0";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc 0.2.0";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "std" ];
      };
      "rand_chacha 0.1.1" = rec {
        crateName = "rand_chacha";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1vxwyzs4fy1ffjc8l00fsyygpiss135irjf7nyxgq2v0lqf3lvam";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        
      };
      "rand_chacha 0.2.1" = rec {
        crateName = "rand_chacha";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0lv8imzzl4h2glm6sjj8mkvasgi8jym23ya48dakyln7m06sk8h3";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "c2-chacha/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.3.1" = rec {
        crateName = "rand_core";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0jzdgszfa4bliigiy4hi66k7fs3gfwi2qxn8vik84ph77fwdwvvs";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "serde1" = [ "rand_core/serde1" ];
          "std" = [ "rand_core/std" ];
        };
      };
      "rand_core 0.4.2" = rec {
        crateName = "rand_core";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1p09ynysrq1vcdlmcqnapq4qakl2yd1ng3kxh3qscpx09k2a6cww";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc 0.1.0" = rec {
        crateName = "rand_hc";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1i0vl8q5ddvvy0x8hf1zxny393miyzxkwqnw31ifg6p0gdy6fh3v";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        
      };
      "rand_hc 0.2.0" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        
      };
      "rand_isaac" = rec {
        crateName = "rand_isaac";
        version = "0.1.1";
        edition = "2015";
        sha256 = "027flpjr4znx2csxk7gxb7vrf9c7y5mydmvg5az2afgisp4rgnfy";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" "rand_core/serde1" ];
        };
      };
      "rand_jitter" = rec {
        crateName = "rand_jitter";
        version = "0.1.4";
        edition = "2015";
        sha256 = "16z387y46bfz3csc42zxbjq89vcr1axqacncvv8qhyy93p4xarhi";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."os" == "macos") || (target."os" == "ios"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "profileapi" ];
          }
        ];
        features = {
          "std" = [ "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_os" = rec {
        crateName = "rand_os";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0wahppm0s64gkr2vmhcgwc0lij37in1lgfxg5rbgqlz0l5vgcxbv";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cloudabi";
            packageId = "cloudabi";
            target = { target, features }: (target."os" == "cloudabi");
          }
          {
            name = "fuchsia-cprng";
            packageId = "fuchsia-cprng";
            target = { target, features }: (target."os" == "fuchsia");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
            features = [ "std" ];
          }
          {
            name = "rdrand";
            packageId = "rdrand";
            target = { target, features }: (target."env" == "sgx");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "minwindef" "ntsecapi" "winnt" ];
          }
        ];
        
      };
      "rand_pcg" = rec {
        crateName = "rand_pcg";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0i0bdla18a8x4jn1w0fxsbs3jg7ajllz6azmch1zw33r06dv1ydb";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.4.2";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
        };
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0p2x8nr00hricpi2m6ca5vysiha7ybnghz79yqhhx6sl4gkfkxyb";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde1" = [ "serde" "serde_derive" ];
        };
      };
      "rdrand" = rec {
        crateName = "rdrand";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1cjq0kwx1bk7jx3kzyciiish5gqsj7620dm43dc52sr8fzmm9037";
        authors = [
          "Simonas Kazlauskas <rdrand@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.3.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.1.56";
        edition = "2015";
        sha256 = "110y7dyfm2vci4x5vk7gr0q551dvp31npl99fnsx2fb17wzwcf94";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.3.1";
        edition = "2015";
        sha256 = "1g8wp160vzxgralyd4imydd0xsxq6yh25zhs229z1s6w7g9hn8nw";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.12";
        edition = "2015";
        sha256 = "05pplicvzvgkb2wb4i98p2mrpgc8gws6vdl8xlpyyr6f3h6y59qi";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0bkrlyg26mgizpiy1yb2hhpgscxcag8r5fnckqsvk25608vzm0sa";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];
        
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1j0h74f1xqf9hjkhanp8i20mqc1aw35kr1iq9i79q7713mn51a5z";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
        };
      };
      "safemem" = rec {
        crateName = "safemem";
        version = "0.3.3";
        edition = "2015";
        sha256 = "0wp0d2b2284lw11xhybhaszsczpbq1jbdklkxgifldcknmy3nw7g";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.5";
        edition = "2015";
        sha256 = "08a4zy10pjindf2rah320s6shgswk13mqw7s61m8i1y1xpf8spjq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "sequence_trie" = rec {
        crateName = "sequence_trie";
        version = "0.3.6";
        edition = "2015";
        sha256 = "1hz0h12ihsk793yrbs291p6n2fxkw73bjm24nvp75l6cnxkj1qhy";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
          "Alex Gulyás <gulyas.alex@gmail.com>"
        ];
        features = {
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.103";
        edition = "2015";
        sha256 = "00ip3xy09nk6c2b47ky1m5379yjmwk6n3sr2vmblp478p1xgj5qj";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.103";
        edition = "2015";
        sha256 = "1l2icqq548dmq5bn278zb2vj725znj4h4ms89w3b0r1fkbpzmim8";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.11";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.42";
        edition = "2015";
        sha256 = "0hq0x0x0lbjcvfnml2s7zk7s9lca50gkqz5bj8n7w1hzpkf52cqs";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sha-1" = rec {
        crateName = "sha-1";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0s6fdy5wp3x4h2z4fcl2d9vjvrpzr87v4h49r51xcq8nm4qj35i3";
        libName = "sha1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "fake-simd";
            packageId = "fake-simd";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1lmv6san7g8dv6jdfp14m7bdczq9ss7j7bgsfqyqjc3jnjfippvz";
        authors = [
          "comex <comexk@gmail.com>"
        ];
        
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.2.3";
        edition = "2015";
        sha256 = "1b53m53l24lyhr505lwqzrpjyq5qfnic71mynrcfvm43rybf938b";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.0.0";
        edition = "2018";
        sha256 = "11pwzjbkiw1jsy1q4w8bws3r61sk27dsp9asankvm2lfys2kpksf";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        features = {
        };
      };
      "staticfile" = rec {
        crateName = "staticfile";
        version = "0.5.0";
        edition = "2015";
        sha256 = "11pvqsplspmlcc0s3f0qggpzypzzycgz5ic1w569kqxpifk3zgds";
        authors = [
          "Zach Pomerantz <zmp@umich.edu>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        dependencies = [
          {
            name = "iron";
            packageId = "iron";
          }
          {
            name = "mount";
            packageId = "mount";
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "url";
            packageId = "url 1.7.2";
          }
        ];
        features = {
          "cache" = [ "filetime" ];
        };
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.7.5";
        edition = "2015";
        sha256 = "0rrdb822gc1fs3qq4camgj3kh4182bs79hpqxhdrpmlz5yl5ih49";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "string_cache_shared";
            packageId = "string_cache_shared";
          }
        ];
        buildDependencies = [
          {
            name = "string_cache_codegen";
            packageId = "string_cache_codegen";
          }
        ];
        devDependencies = [
          {
            name = "string_cache_codegen";
            packageId = "string_cache_codegen";
          }
        ];
        features = {
        };
      };
      "string_cache_codegen" = rec {
        crateName = "string_cache_codegen";
        version = "0.4.4";
        edition = "2015";
        sha256 = "1ik78h9gs874i24rkyh0myg6x4ni2a9cazbv5yzs9yavnv8mxx7h";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
          }
          {
            name = "string_cache_shared";
            packageId = "string_cache_shared";
          }
        ];
        
      };
      "string_cache_shared" = rec {
        crateName = "string_cache_shared";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1z7dpdix1m42x6ddshdcpjf91ml9mhvnskmiv5kd8hcpq0dlv25i";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "strum" = rec {
        crateName = "strum";
        version = "0.15.0";
        edition = "2015";
        sha256 = "0pzhc270dvnrs3g1cs64gb9qyipxmpqq05lm0hbhagsk74qc7lg5";
        authors = [
          "Peter Glotfelty <peglotfe@microsoft.com>"
        ];
        
      };
      "strum_macros" = rec {
        crateName = "strum_macros";
        version = "0.15.0";
        edition = "2015";
        sha256 = "0bj38c9jd8ypcqlihmhw2pxcvzqgxki3a0d21yh9bqyyqzsj7ka7";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peglotfe@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
            features = [ "parsing" "extra-traits" ];
          }
        ];
        features = {
        };
      };
      "syn 0.15.44" = rec {
        crateName = "syn";
        version = "0.15.44";
        edition = "2015";
        sha256 = "1id5g6x6zihv3j7hwrw3m1jp636bg8dpi671r7zy3jvpkavb794w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" ];
      };
      "syn 1.0.11" = rec {
        crateName = "syn";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0f4jmp6n02br9hiwf4rcllmmmqxigs47yqbnb5nzxqks43dsrw6z";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.3";
        edition = "2018";
        sha256 = "0igmc5fzpk6fg7kgff914j05lbpc6ai2wmji312v2h8vvjhnwrb7";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.6";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.11";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.1.0";
        edition = "2018";
        sha256 = "1a9cfdqw70n7bcnkx05aih9xdba8lqazmqlkjpkmn2la6gcj8vks";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
          {
            name = "rand";
            packageId = "rand 0.7.2";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];
        
      };
      "tendril" = rec {
        crateName = "tendril";
        version = "0.4.1";
        edition = "2015";
        sha256 = "0fsx7blrrzgca8aa2yqy8zxyi8s7amskhgkk1ml5sbaqyalyszvh";
        authors = [
          "Keegan McAllister <mcallister.keegan@gmail.com>"
          "Simon Sapin <simon.sapin@exyr.org>"
          "Chris Morgan <me@chrismorgan.info>"
        ];
        dependencies = [
          {
            name = "futf";
            packageId = "futf";
          }
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        features = {
        };
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.0.5";
        edition = "2015";
        sha256 = "0vjfsn1a8zvqhnrbygrz1id6yckwv1dncw3w4zj65qdx0f00kmln";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "wincolor";
            packageId = "wincolor";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "06rzik99p8c5js8238yhc8rk6np543ylb1dy9nrw5v80j0r3xdf6";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "time" = rec {
        crateName = "time";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0vsbvsz0ryxb35dy9j4anxvy8zlaplmjmi0a4z4l64bc135cz3fv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];
        
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.5";
        edition = "2018";
        sha256 = "1kwqpin2w5fk51yamajdb18s949s80i47yngpwb2pcf88i341l81";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml-query" = rec {
        crateName = "toml-query";
        version = "0.9.2";
        edition = "2018";
        sha256 = "1nyfl4c3xwsn57qp7br76ha0vnbp65y2x0dnbyxlbi0nl7xmlkb5";
        authors = [
          "Matthias Beyer <mail@beyermatthias.de>"
        ];
        dependencies = [
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
          }
          {
            name = "is-match";
            packageId = "is-match";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "toml";
            packageId = "toml";
          }
          {
            name = "toml-query_derive";
            packageId = "toml-query_derive";
          }
        ];
        features = {
          "logging" = [ "log" ];
          "typed" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml-query_derive" = rec {
        crateName = "toml-query_derive";
        version = "0.9.0";
        edition = "2015";
        sha256 = "0dakicg6gil2h0arb11c7ipi9l42p13qzrcfbkkwfwy2bqjcm69w";
        procMacro = true;
        authors = [
          "Matthias Beyer <mail@beyermatthias.de>"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
        ];
        
      };
      "traitobject" = rec {
        crateName = "traitobject";
        version = "0.1.0";
        edition = "2015";
        sha256 = "0yb0n8822mr59j200fyr2fxgzzgqljyxflx9y8bdy3rlaqngilgg";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "typeable" = rec {
        crateName = "typeable";
        version = "0.1.2";
        edition = "2015";
        sha256 = "11w8dywgnm32hb291izjvh4zjd037ccnkk77ahk63l913zwzc40l";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        
      };
      "typemap" = rec {
        crateName = "typemap";
        version = "0.3.3";
        edition = "2015";
        sha256 = "1xm1gbvz9qisj1l6d36hrl9pw8imr8ngs6qyanjnsad3h0yfcfv5";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        dependencies = [
          {
            name = "unsafe-any";
            packageId = "unsafe-any";
          }
        ];
        
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.11.2";
        edition = "2015";
        sha256 = "1ybmfpp7j37zmaw50w35wiwx66lbpr0yp1312c0i333b5pz869vd";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
        };
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1hh6kyzh5xygwy96wfmsf8v8czlzhps2lgbcyhj1xzy1w1xys04g";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "unicase 1.4.2" = rec {
        crateName = "unicase";
        version = "1.4.2";
        edition = "2015";
        sha256 = "0cwazh4qsmm9msckjk86zc1z35xg7hjxjykrgjalzdv367w6aivz";
        authors = [
          "Sean McArthur <sean.monstar@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.1.5";
          }
        ];
        features = {
          "heap_size" = [ "heapsize" "heapsize_plugin" ];
        };
      };
      "unicase 2.6.0" = rec {
        crateName = "unicase";
        version = "2.6.0";
        edition = "2015";
        sha256 = "1xmlbink4ycgxrkjspp0mf7pghcx4m7vxq7fpfm04ikr2zk7pwsh";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check 0.9.1";
          }
        ];
        features = {
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1malx8ljgm7v1gbaazkn7iicy5wj0bwcyadj3l727a38ch6bvwj9";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "matches";
            packageId = "matches";
          }
        ];
        features = {
          "flame_it" = [ "flame" "flamer" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.11";
        edition = "2015";
        sha256 = "1kxxb5ndb5dzyp1flajjdxnbwyjw6ml9xvy0pz7b8srjn9ky4qdm";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.6.0";
        edition = "2015";
        sha256 = "1h7d48mzpi8hwf5cvnq07warkv86pvapzzzf32hvbjsk20yiagp8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.6";
        edition = "2015";
        sha256 = "082f9hv1r3gcd1xl33whjhrm18p0w9i77zhhhkiccb5r47adn1vh";
        authors = [
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.0" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unsafe-any" = rec {
        crateName = "unsafe-any";
        version = "0.4.2";
        edition = "2015";
        sha256 = "0zwwphsqkw5qaiqmjwngnfpv9ym85qcsyj7adip9qplzjzbn00zk";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        dependencies = [
          {
            name = "traitobject";
            packageId = "traitobject";
          }
        ];
        
      };
      "url 1.7.2" = rec {
        crateName = "url";
        version = "1.7.2";
        edition = "2015";
        sha256 = "0nim1c90mxpi9wgdw2xh8dqd72vlklwlzam436akcrhjac6pqknx";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna";
            packageId = "idna 0.1.5";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding 1.0.1";
          }
        ];
        features = {
          "heap_size" = [ "heapsize" ];
          "query_encoding" = [ "encoding" ];
        };
      };
      "url 2.1.0" = rec {
        crateName = "url";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0qcxx9kr0wfawsr83h0kfgxl6dxw4cgrbgxsz7bpkj34qkv19d3m";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna";
            packageId = "idna 0.2.0";
          }
          {
            name = "matches";
            packageId = "matches";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding 2.1.0";
          }
        ];
        
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.5";
        edition = "2015";
        sha256 = "1iw5rp4i3mfi9k51picbr5bgjqhjcmnxx7001clh5ydq31y2zr05";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "06n8hw4hlbcz328a3gbpvmy0ma46vg1lc0r5wf55900szf3qdiq5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "version_check 0.1.5" = rec {
        crateName = "version_check";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1pf91pvj8n6akh7w6j5ypka6aqz08b3qpzgs0ak2kjf4frkiljwi";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "version_check 0.9.1" = rec {
        crateName = "version_check";
        version = "0.9.1";
        edition = "2015";
        sha256 = "1kikqlnggii1rvnxrbls55sc46lxvinz5k3giscgncjj4p87b1q7";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.2.9";
        edition = "2015";
        sha256 = "07ppalpvxkf8cnqr64np422792y4z5bs9m8b4nrflh5rm17wjn4n";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.7.0";
        edition = "2018";
        sha256 = "03apg3sa4hjn6xwa4pkyvzjiscya51wyrygadgxwdg8lrvj3r75q";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "alloc" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.8" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "minwinbase" "minwindef" "ntdef" "ntsecapi" "processenv" "profileapi" "shellapi" "std" "sysinfoapi" "timezoneapi" "winbase" "wincon" "winerror" "winnt" "winsock2" "ws2def" "ws2ipdef" "ws2tcpip" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.2";
        edition = "2015";
        sha256 = "1j839dc6y8vszvrsb7yk0qvs0w6asnahxzbyans37vnsw6vbls3i";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "wincolor" = rec {
        crateName = "wincolor";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1agaf3hcav113i86912ajnw6jxcy4rvkrgyf8gdj8kc031mh3xcn";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            features = [ "minwindef" "wincon" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
          }
        ];
        
      };
      "ws" = rec {
        crateName = "ws";
        version = "0.9.1";
        edition = "2015";
        sha256 = "151d3ypx3kc31is9rz92sxsl4z7cd99zz4zv9xvwr33rnm3jq6n5";
        authors = [
          "Jason Housley <HousleyJK@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "log";
            packageId = "log 0.4.8";
          }
          {
            name = "mio";
            packageId = "mio";
          }
          {
            name = "mio-extras";
            packageId = "mio-extras";
          }
          {
            name = "rand";
            packageId = "rand 0.7.2";
          }
          {
            name = "sha-1";
            packageId = "sha-1";
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "url";
            packageId = "url 2.1.0";
          }
        ];
        features = {
          "nativetls" = [ "native-tls" ];
          "permessage-deflate" = [ "libz-sys" "libc" ];
          "ssl" = [ "openssl" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
