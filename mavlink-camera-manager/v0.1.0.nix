
# This file was @generated by crate2nix 0.9.0-alpha.1 with the command:
#   "generate" "-o" "/home/jamie/Misc/cratesioout/mavlink-camera-manager/v0.1.0.nix.tmp"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "mavlink-camera-manager";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "mavlink-camera-manager" = rec {
      packageId = "mavlink-camera-manager";
      build = internal.buildRustCrateWithFeatures {
        packageId = "mavlink-camera-manager";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "aho-corasick 0.6.10" = rec {
        crateName = "aho-corasick";
        version = "0.6.10";
        edition = "2015";
        crateBin = [];
        sha256 = "19f8v503ibvlyr824g5ynicrh1lsmp2i0zmpszr8lqay0qw3vkl1";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        
      };
      "aho-corasick 0.7.10" = rec {
        crateName = "aho-corasick";
        version = "0.7.10";
        edition = "2015";
        sha256 = "1nka9509afjgal6lpymn8w2lq11dmjwxs8yjcmzys966if5l05l7";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.11.0";
        edition = "2015";
        sha256 = "16wpvrghvd0353584i1idnsgm0r3vchg8fyrm0x8ayv1rgvbljgf";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: (target."os" == "windows");
            features = [ "errhandlingapi" "consoleapi" "processenv" ];
          }
        ];
        
      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: target."unix";
          }
          {
            name = "winapi";
            packageId = "winapi 0.3.8";
            target = { target, features }: target."windows";
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];
        
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.0.0";
        edition = "2015";
        sha256 = "17cv6pwb4q08s0ynpr4n8hv5299hcmhdgvdchzixfpw8y5qcgapq";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
        
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.46";
        edition = "2018";
        sha256 = "17hh1vrhfd01qpjilrdpy7q0lf2j2qv36achpg37q92rff4r5rmi";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "backtrace-sys";
            packageId = "backtrace-sys";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "libunwind" "libbacktrace" "dladdr" "dbghelp" ];
          "gimli-symbolize" = [ "addr2line" "findshlibs" "memmap" "goblin" ];
          "libbacktrace" = [ "backtrace-sys/backtrace-sys" ];
          "rustc-dep-of-std" = [ "backtrace-sys/rustc-dep-of-std" "cfg-if/rustc-dep-of-std" "core" "compiler_builtins" "libc/rustc-dep-of-std" "rustc-demangle/rustc-dep-of-std" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" "dbghelp" "default" "dladdr" "libbacktrace" "libunwind" "std" ];
      };
      "backtrace-sys" = rec {
        crateName = "backtrace-sys";
        version = "0.1.35";
        edition = "2015";
        sha256 = "066iviphi72mx9hd3njzsplk5v45jhi10mrccbbyij391ahsps3x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "backtrace-sys" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "backtrace-sys" ];
      };
      "bitflags 0.3.3" = rec {
        crateName = "bitflags";
        version = "0.3.3";
        edition = "2015";
        sha256 = "171qfyjn5z86z6i5jynpwmwf03m8n6hql5di3n5l6kiw216nz1ij";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "bitflags 0.5.0" = rec {
        crateName = "bitflags";
        version = "0.5.0";
        edition = "2015";
        sha256 = "08qdq5w1nd3hzwsrxk0dxzqv4g8wbwj6v2193njskwzdd09r6rsg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
      };
      "bitflags 1.2.1" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byteorder 0.5.3" = rec {
        crateName = "byteorder";
        version = "0.5.3";
        edition = "2015";
        sha256 = "0ma8pkyz1jbglr29m1yzlc9ghmv6672nvsrn7zd0yn5jqs60xh8g";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "byteorder 1.3.4" = rec {
        crateName = "byteorder";
        version = "1.3.4";
        edition = "2015";
        sha256 = "1pkjfhgjnq898g1d38ygcfi0msg3m6756cwv0sgysj1d26p8mi08";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "0.4.12";
        edition = "2015";
        sha256 = "0768a55q2fsqdjsvcv98ndg9dq7w2g44dvq1avhwpxrdzbydyvr0";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder 1.3.4";
          }
          {
            name = "iovec";
            packageId = "iovec";
          }
        ];
        features = {
          "i128" = [ "byteorder/i128" ];
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.50";
        edition = "2018";
        crateBin = [];
        sha256 = "1kdqm8ka7xg9h56b694pcz29ka33fsz27mzrphqc78gx96h8zqlm";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "parallel" = [ "jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "clap" = rec {
        crateName = "clap";
        version = "2.33.0";
        edition = "2015";
        sha256 = "1nf6ld3bims1n5vfzhkvcb55pdzh04bbhzf8nil5vvw05nxzarsh";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
            target = { target, features }: (!target."windows");
          }
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            optional = true;
          }
        ];
        features = {
          "color" = [ "ansi_term" "atty" ];
          "default" = [ "suggestions" "color" "vec_map" ];
          "doc" = [ "yaml" ];
          "lints" = [ "clippy" ];
          "suggestions" = [ "strsim" ];
          "wrap_help" = [ "term_size" "textwrap/term_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "ansi_term" "atty" "color" "default" "strsim" "suggestions" "vec_map" ];
      };
      "crc16" = rec {
        crateName = "crc16";
        version = "0.3.4";
        edition = "2015";
        sha256 = "1pg28xdz27mck17jl247vhdrpixgfmw3gq25b4x3wbrkjx3mr9hi";
        authors = [
          "AIkorsky <aikorsky@gmail.com>"
        ];
        
      };
      "failure" = rec {
        crateName = "failure";
        version = "0.1.7";
        edition = "2015";
        sha256 = "0js6i6mb42q1g6q3csfbmi6q40s64k96705xbim0d8zg44j9qlmq";
        authors = [
          "Without Boats <boats@mozilla.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "failure_derive" ];
          "std" = [ "backtrace" ];
        };
        resolvedDefaultFeatures = [ "backtrace" "default" "derive" "failure_derive" "std" ];
      };
      "failure_derive" = rec {
        crateName = "failure_derive";
        version = "0.1.7";
        edition = "2015";
        sha256 = "0cfjz0c9szqpxn43b2r722p6m3swzxj7aj6xhqw23ml7h8y762h3";
        procMacro = true;
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
          }
          {
            name = "quote";
            packageId = "quote 1.0.3";
          }
          {
            name = "syn";
            packageId = "syn 1.0.17";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
        features = {
        };
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1a7iq7m4ggq2njrm7h1x2v2gxzxkd2160awk0fwrrpcfrq27vizh";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" ];
          "default" = [ "std" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
          "unstable" = [ "futures-core/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.4";
        edition = "2018";
        sha256 = "0jj6mjvjbvv36r6w86lmjkh62mwndz901nsq4fwqjpl2d7vr4mgj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1fj1jw8g7l5v1sf7lh0w0smq596vmxaxzklh98l3fnxipkhz6x7n";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1ihd1429kyfncxpc4mvina1hbppywfqzql6zrnjcflk1m6d9af56";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.4";
        edition = "2018";
        sha256 = "19r3akc8y0br6jbx0lh1cfq07n8f23g7qfaag4m59xz17nm82l4s";
        procMacro = true;
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
          }
          {
            name = "quote";
            packageId = "quote 1.0.3";
          }
          {
            name = "syn";
            packageId = "syn 1.0.17";
            features = [ "full" ];
          }
        ];
        
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.4";
        edition = "2018";
        sha256 = "09ss6zg7w36s3y2715bnvfrnwr3b8vnklmxag00wvkgn7kjk82kv";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1i84h30q2q93y4l4bk2g22mp96aws02a0k9qy3nnnc34bpr6qxi2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" "proc-macro-hack" "proc-macro-nested" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" "futures-task/cfg-target-has-atomic" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "read-initializer" = [ "io" "futures-io/read-initializer" "futures-io/unstable" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "default" "futures-macro" "proc-macro-hack" "proc-macro-nested" "slab" "std" ];
      };
      "gio" = rec {
        crateName = "gio";
        version = "0.8.1";
        edition = "2015";
        sha256 = "19cnla2ya0mi6wwaabd5mxbq2kzq46dg6jq2z19rpqyc2na0zl8c";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "gio-sys/dox" "glib/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "v2_44" = [ "gio-sys/v2_44" "glib/v2_44" ];
          "v2_46" = [ "v2_44" "gio-sys/v2_46" "glib/v2_46" ];
          "v2_48" = [ "v2_46" "gio-sys/v2_48" "glib/v2_48" ];
          "v2_50" = [ "v2_48" "gio-sys/v2_50" "glib/v2_50" ];
          "v2_52" = [ "v2_50" "gio-sys/v2_52" "glib/v2_52" ];
          "v2_54" = [ "v2_52" "gio-sys/v2_54" "glib/v2_54" ];
          "v2_56" = [ "v2_54" "gio-sys/v2_56" "glib/v2_56" ];
          "v2_58" = [ "v2_56" "gio-sys/v2_58" "glib/v2_58" ];
          "v2_60" = [ "v2_58" "gio-sys/v2_60" "glib/v2_60" ];
        };
      };
      "gio-sys" = rec {
        crateName = "gio-sys";
        version = "0.9.1";
        edition = "2015";
        sha256 = "049rafihxp3maxg3fwj6062ni9dcfilvhfq6ibnfgsmr89925bag";
        libName = "gio_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_48" = [ "v2_46" ];
          "v2_50" = [ "v2_48" ];
          "v2_52" = [ "v2_50" ];
          "v2_54" = [ "v2_52" ];
          "v2_56" = [ "v2_54" ];
          "v2_58" = [ "v2_56" ];
          "v2_60" = [ "v2_58" ];
          "v2_62" = [ "v2_60" ];
        };
      };
      "glib" = rec {
        crateName = "glib";
        version = "0.9.3";
        edition = "2015";
        sha256 = "1h3100mf7kdfxibjz5na0sqzbd2mcsyd8pzivn3666w414x5gys0";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "glib-sys/dox" "gobject-sys/dox" ];
          "v2_44" = [ "glib-sys/v2_44" "gobject-sys/v2_44" ];
          "v2_46" = [ "v2_44" "glib-sys/v2_46" "gobject-sys/v2_46" ];
          "v2_48" = [ "v2_46" "glib-sys/v2_48" ];
          "v2_50" = [ "v2_48" "glib-sys/v2_50" ];
          "v2_52" = [ "v2_50" "glib-sys/v2_52" ];
          "v2_54" = [ "v2_52" "glib-sys/v2_54" "gobject-sys/v2_54" ];
          "v2_56" = [ "v2_54" "glib-sys/v2_56" ];
          "v2_58" = [ "v2_56" "glib-sys/v2_58" ];
          "v2_60" = [ "v2_58" "glib-sys/v2_60" ];
        };
      };
      "glib-sys" = rec {
        crateName = "glib-sys";
        version = "0.9.1";
        edition = "2015";
        sha256 = "1qhnwfqqcp63mx4q9744rfkq78g6ky2j8ppsxxgw0ipl08w6z1cm";
        libName = "glib_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_48" = [ "v2_46" ];
          "v2_50" = [ "v2_48" ];
          "v2_52" = [ "v2_50" ];
          "v2_54" = [ "v2_52" ];
          "v2_56" = [ "v2_54" ];
          "v2_58" = [ "v2_56" ];
          "v2_60" = [ "v2_58" ];
          "v2_62" = [ "v2_60" ];
        };
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.2.11";
        edition = "2015";
        sha256 = "1ysvi72slkw784fcsymgj4308c3y03gwjjzqxp80xdjnkbh8vqcb";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "gobject-sys" = rec {
        crateName = "gobject-sys";
        version = "0.9.1";
        edition = "2015";
        sha256 = "1nakflbp3gjaas4fw7sn3p1p32khyfpcq1h06z7yqd10yq2ail9i";
        libName = "gobject_sys";
        authors = [
          "The Gtk-rs Project Developers"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_54" = [ "v2_46" ];
          "v2_58" = [ "v2_54" ];
          "v2_62" = [ "v2_58" ];
        };
      };
      "gstreamer" = rec {
        crateName = "gstreamer";
        version = "0.15.4";
        edition = "2015";
        sha256 = "04cq7fwwlvm2dsl7pb70clpfs8aasb2b6jk97pigp2kpy4xrc2yr";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
            features = [ "v1_8" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "muldiv";
            packageId = "muldiv";
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "dox" = [ "v1_16" "gstreamer-sys/dox" "glib/dox" "ser_de" ];
          "embed-lgpl-docs" = [ "rustdoc-stripper" ];
          "purge-lgpl-docs" = [ "rustdoc-stripper" ];
          "ser_de" = [ "num-rational/serde" "serde" "serde_bytes" "serde_derive" ];
          "v1_10" = [ "gstreamer-sys/v1_10" ];
          "v1_12" = [ "gstreamer-sys/v1_12" "v1_10" ];
          "v1_14" = [ "gstreamer-sys/v1_14" "v1_12" ];
          "v1_16" = [ "gstreamer-sys/v1_16" "v1_14" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gstreamer-net" = rec {
        crateName = "gstreamer-net";
        version = "0.15.0";
        edition = "2015";
        sha256 = "0njqj6g42wyij8zqbz9fk1vh2ijynbwi155386kb6x9pb7ayh9dc";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer";
            packageId = "gstreamer";
          }
          {
            name = "gstreamer-net-sys";
            packageId = "gstreamer-net-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
            features = [ "v1_8" ];
          }
        ];
        features = {
          "dox" = [ "v1_16" "gstreamer-net-sys/dox" "glib/dox" "gstreamer/dox" ];
          "embed-lgpl-docs" = [ "rustdoc-stripper" ];
          "purge-lgpl-docs" = [ "rustdoc-stripper" ];
          "v1_10" = [ "gstreamer/v1_10" "gstreamer-net-sys/v1_10" ];
          "v1_12" = [ "gstreamer/v1_12" "gstreamer-net-sys/v1_12" "v1_10" ];
          "v1_14" = [ "gstreamer/v1_14" "gstreamer-net-sys/v1_14" "v1_12" ];
          "v1_16" = [ "gstreamer/v1_16" "gstreamer-net-sys/v1_16" "v1_14" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gstreamer-net-sys" = rec {
        crateName = "gstreamer-net-sys";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0q16592mrk77c3y2y148zvhpl8kpw95h40d7irzx4bvcz7p59d00";
        libName = "gstreamer_net_sys";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = [ "v1_16" ];
          "v1_10" = [ "v1_8" "gstreamer-sys/v1_10" ];
          "v1_12" = [ "v1_10" "gstreamer-sys/v1_12" ];
          "v1_14" = [ "v1_12" "gstreamer-sys/v1_14" ];
          "v1_16" = [ "v1_14" "gstreamer-sys/v1_16" ];
          "v1_2" = [ "gstreamer-sys/v1_2" ];
          "v1_4" = [ "v1_2" "gstreamer-sys/v1_4" ];
          "v1_6" = [ "v1_4" "gstreamer-sys/v1_6" ];
          "v1_8" = [ "v1_6" "gstreamer-sys/v1_8" ];
        };
        resolvedDefaultFeatures = [ "v1_2" "v1_4" "v1_6" "v1_8" ];
      };
      "gstreamer-rtsp" = rec {
        crateName = "gstreamer-rtsp";
        version = "0.15.0";
        edition = "2015";
        sha256 = "1x6yigp7f9c7db14myqv7sh5ffpi12xczsrh1cbry7m4agqi864p";
        authors = [
          "Mathieu Duponchelle <mathieu@centricular.com>"
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer";
            packageId = "gstreamer";
          }
          {
            name = "gstreamer-rtsp-sys";
            packageId = "gstreamer-rtsp-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-sdp";
            packageId = "gstreamer-sdp";
          }
          {
            name = "gstreamer-sdp-sys";
            packageId = "gstreamer-sdp-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
            features = [ "v1_8" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "v1_16" "gstreamer-rtsp-sys/dox" "glib/dox" "gstreamer/dox" ];
          "embed-lgpl-docs" = [ "rustdoc-stripper" ];
          "purge-lgpl-docs" = [ "rustdoc-stripper" ];
          "v1_10" = [ "gstreamer/v1_10" "gstreamer-sdp/v1_10" ];
          "v1_12" = [ "gstreamer/v1_12" "gstreamer-sdp/v1_12" "v1_10" ];
          "v1_14" = [ "gstreamer/v1_14" "gstreamer-sdp/v1_14" "v1_12" ];
          "v1_16" = [ "gstreamer/v1_16" "gstreamer-sdp/v1_16" "v1_14" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gstreamer-rtsp-server" = rec {
        crateName = "gstreamer-rtsp-server";
        version = "0.15.4";
        edition = "2015";
        sha256 = "08qjrn29fdvzj61sc49hrfxryppsjixlkh2pilwa809bv0279388";
        authors = [
          "Mathieu Duponchelle <mathieu@centricular.com>"
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "gio";
            packageId = "gio";
          }
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer";
            packageId = "gstreamer";
          }
          {
            name = "gstreamer-net";
            packageId = "gstreamer-net";
          }
          {
            name = "gstreamer-net-sys";
            packageId = "gstreamer-net-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-rtsp";
            packageId = "gstreamer-rtsp";
          }
          {
            name = "gstreamer-rtsp-server-sys";
            packageId = "gstreamer-rtsp-server-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-rtsp-sys";
            packageId = "gstreamer-rtsp-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-sdp";
            packageId = "gstreamer-sdp";
          }
          {
            name = "gstreamer-sdp-sys";
            packageId = "gstreamer-sdp-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
            features = [ "v1_8" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "dox" = [ "v1_16" "gstreamer-rtsp-server-sys/dox" "glib/dox" "gstreamer/dox" ];
          "embed-lgpl-docs" = [ "rustdoc-stripper" ];
          "purge-lgpl-docs" = [ "rustdoc-stripper" ];
          "v1_10" = [ "gstreamer/v1_10" "gstreamer-rtsp/v1_10" "gstreamer-net/v1_10" "gstreamer-rtsp-server-sys/v1_10" ];
          "v1_12" = [ "gstreamer/v1_12" "gstreamer-rtsp/v1_12" "gstreamer-net/v1_12" "gstreamer-rtsp-server-sys/v1_12" "v1_10" ];
          "v1_14" = [ "gstreamer/v1_14" "gstreamer-rtsp/v1_14" "gstreamer-net/v1_14" "gstreamer-rtsp-server-sys/v1_14" "v1_12" ];
          "v1_16" = [ "gstreamer/v1_16" "gstreamer-rtsp/v1_16" "gstreamer-net/v1_16" "gstreamer-rtsp-server-sys/v1_16" "v1_14" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gstreamer-rtsp-server-sys" = rec {
        crateName = "gstreamer-rtsp-server-sys";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1prmkxmwsaxqpbrh5i02kr3xach2f7fjkykmwjjx2il86q9k9rqp";
        libName = "gstreamer_rtsp_server_sys";
        authors = [
          "Mathieu Duponchelle <mathieu@centricular.com>"
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer-net-sys";
            packageId = "gstreamer-net-sys";
          }
          {
            name = "gstreamer-rtsp-sys";
            packageId = "gstreamer-rtsp-sys";
          }
          {
            name = "gstreamer-sdp-sys";
            packageId = "gstreamer-sdp-sys";
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = [ "v1_16" ];
          "v1_10" = [ "v1_8" "gstreamer-sys/v1_10" "gstreamer-net-sys/v1_10" "gstreamer-rtsp-sys/v1_10" "gstreamer-sdp-sys/v1_10" ];
          "v1_12" = [ "v1_10" "gstreamer-sys/v1_12" "gstreamer-net-sys/v1_12" "gstreamer-rtsp-sys/v1_12" "gstreamer-sdp-sys/v1_12" ];
          "v1_14" = [ "v1_12" "gstreamer-sys/v1_14" "gstreamer-net-sys/v1_14" "gstreamer-rtsp-sys/v1_14" "gstreamer-sdp-sys/v1_14" ];
          "v1_16" = [ "v1_14" "gstreamer-sys/v1_16" "gstreamer-net-sys/v1_16" "gstreamer-rtsp-sys/v1_16" "gstreamer-sdp-sys/v1_16" ];
          "v1_2" = [ "gstreamer-sys/v1_2" "gstreamer-net-sys/v1_2" "gstreamer-rtsp-sys/v1_2" "gstreamer-sdp-sys/v1_2" ];
          "v1_4" = [ "v1_2" "gstreamer-sys/v1_4" "gstreamer-net-sys/v1_4" "gstreamer-rtsp-sys/v1_4" "gstreamer-sdp-sys/v1_4" ];
          "v1_6" = [ "v1_4" "gstreamer-sys/v1_6" "gstreamer-net-sys/v1_6" "gstreamer-rtsp-sys/v1_6" "gstreamer-sdp-sys/v1_6" ];
          "v1_8" = [ "v1_6" "gstreamer-sys/v1_8" "gstreamer-net-sys/v1_8" "gstreamer-rtsp-sys/v1_8" "gstreamer-sdp-sys/v1_8" ];
        };
        resolvedDefaultFeatures = [ "v1_2" "v1_4" "v1_6" "v1_8" ];
      };
      "gstreamer-rtsp-sys" = rec {
        crateName = "gstreamer-rtsp-sys";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1naz59xrspyb3m85f6h5i3b2wrkxq3ivvy80hnjf02gqa6kbsszd";
        libName = "gstreamer_rtsp_sys";
        authors = [
          "Mathieu Duponchelle <mathieu@centricular.com>"
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "gio-sys";
            packageId = "gio-sys";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer-sdp-sys";
            packageId = "gstreamer-sdp-sys";
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = [ "v1_16" ];
          "v1_10" = [ "v1_8" "gstreamer-sys/v1_10" "gstreamer-sdp-sys/v1_10" ];
          "v1_12" = [ "v1_10" "gstreamer-sys/v1_12" "gstreamer-sdp-sys/v1_12" ];
          "v1_14" = [ "v1_12" "gstreamer-sys/v1_14" "gstreamer-sdp-sys/v1_14" ];
          "v1_16" = [ "v1_14" "gstreamer-sys/v1_16" "gstreamer-sdp-sys/v1_16" ];
          "v1_2" = [ "gstreamer-sys/v1_2" "gstreamer-sdp-sys/v1_2" ];
          "v1_2_1" = [ "v1_2" ];
          "v1_4" = [ "v1_2_1" "gstreamer-sys/v1_4" "gstreamer-sdp-sys/v1_4" ];
          "v1_6" = [ "v1_4" "gstreamer-sys/v1_6" "gstreamer-sdp-sys/v1_6" ];
          "v1_8" = [ "v1_6" "gstreamer-sys/v1_8" "gstreamer-sdp-sys/v1_8" ];
        };
        resolvedDefaultFeatures = [ "v1_2" "v1_2_1" "v1_4" "v1_6" "v1_8" ];
      };
      "gstreamer-sdp" = rec {
        crateName = "gstreamer-sdp";
        version = "0.15.0";
        edition = "2015";
        sha256 = "0wxrqzjkiy8iga06j8inx0vamddydxwjj72qghspl1ybhn5zakb7";
        authors = [
          "Mathieu Duponchelle <mathieu@centricular.com>"
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer";
            packageId = "gstreamer";
          }
          {
            name = "gstreamer-sdp-sys";
            packageId = "gstreamer-sdp-sys";
            features = [ "v1_8" ];
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
            features = [ "v1_8" ];
          }
        ];
        features = {
          "dox" = [ "v1_16" "gstreamer-sdp-sys/dox" "glib/dox" "gstreamer/dox" ];
          "embed-lgpl-docs" = [ "rustdoc-stripper" ];
          "purge-lgpl-docs" = [ "rustdoc-stripper" ];
          "v1_10" = [ "gstreamer/v1_10" "gstreamer-sdp-sys/v1_10" "v1_8_1" ];
          "v1_12" = [ "gstreamer/v1_12" "gstreamer-sdp-sys/v1_12" "v1_10" ];
          "v1_14" = [ "gstreamer/v1_14" "gstreamer-sdp-sys/v1_14" "v1_12" ];
          "v1_16" = [ "gstreamer/v1_16" "gstreamer-sdp-sys/v1_16" "v1_14" ];
          "v1_8_1" = [ "gstreamer-sdp-sys/v1_8_1" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "gstreamer-sdp-sys" = rec {
        crateName = "gstreamer-sdp-sys";
        version = "0.8.1";
        edition = "2015";
        sha256 = "0yil4g5vy0skv8a0p8gfz17kcn5z7gmdrp896kpj60zjz728ms4r";
        libName = "gstreamer_sdp_sys";
        authors = [
          "Mathieu Duponchelle <mathieu@centricular.com>"
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "gstreamer-sys";
            packageId = "gstreamer-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = [ "v1_16" ];
          "v1_10" = [ "v1_8_1" "gstreamer-sys/v1_10" ];
          "v1_12" = [ "v1_10" "gstreamer-sys/v1_12" ];
          "v1_14" = [ "v1_12" "gstreamer-sys/v1_14" ];
          "v1_16" = [ "v1_14" "gstreamer-sys/v1_16" ];
          "v1_2" = [ "gstreamer-sys/v1_2" ];
          "v1_4" = [ "v1_2" "gstreamer-sys/v1_4" ];
          "v1_6" = [ "v1_4" "gstreamer-sys/v1_6" ];
          "v1_8" = [ "v1_4" "gstreamer-sys/v1_8" ];
          "v1_8_1" = [ "v1_8" ];
        };
        resolvedDefaultFeatures = [ "v1_2" "v1_4" "v1_6" "v1_8" ];
      };
      "gstreamer-sys" = rec {
        crateName = "gstreamer-sys";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1nsk802vlcyi9p93sg60wv8fzb2mq7j52lfdda4va2kxp40xl60x";
        libName = "gstreamer_sys";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "dox" = [ "v1_16" ];
          "v1_10" = [ "v1_8" ];
          "v1_12" = [ "v1_10" ];
          "v1_14" = [ "v1_12" ];
          "v1_16" = [ "v1_14" ];
          "v1_2" = [ "v1_0_10" ];
          "v1_2_3" = [ "v1_2" ];
          "v1_4" = [ "v1_2_3" ];
          "v1_6" = [ "v1_4" ];
          "v1_8" = [ "v1_6" ];
        };
        resolvedDefaultFeatures = [ "v1_0_10" "v1_2" "v1_2_3" "v1_4" "v1_6" "v1_8" ];
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0blmmzik5cs79ivq70s9gal8ypgzj50wnl2hwsaam46gjjbz2p3j";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ioctl-rs" = rec {
        crateName = "ioctl-rs";
        version = "0.1.6";
        edition = "2015";
        sha256 = "0zdrgqxblrwm4ym8pwrr7a4dwjzxrvr1k0qjx6rk1vjwi480b5zp";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "iovec" = rec {
        crateName = "iovec";
        version = "0.1.4";
        edition = "2015";
        sha256 = "0ph73qygwx8i0mblrf110cj59l00gkmsgrpzz1rm85syz5pymcxj";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: target."unix";
          }
        ];
        
      };
      "ipnetwork" = rec {
        crateName = "ipnetwork";
        version = "0.15.1";
        edition = "2018";
        sha256 = "0kdx1lfy5la37nk1wr0pmp83pgis2m81f98wm16yfx1kc7ixb7d6";
        authors = [
          "Abhishek Chanda <abhishek.becs@gmail.com>"
          "Linus Färnstrand <faern@faern.net>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "dev" = [ "clippy" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "kernel32-sys" = rec {
        crateName = "kernel32-sys";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1389av0601a9yz8dvx5zha9vmkd6ik7ax0idpb032d28555n41vm";
        libName = "kernel32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.68";
        edition = "2015";
        sha256 = "1w6z9krcqn7p200sb80dxx76iyvw3jdz949zxr1sgfr3a50c186y";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "log 0.3.9" = rec {
        crateName = "log";
        version = "0.3.9";
        edition = "2015";
        sha256 = "0jq23hhn5h35k7pa8r7wqnsywji6x3wn1q5q7lif5q536if8v7p1";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log 0.4.8";
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "max_level_debug" = [ "log/max_level_debug" ];
          "max_level_error" = [ "log/max_level_error" ];
          "max_level_info" = [ "log/max_level_info" ];
          "max_level_off" = [ "log/max_level_off" ];
          "max_level_trace" = [ "log/max_level_trace" ];
          "max_level_warn" = [ "log/max_level_warn" ];
          "release_max_level_debug" = [ "log/release_max_level_debug" ];
          "release_max_level_error" = [ "log/release_max_level_error" ];
          "release_max_level_info" = [ "log/release_max_level_info" ];
          "release_max_level_off" = [ "log/release_max_level_off" ];
          "release_max_level_trace" = [ "log/release_max_level_trace" ];
          "release_max_level_warn" = [ "log/release_max_level_warn" ];
          "use_std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "log 0.4.8" = rec {
        crateName = "log";
        version = "0.4.8";
        edition = "2015";
        sha256 = "1xz18ixccl5c6np4linv3ypc7hpmmgpc5zzd2ymp2ssfx0mhbdhl";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable_sval" = [ "kv_unstable" "sval/fmt" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "mavlink" = rec {
        crateName = "mavlink";
        version = "0.8.0";
        edition = "2018";
        crateBin = [];
        sha256 = "1xbq6ny20v3aydly8yd0d470nnp0d4b4svj969iz77a2zyhc64vn";
        build = "build/main.rs";
        authors = [
          "Todd Stellanova"
          "Michal Podhradsky"
          "Kevin Mehall"
          "Tim Ryan"
          "Patrick José Pereira"
          "Ibiyemi Abiodun"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.2.1";
          }
          {
            name = "byteorder";
            packageId = "byteorder 0.5.3";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crc16";
            packageId = "crc16";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serial";
            packageId = "serial";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crc16";
            packageId = "crc16";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "quote";
            packageId = "quote 0.3.15";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
          "default" = [ "std" "tcp" "udp" "direct-serial" "serial" "serde" "common" ];
          "std" = [ "byteorder" ];
        };
        resolvedDefaultFeatures = [ "byteorder" "common" "default" "direct-serial" "emit-extensions" "serde" "serial" "std" "tcp" "udp" ];
      };
      "mavlink-camera-manager" = rec {
        crateName = "mavlink-camera-manager";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "mavlink-camera-manager"; path = "src/main.rs"; }
        ];
        src = pkgs.callPackage ./tarball-v0.1.0.nix {};
        authors = [
          "Patrick José Pereira <patrickelectric@gmail.com>"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
          }
          {
            name = "failure";
            packageId = "failure";
          }
          {
            name = "failure_derive";
            packageId = "failure_derive";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "gstreamer";
            packageId = "gstreamer";
          }
          {
            name = "gstreamer-rtsp-server";
            packageId = "gstreamer-rtsp-server";
          }
          {
            name = "mavlink";
            packageId = "mavlink";
            features = [ "default" "emit-extensions" ];
          }
          {
            name = "pnet";
            packageId = "pnet";
          }
          {
            name = "regex";
            packageId = "regex 1.3.6";
          }
        ];
        
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.3.3";
        edition = "2015";
        sha256 = "0074pvsfl938ndl5js14ibc7i9q0k3zp390z843w8nlyv4bxha1p";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "use_std" ];
      };
      "muldiv" = rec {
        crateName = "muldiv";
        version = "0.2.1";
        edition = "2018";
        sha256 = "014jlry2l2ph56mp8knw65637hh49q7fmrraim2bx9vz0a638684";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        
      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.2.5";
        edition = "2015";
        sha256 = "1wnv7776fh4i40r3zfxcxcmm0dh029skx7gp4sjknz2kqm2hpzga";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
          }
          {
            name = "syn";
            packageId = "syn 0.15.44";
          }
        ];
        features = {
          "full-syntax" = [ "syn/full" ];
        };
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.42";
        edition = "2015";
        sha256 = "1fpw8yr9xwsf3qrh91rm7mzqaiwlc2dmnalsxv9pr9w1klpacviz";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.2.4";
        edition = "2015";
        sha256 = "1vsaz96chxcgpqd5a0dq8hb3b4sj6dnlhwmpbkf4mx6vnls0202w";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bigint-std" = [ "bigint" "num-bigint/std" ];
          "default" = [ "bigint-std" "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.11";
        edition = "2015";
        sha256 = "15khrlm1bra50nd48ijl1vln13m9xg4fxzghf28jp16ic5zf8ay6";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "paste" = rec {
        crateName = "paste";
        version = "0.1.10";
        edition = "2018";
        sha256 = "0yk4zbi7128dcrklsbwfa63d39x0dv8f7pdbrylvdlcj0s9v2kxb";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "paste-impl";
            packageId = "paste-impl";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
        ];
        
      };
      "paste-impl" = rec {
        crateName = "paste-impl";
        version = "0.1.10";
        edition = "2018";
        sha256 = "12jsm83dnsqnrcabfacnwcxh3h4kykl622vi7glv2wg527hqc956";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
          }
          {
            name = "quote";
            packageId = "quote 1.0.3";
          }
          {
            name = "syn";
            packageId = "syn 1.0.17";
          }
        ];
        
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0-alpha.4";
        edition = "2018";
        sha256 = "11xmyx00n4m37d546by2rxb8ryxs12v55cc172i3yak1rqccd52q";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
        
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.17";
        edition = "2015";
        sha256 = "0xynnaxdv0gzadlw4h79j855k0q7rj4zb9xb1vk00nc6ss559nh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        
      };
      "pnet" = rec {
        crateName = "pnet";
        version = "0.25.0";
        edition = "2015";
        sha256 = "1w0wwm6gfbsc4lzmv965b7w52wglxnx0ai6w96zgr0b4qb3c422w";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "ipnetwork";
            packageId = "ipnetwork";
          }
          {
            name = "pnet_base";
            packageId = "pnet_base";
          }
          {
            name = "pnet_datalink";
            packageId = "pnet_datalink";
          }
          {
            name = "pnet_packet";
            packageId = "pnet_packet";
          }
          {
            name = "pnet_sys";
            packageId = "pnet_sys";
          }
          {
            name = "pnet_transport";
            packageId = "pnet_transport";
          }
        ];
        features = {
          "netmap" = [ "pnet_datalink/netmap_sys" "pnet_datalink/netmap" ];
          "pcap" = [ "pnet_datalink/pcap" ];
          "serde" = [ "pnet_base/serde" ];
        };
      };
      "pnet_base" = rec {
        crateName = "pnet_base";
        version = "0.22.0";
        edition = "2015";
        sha256 = "07w0z6wmhl0klkhzxkiabz5gj5xn5c69l6mrs9nl6xyc5z7qmwjd";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
          "Linus Färnstrand <faern@faern.net>"
        ];
        
      };
      "pnet_datalink" = rec {
        crateName = "pnet_datalink";
        version = "0.25.0";
        edition = "2015";
        sha256 = "1sp0q0vgv3sc46g7xzg9j0wyp6x4bjp6hvpm6y7l6lxwgkv8spsl";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
          "Linus Färnstrand <faern@faern.net>"
        ];
        dependencies = [
          {
            name = "ipnetwork";
            packageId = "ipnetwork";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pnet_base";
            packageId = "pnet_base";
          }
          {
            name = "pnet_sys";
            packageId = "pnet_sys";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
        };
      };
      "pnet_macros" = rec {
        crateName = "pnet_macros";
        version = "0.21.0";
        edition = "2015";
        sha256 = "1r31wm48flwj861pdj09ygry16kxy3jf3sfyc0z4x7bkznb808jx";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "regex";
            packageId = "regex 0.2.11";
          }
          {
            name = "syntex";
            packageId = "syntex";
          }
          {
            name = "syntex_syntax";
            packageId = "syntex_syntax";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "pnet_macros_support" = rec {
        crateName = "pnet_macros_support";
        version = "0.25.0";
        edition = "2015";
        sha256 = "0frq9biybfy609mqmk313xzv8rj5c931lvj89kviag3hp9a6hn2y";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "pnet_base";
            packageId = "pnet_base";
          }
        ];
        
      };
      "pnet_packet" = rec {
        crateName = "pnet_packet";
        version = "0.25.0";
        edition = "2015";
        sha256 = "05zxlicwbcq55gsj8w0iyr4zg97472c9j6k2p96q2bjgdmf0fk64";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "pnet_base";
            packageId = "pnet_base";
          }
          {
            name = "pnet_macros_support";
            packageId = "pnet_macros_support";
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "pnet_macros";
            packageId = "pnet_macros";
          }
          {
            name = "syntex";
            packageId = "syntex";
          }
        ];
        
      };
      "pnet_sys" = rec {
        crateName = "pnet_sys";
        version = "0.25.0";
        edition = "2015";
        sha256 = "0a9wybvwi1khmkmwcl7wqqabnwqp5ml48qfv85aqrjassyk83y42";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
          "Linus Färnstrand <faern@faern.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
          {
            name = "ws2_32-sys";
            packageId = "ws2_32-sys";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "pnet_transport" = rec {
        crateName = "pnet_transport";
        version = "0.25.0";
        edition = "2015";
        sha256 = "1dk7qqg65mk0ji0cabcmx7fjxhrwnzpbqivxkagvmnmmwypcqx8v";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pnet_base";
            packageId = "pnet_base";
          }
          {
            name = "pnet_packet";
            packageId = "pnet_packet";
          }
          {
            name = "pnet_sys";
            packageId = "pnet_sys";
          }
        ];
        
      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.15";
        edition = "2018";
        sha256 = "0qqbfm1byabjkph56r2rlvv4cliz4960j6hav3ljazyjqvkryr8d";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "proc-macro-nested" = rec {
        crateName = "proc-macro-nested";
        version = "0.1.4";
        edition = "2015";
        sha256 = "15664z2pjnn7ajpbrir4wh4c16jxz4i8r46y73n2kvfkz6an154f";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "proc-macro2 0.4.30" = rec {
        crateName = "proc-macro2";
        version = "0.4.30";
        edition = "2015";
        sha256 = "0nd71fl24sys066jrha6j7i34nfkjv44yzw8yww9742wmc8j0gfg";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proc-macro2 1.0.10" = rec {
        crateName = "proc-macro2";
        version = "1.0.10";
        edition = "2018";
        sha256 = "1qxbnl8i3a5b2nxb8kdxbq6kj3pd1ckhm35wm7z3jd7n5wlns96z";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 0.3.15" = rec {
        crateName = "quote";
        version = "0.3.15";
        edition = "2015";
        sha256 = "0yhnnix4dzsv8y4wwz4csbnqjfh73al33j35msr10py6cl5r4vks";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        
      };
      "quote 0.6.13" = rec {
        crateName = "quote";
        version = "0.6.13";
        edition = "2015";
        sha256 = "1qgqq48jymp5h4y082aanf25hrw6bpb678xh3zw993qfhxmkpqkc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote 1.0.3" = rec {
        crateName = "quote";
        version = "1.0.3";
        edition = "2018";
        sha256 = "0zwd6fp74xfg4jnnnwj4v84lkzif2giwj4ch1hka9g35ghc6rp1b";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "regex 0.2.11" = rec {
        crateName = "regex";
        version = "0.2.11";
        edition = "2015";
        sha256 = "1163ir1k5zjspirfjl4wqbviwrxlhmfwy95xxb69y4irkv4snack";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick 0.6.10";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.5.6";
          }
          {
            name = "thread_local";
            packageId = "thread_local 0.3.6";
          }
          {
            name = "utf8-ranges";
            packageId = "utf8-ranges";
          }
        ];
        features = {
          "unstable" = [ "pattern" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "regex 1.3.6" = rec {
        crateName = "regex";
        version = "1.3.6";
        edition = "2015";
        sha256 = "1cx4lcgy7vdi2kij2n1dp2whl33d7974g1kxwiklhs192nclcsbz";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick 0.7.10";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.17";
            usesDefaultFeatures = false;
          }
          {
            name = "thread_local";
            packageId = "thread_local 1.0.1";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "aho-corasick" "default" "memchr" "perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "std" "thread_local" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.5.6" = rec {
        crateName = "regex-syntax";
        version = "0.5.6";
        edition = "2015";
        sha256 = "19zp25jr3dhmclg3qqjk3bh1yrn7bqi05zgr5v52szv3l97plw3x";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "ucd-util";
            packageId = "ucd-util";
          }
        ];
        
      };
      "regex-syntax 0.6.17" = rec {
        crateName = "regex-syntax";
        version = "0.6.17";
        edition = "2015";
        sha256 = "1blmlgzcg7in3kcxqabpfzzrbnamr2i671flbrmlqhfps5bvvrbz";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.16";
        edition = "2015";
        sha256 = "10qp42sl1wrdbgbbh8rnay2grm976z7hqgz32c4y09l1c071qsac";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-serialize" = rec {
        crateName = "rustc-serialize";
        version = "0.3.24";
        edition = "2015";
        sha256 = "1nkg3vasg7nk80ffkazizgiyv3hb1l9g3d8h17cajbkx538jiwfw";
        authors = [
          "The Rust Project Developers"
        ];
        
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.106";
        edition = "2015";
        sha256 = "169kg1px2k0hlxziiikdwy42wnrs2gjbvsv7yxygcwi08736mprn";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.106";
        edition = "2015";
        sha256 = "0v7a2rkpx9hi70pv2wr2h0h07rgmr7gi37v0s4dn5f2gpwx9wm4y";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
          }
          {
            name = "quote";
            packageId = "quote 1.0.3";
          }
          {
            name = "syn";
            packageId = "syn 1.0.17";
            features = [ "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serial" = rec {
        crateName = "serial";
        version = "0.4.0";
        edition = "2015";
        sha256 = "11iyvc1z123hn7zl6bk5xpf6xdlsb33qh6xa7g0pghqgayb7l8x1";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "serial-core";
            packageId = "serial-core";
          }
          {
            name = "serial-unix";
            packageId = "serial-unix";
            target = { target, features }: target."unix";
          }
          {
            name = "serial-windows";
            packageId = "serial-windows";
            target = { target, features }: target."windows";
          }
        ];
        
      };
      "serial-core" = rec {
        crateName = "serial-core";
        version = "0.4.0";
        edition = "2015";
        sha256 = "10a5lvllz3ljva66bqakrn8cxb3pkaqyapqjw9x760al6jdj0iiz";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "serial-unix" = rec {
        crateName = "serial-unix";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dyaaca8g4q5qzc2l01yirzs6igmhc9agg4w8m5f4rnqr6jbqgzh";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "ioctl-rs";
            packageId = "ioctl-rs";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "serial-core";
            packageId = "serial-core";
          }
          {
            name = "termios";
            packageId = "termios";
          }
        ];
        
      };
      "serial-windows" = rec {
        crateName = "serial-windows";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0ql1vjy57g2jf218bhmgr98i41faq0v5vzdx3g9payi6fsvx7ihm";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "serial-core";
            packageId = "serial-core";
          }
        ];
        
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0sjsm7hrvjdifz661pjxq5w4hf190hx53fra8dfvamacvff139cf";
        authors = [
          "Danny Guo <dannyguo91@gmail.com>"
        ];
        
      };
      "syn 0.15.44" = rec {
        crateName = "syn";
        version = "0.15.44";
        edition = "2015";
        sha256 = "1id5g6x6zihv3j7hwrw3m1jp636bg8dpi671r7zy3jvpkavb794w";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 0.4.30";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 0.6.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.1.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "parsing" "printing" "proc-macro" "quote" ];
      };
      "syn 1.0.17" = rec {
        crateName = "syn";
        version = "1.0.17";
        edition = "2018";
        sha256 = "00xvf772ys4fj9fr8kplmsqb9if215dsipi3nv54aw9q7xkfpw0d";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.3";
        edition = "2018";
        sha256 = "0igmc5fzpk6fg7kgff914j05lbpc6ai2wmji312v2h8vvjhnwrb7";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2 1.0.10";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote 1.0.3";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.17";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.2.0";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "syntex" = rec {
        crateName = "syntex";
        version = "0.42.2";
        edition = "2015";
        sha256 = "05z3xd1f98qfl1wwl05v0pwlh3b7d78jghgdyvjj4fiqdf5b0c0a";
        authors = [
          "erick.tryzelaar@gmail.com"
        ];
        dependencies = [
          {
            name = "syntex_errors";
            packageId = "syntex_errors";
          }
          {
            name = "syntex_syntax";
            packageId = "syntex_syntax";
          }
        ];
        
      };
      "syntex_errors" = rec {
        crateName = "syntex_errors";
        version = "0.42.0";
        edition = "2015";
        sha256 = "0imnfa8sn17igz223nxxw44lnvdq2hhsicjmj5218qbvhqr8zi04";
        authors = [
          "erick.tryzelaar@gmail.com"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log 0.3.9";
          }
          {
            name = "rustc-serialize";
            packageId = "rustc-serialize";
          }
          {
            name = "syntex_pos";
            packageId = "syntex_pos";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.0.3";
          }
        ];
        
      };
      "syntex_pos" = rec {
        crateName = "syntex_pos";
        version = "0.42.0";
        edition = "2015";
        sha256 = "19kij62spjzvls0bknvcpfvy3m6gnnmykjzyc4y82l94wn49km1z";
        authors = [
          "erick.tryzelaar@gmail.com"
        ];
        dependencies = [
          {
            name = "rustc-serialize";
            packageId = "rustc-serialize";
          }
        ];
        
      };
      "syntex_syntax" = rec {
        crateName = "syntex_syntax";
        version = "0.42.0";
        edition = "2015";
        sha256 = "13dx4vcbbavpl2yi1y53r7d9w1cv0p86bwmmmgynd5lgdr8a0a3n";
        authors = [
          "erick.tryzelaar@gmail.com"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 0.5.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log 0.3.9";
          }
          {
            name = "rustc-serialize";
            packageId = "rustc-serialize";
          }
          {
            name = "syntex_errors";
            packageId = "syntex_errors";
          }
          {
            name = "syntex_pos";
            packageId = "syntex_pos";
          }
          {
            name = "term";
            packageId = "term";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid 0.0.3";
          }
        ];
        
      };
      "term" = rec {
        crateName = "term";
        version = "0.4.6";
        edition = "2015";
        sha256 = "1wbh8ngqkqr3f6wz902yplf60bd5yapnckvrkgmzp5nffi7n8qzs";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "kernel32-sys";
            packageId = "kernel32-sys";
            target = { target, features }: target."windows";
          }
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
            target = { target, features }: target."windows";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "termios" = rec {
        crateName = "termios";
        version = "0.2.2";
        edition = "2015";
        sha256 = "0fk8nl0rmk43jrh6hjz6c6d83ri7l6fikag6lh0ffz3di9cwznfm";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        
      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.11.0";
        edition = "2015";
        sha256 = "0q5hky03ik3y50s9sz25r438bc4nwhqc6dqwynv4wylc807n29nk";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        
      };
      "thread_local 0.3.6" = rec {
        crateName = "thread_local";
        version = "0.3.6";
        edition = "2015";
        sha256 = "06rzik99p8c5js8238yhc8rk6np543ylb1dy9nrw5v80j0r3xdf6";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "thread_local 1.0.1" = rec {
        crateName = "thread_local";
        version = "1.0.1";
        edition = "2015";
        sha256 = "054vlrr1vsdy1h4b7n99mr24pnj8928ig9qwzg36wnkld4dns36l";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        
      };
      "ucd-util" = rec {
        crateName = "ucd-util";
        version = "0.1.8";
        edition = "2018";
        sha256 = "0dnjzvcb3q5b69w214wvsmdz2b08jmkxfp0ykckqqd2x15752py8";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.7";
        edition = "2015";
        sha256 = "0yflmxkxmm89ckrb3sz58whn491aycrj8cxra0hzzlb72x9rvana";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.0.3" = rec {
        crateName = "unicode-xid";
        version = "0.0.3";
        edition = "2015";
        sha256 = "1sqvl06884cy3hh14shik5afcv6bhsvb0gh2y267rv5lmyfg1prn";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.1.0" = rec {
        crateName = "unicode-xid";
        version = "0.1.0";
        edition = "2015";
        sha256 = "1z57lqh4s18rr4x0j4fw4fmp9hf9346h0kmdgqsqx0fhjr3k0wpw";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid 0.2.0" = rec {
        crateName = "unicode-xid";
        version = "0.2.0";
        edition = "2015";
        sha256 = "0z09fn515xm7zyr0mmdyxa9mx2f7azcpv74pqmg611iralwpcvl2";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "utf8-ranges" = rec {
        crateName = "utf8-ranges";
        version = "1.0.4";
        edition = "2015";
        sha256 = "1fpc32znar5v02nwsw7icl41jzzzzhy0si6ngqjylzrbxxpi3bml";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.1";
        edition = "2015";
        sha256 = "06n8hw4hlbcz328a3gbpvmy0ma46vg1lc0r5wf55900szf3qdiq5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "winapi 0.2.8" = rec {
        crateName = "winapi";
        version = "0.2.8";
        edition = "2015";
        sha256 = "0yh816lh6lf56dpsgxy189c2ai1z3j8mw9si6izqb6wsjkbcjz8n";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi 0.3.8" = rec {
        crateName = "winapi";
        version = "0.3.8";
        edition = "2015";
        sha256 = "1ii9j9lzrhwri0902652awifzx9fpayimbp6hfhhc296xcg0k4w0";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "minwinbase" "minwindef" "processenv" "winbase" ];
      };
      "winapi-build" = rec {
        crateName = "winapi-build";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1g4rqsgjky0a7530qajn2bbfcrl2v0zb39idgdws9b1l7gp5wc9d";
        libName = "build";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        
      };
      "ws2_32-sys" = rec {
        crateName = "ws2_32-sys";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0ppscg5qfqaw0gzwv2a4nhn5bn01ff9iwn6ysqnzm4n8s3myz76m";
        libName = "ws2_32";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi 0.2.8";
          }
        ];
        buildDependencies = [
          {
            name = "winapi-build";
            packageId = "winapi-build";
          }
        ];
        
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.2.2";
        edition = "2015";
        crateBin = [];
        sha256 = "1gwy8hny2643j2yxpkcs3n4gxbfhxk72wgz06cfxf0ps6kwk8z0d";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vladimir.matweev@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 0.3.3";
          }
        ];
        
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os = if stdenv.hostPlatform.isDarwin
    then "macos"
    else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test = let
        drv = testCrate.override (
          _: {
            buildTests = true;
          }
        );
      in
        pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
      crate.overrideAttrs (
        old: {
          checkPhase = ''
            test -e ${test}
          '';
          passthru = (old.passthru or {}) // {
            inherit test;
          };
        }
      );

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateFunc ? null
    , runTests ? false
    , testCrateFlags ? []
    , testInputs ? []
    }:
      lib.makeOverridable
        (
          { features
          , crateOverrides
          , runTests
          , testCrateFlags
          , testInputs
          }:
            let
              buildRustCrateFuncOverriden = if buildRustCrateFunc != null
              then buildRustCrateFunc
              else (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrate
                else buildRustCrate.override {
                  defaultCrateOverrides = crateOverrides;
                }
              );
              builtRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = false;
              };
              builtTestRustCrates = builtRustCratesWithFeatures {
                inherit packageId features;
                buildRustCrateFunc = buildRustCrateFuncOverriden;
                runTests = true;
              };
              drv = builtRustCrates.${packageId};
              testDrv = builtTestRustCrates.${packageId};
              derivation = if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
              else drv;
            in
              derivation
        )
        { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args // {
            inherit rootPackageId;
            target = target // { test = runTests; };
          }
        );

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId) crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or []);
            dependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies =
                  (crateConfig.dependencies or [])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit builtByPackageId features target;
                dependencies = crateConfig.buildDependencies or [];
              };

            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };

            dependenciesWithRenames =
              lib.filter (d: d ? "rename") (
                filterEnabledDependenciesForThis
                  (
                    (crateConfig.buildDependencies or [])
                    ++ (crateConfig.dependencies or [])
                    ++ devDependencies
                  )
              );

            crateRenames =
              builtins.listToAttrs
                (map (d: { name = d.name; value = d.rename; }) dependenciesWithRenames);
          in
            buildRustCrateFunc (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = crateConfig.sha256;
                  }
                );
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
        builtByPackageId;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { builtByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in
        map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateFunc = lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson (
          buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [];
              "03_dependencies" = crate.dependencies or [];
            };
            inherit packageId;
          }
        );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
      { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? {}
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
            { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
              (
                cache: { packageId, features }:
                  let
                    cacheFeatures = cache.${packageId} or [];
                    combinedFeatures = sortedUnique (cacheFeatures ++ features);
                  in
                    if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                    then cache
                    else mergePackageFeatures {
                      features = combinedFeatures;
                      featuresByPackageId = cache;
                      inherit crateConfigs packageId target runTests rootPackageId;
                    }
              );

        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
            featuresByPackageId // {
              "${packageId}" = combinedFeatures;
            };

        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep" (
            crateConfig.dependencies or []
            ++ lib.optionals
              (runTests && packageId == rootPackageId)
              (crateConfig.devDependencies or [])
          );

        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
          let
            targetFunc = dep.target or (features: true);
          in
            targetFunc { inherit features target; }
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      (rename == null && feature == name)
      || (rename != null && rename == feature)
      || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or []));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
      sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil = if dependency.usesDefaultFeatures or true
      then [ "default" ]
      else [];
      explicitFeatures = dependency.features or [];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
          builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) {} features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}
